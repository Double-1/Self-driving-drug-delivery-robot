
project08.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000103b4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b460  08010574  08010574  00020574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b9d4  0801b9d4  000308dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801b9d4  0801b9d4  0002b9d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b9dc  0801b9dc  000308dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b9dc  0801b9dc  0002b9dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b9e0  0801b9e0  0002b9e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000008dc  20000000  0801b9e4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00069f04  200008e0  0801c2c0  000308e0  2**3
                  ALLOC
 10 ._user_heap_stack 00001404  2006a7e4  0801c2c0  0003a7e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000308dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002be1d  00000000  00000000  0003090c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000591a  00000000  00000000  0005c729  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018c0  00000000  00000000  00062048  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016d8  00000000  00000000  00063908  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00033318  00000000  00000000  00064fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019ccc  00000000  00000000  000982f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011861a  00000000  00000000  000b1fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ca5de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ca4  00000000  00000000  001ca65c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200008e0 	.word	0x200008e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801055c 	.word	0x0801055c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200008e4 	.word	0x200008e4
 80001fc:	0801055c 	.word	0x0801055c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_d2f>:
 8000628:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800062c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000630:	bf24      	itt	cs
 8000632:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000636:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800063a:	d90d      	bls.n	8000658 <__aeabi_d2f+0x30>
 800063c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000640:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000644:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000648:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800064c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000650:	bf08      	it	eq
 8000652:	f020 0001 	biceq.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800065c:	d121      	bne.n	80006a2 <__aeabi_d2f+0x7a>
 800065e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000662:	bfbc      	itt	lt
 8000664:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000668:	4770      	bxlt	lr
 800066a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000672:	f1c2 0218 	rsb	r2, r2, #24
 8000676:	f1c2 0c20 	rsb	ip, r2, #32
 800067a:	fa10 f30c 	lsls.w	r3, r0, ip
 800067e:	fa20 f002 	lsr.w	r0, r0, r2
 8000682:	bf18      	it	ne
 8000684:	f040 0001 	orrne.w	r0, r0, #1
 8000688:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800068c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000690:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000694:	ea40 000c 	orr.w	r0, r0, ip
 8000698:	fa23 f302 	lsr.w	r3, r3, r2
 800069c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80006a0:	e7cc      	b.n	800063c <__aeabi_d2f+0x14>
 80006a2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80006a6:	d107      	bne.n	80006b8 <__aeabi_d2f+0x90>
 80006a8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80006ac:	bf1e      	ittt	ne
 80006ae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80006b2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80006b6:	4770      	bxne	lr
 80006b8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80006bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop

080006c8 <__aeabi_frsub>:
 80006c8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80006cc:	e002      	b.n	80006d4 <__addsf3>
 80006ce:	bf00      	nop

080006d0 <__aeabi_fsub>:
 80006d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080006d4 <__addsf3>:
 80006d4:	0042      	lsls	r2, r0, #1
 80006d6:	bf1f      	itttt	ne
 80006d8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80006dc:	ea92 0f03 	teqne	r2, r3
 80006e0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80006e4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006e8:	d06a      	beq.n	80007c0 <__addsf3+0xec>
 80006ea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80006ee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80006f2:	bfc1      	itttt	gt
 80006f4:	18d2      	addgt	r2, r2, r3
 80006f6:	4041      	eorgt	r1, r0
 80006f8:	4048      	eorgt	r0, r1
 80006fa:	4041      	eorgt	r1, r0
 80006fc:	bfb8      	it	lt
 80006fe:	425b      	neglt	r3, r3
 8000700:	2b19      	cmp	r3, #25
 8000702:	bf88      	it	hi
 8000704:	4770      	bxhi	lr
 8000706:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800070a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800070e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000712:	bf18      	it	ne
 8000714:	4240      	negne	r0, r0
 8000716:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800071a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800071e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000722:	bf18      	it	ne
 8000724:	4249      	negne	r1, r1
 8000726:	ea92 0f03 	teq	r2, r3
 800072a:	d03f      	beq.n	80007ac <__addsf3+0xd8>
 800072c:	f1a2 0201 	sub.w	r2, r2, #1
 8000730:	fa41 fc03 	asr.w	ip, r1, r3
 8000734:	eb10 000c 	adds.w	r0, r0, ip
 8000738:	f1c3 0320 	rsb	r3, r3, #32
 800073c:	fa01 f103 	lsl.w	r1, r1, r3
 8000740:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000744:	d502      	bpl.n	800074c <__addsf3+0x78>
 8000746:	4249      	negs	r1, r1
 8000748:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800074c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000750:	d313      	bcc.n	800077a <__addsf3+0xa6>
 8000752:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000756:	d306      	bcc.n	8000766 <__addsf3+0x92>
 8000758:	0840      	lsrs	r0, r0, #1
 800075a:	ea4f 0131 	mov.w	r1, r1, rrx
 800075e:	f102 0201 	add.w	r2, r2, #1
 8000762:	2afe      	cmp	r2, #254	; 0xfe
 8000764:	d251      	bcs.n	800080a <__addsf3+0x136>
 8000766:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800076a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800076e:	bf08      	it	eq
 8000770:	f020 0001 	biceq.w	r0, r0, #1
 8000774:	ea40 0003 	orr.w	r0, r0, r3
 8000778:	4770      	bx	lr
 800077a:	0049      	lsls	r1, r1, #1
 800077c:	eb40 0000 	adc.w	r0, r0, r0
 8000780:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000784:	f1a2 0201 	sub.w	r2, r2, #1
 8000788:	d1ed      	bne.n	8000766 <__addsf3+0x92>
 800078a:	fab0 fc80 	clz	ip, r0
 800078e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000792:	ebb2 020c 	subs.w	r2, r2, ip
 8000796:	fa00 f00c 	lsl.w	r0, r0, ip
 800079a:	bfaa      	itet	ge
 800079c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80007a0:	4252      	neglt	r2, r2
 80007a2:	4318      	orrge	r0, r3
 80007a4:	bfbc      	itt	lt
 80007a6:	40d0      	lsrlt	r0, r2
 80007a8:	4318      	orrlt	r0, r3
 80007aa:	4770      	bx	lr
 80007ac:	f092 0f00 	teq	r2, #0
 80007b0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80007b4:	bf06      	itte	eq
 80007b6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80007ba:	3201      	addeq	r2, #1
 80007bc:	3b01      	subne	r3, #1
 80007be:	e7b5      	b.n	800072c <__addsf3+0x58>
 80007c0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80007c4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80007c8:	bf18      	it	ne
 80007ca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007ce:	d021      	beq.n	8000814 <__addsf3+0x140>
 80007d0:	ea92 0f03 	teq	r2, r3
 80007d4:	d004      	beq.n	80007e0 <__addsf3+0x10c>
 80007d6:	f092 0f00 	teq	r2, #0
 80007da:	bf08      	it	eq
 80007dc:	4608      	moveq	r0, r1
 80007de:	4770      	bx	lr
 80007e0:	ea90 0f01 	teq	r0, r1
 80007e4:	bf1c      	itt	ne
 80007e6:	2000      	movne	r0, #0
 80007e8:	4770      	bxne	lr
 80007ea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80007ee:	d104      	bne.n	80007fa <__addsf3+0x126>
 80007f0:	0040      	lsls	r0, r0, #1
 80007f2:	bf28      	it	cs
 80007f4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80007f8:	4770      	bx	lr
 80007fa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80007fe:	bf3c      	itt	cc
 8000800:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000804:	4770      	bxcc	lr
 8000806:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800080a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800080e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000812:	4770      	bx	lr
 8000814:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000818:	bf16      	itet	ne
 800081a:	4608      	movne	r0, r1
 800081c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000820:	4601      	movne	r1, r0
 8000822:	0242      	lsls	r2, r0, #9
 8000824:	bf06      	itte	eq
 8000826:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800082a:	ea90 0f01 	teqeq	r0, r1
 800082e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000832:	4770      	bx	lr

08000834 <__aeabi_ui2f>:
 8000834:	f04f 0300 	mov.w	r3, #0
 8000838:	e004      	b.n	8000844 <__aeabi_i2f+0x8>
 800083a:	bf00      	nop

0800083c <__aeabi_i2f>:
 800083c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000840:	bf48      	it	mi
 8000842:	4240      	negmi	r0, r0
 8000844:	ea5f 0c00 	movs.w	ip, r0
 8000848:	bf08      	it	eq
 800084a:	4770      	bxeq	lr
 800084c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000850:	4601      	mov	r1, r0
 8000852:	f04f 0000 	mov.w	r0, #0
 8000856:	e01c      	b.n	8000892 <__aeabi_l2f+0x2a>

08000858 <__aeabi_ul2f>:
 8000858:	ea50 0201 	orrs.w	r2, r0, r1
 800085c:	bf08      	it	eq
 800085e:	4770      	bxeq	lr
 8000860:	f04f 0300 	mov.w	r3, #0
 8000864:	e00a      	b.n	800087c <__aeabi_l2f+0x14>
 8000866:	bf00      	nop

08000868 <__aeabi_l2f>:
 8000868:	ea50 0201 	orrs.w	r2, r0, r1
 800086c:	bf08      	it	eq
 800086e:	4770      	bxeq	lr
 8000870:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000874:	d502      	bpl.n	800087c <__aeabi_l2f+0x14>
 8000876:	4240      	negs	r0, r0
 8000878:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800087c:	ea5f 0c01 	movs.w	ip, r1
 8000880:	bf02      	ittt	eq
 8000882:	4684      	moveq	ip, r0
 8000884:	4601      	moveq	r1, r0
 8000886:	2000      	moveq	r0, #0
 8000888:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800088c:	bf08      	it	eq
 800088e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000892:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000896:	fabc f28c 	clz	r2, ip
 800089a:	3a08      	subs	r2, #8
 800089c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80008a0:	db10      	blt.n	80008c4 <__aeabi_l2f+0x5c>
 80008a2:	fa01 fc02 	lsl.w	ip, r1, r2
 80008a6:	4463      	add	r3, ip
 80008a8:	fa00 fc02 	lsl.w	ip, r0, r2
 80008ac:	f1c2 0220 	rsb	r2, r2, #32
 80008b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80008b4:	fa20 f202 	lsr.w	r2, r0, r2
 80008b8:	eb43 0002 	adc.w	r0, r3, r2
 80008bc:	bf08      	it	eq
 80008be:	f020 0001 	biceq.w	r0, r0, #1
 80008c2:	4770      	bx	lr
 80008c4:	f102 0220 	add.w	r2, r2, #32
 80008c8:	fa01 fc02 	lsl.w	ip, r1, r2
 80008cc:	f1c2 0220 	rsb	r2, r2, #32
 80008d0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80008d4:	fa21 f202 	lsr.w	r2, r1, r2
 80008d8:	eb43 0002 	adc.w	r0, r3, r2
 80008dc:	bf08      	it	eq
 80008de:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80008e2:	4770      	bx	lr

080008e4 <__aeabi_uldivmod>:
 80008e4:	b953      	cbnz	r3, 80008fc <__aeabi_uldivmod+0x18>
 80008e6:	b94a      	cbnz	r2, 80008fc <__aeabi_uldivmod+0x18>
 80008e8:	2900      	cmp	r1, #0
 80008ea:	bf08      	it	eq
 80008ec:	2800      	cmpeq	r0, #0
 80008ee:	bf1c      	itt	ne
 80008f0:	f04f 31ff 	movne.w	r1, #4294967295
 80008f4:	f04f 30ff 	movne.w	r0, #4294967295
 80008f8:	f000 b972 	b.w	8000be0 <__aeabi_idiv0>
 80008fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000900:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000904:	f000 f806 	bl	8000914 <__udivmoddi4>
 8000908:	f8dd e004 	ldr.w	lr, [sp, #4]
 800090c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000910:	b004      	add	sp, #16
 8000912:	4770      	bx	lr

08000914 <__udivmoddi4>:
 8000914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000918:	9e08      	ldr	r6, [sp, #32]
 800091a:	4604      	mov	r4, r0
 800091c:	4688      	mov	r8, r1
 800091e:	2b00      	cmp	r3, #0
 8000920:	d14b      	bne.n	80009ba <__udivmoddi4+0xa6>
 8000922:	428a      	cmp	r2, r1
 8000924:	4615      	mov	r5, r2
 8000926:	d967      	bls.n	80009f8 <__udivmoddi4+0xe4>
 8000928:	fab2 f282 	clz	r2, r2
 800092c:	b14a      	cbz	r2, 8000942 <__udivmoddi4+0x2e>
 800092e:	f1c2 0720 	rsb	r7, r2, #32
 8000932:	fa01 f302 	lsl.w	r3, r1, r2
 8000936:	fa20 f707 	lsr.w	r7, r0, r7
 800093a:	4095      	lsls	r5, r2
 800093c:	ea47 0803 	orr.w	r8, r7, r3
 8000940:	4094      	lsls	r4, r2
 8000942:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000946:	0c23      	lsrs	r3, r4, #16
 8000948:	fbb8 f7fe 	udiv	r7, r8, lr
 800094c:	fa1f fc85 	uxth.w	ip, r5
 8000950:	fb0e 8817 	mls	r8, lr, r7, r8
 8000954:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000958:	fb07 f10c 	mul.w	r1, r7, ip
 800095c:	4299      	cmp	r1, r3
 800095e:	d909      	bls.n	8000974 <__udivmoddi4+0x60>
 8000960:	18eb      	adds	r3, r5, r3
 8000962:	f107 30ff 	add.w	r0, r7, #4294967295
 8000966:	f080 811b 	bcs.w	8000ba0 <__udivmoddi4+0x28c>
 800096a:	4299      	cmp	r1, r3
 800096c:	f240 8118 	bls.w	8000ba0 <__udivmoddi4+0x28c>
 8000970:	3f02      	subs	r7, #2
 8000972:	442b      	add	r3, r5
 8000974:	1a5b      	subs	r3, r3, r1
 8000976:	b2a4      	uxth	r4, r4
 8000978:	fbb3 f0fe 	udiv	r0, r3, lr
 800097c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000980:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000984:	fb00 fc0c 	mul.w	ip, r0, ip
 8000988:	45a4      	cmp	ip, r4
 800098a:	d909      	bls.n	80009a0 <__udivmoddi4+0x8c>
 800098c:	192c      	adds	r4, r5, r4
 800098e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000992:	f080 8107 	bcs.w	8000ba4 <__udivmoddi4+0x290>
 8000996:	45a4      	cmp	ip, r4
 8000998:	f240 8104 	bls.w	8000ba4 <__udivmoddi4+0x290>
 800099c:	3802      	subs	r0, #2
 800099e:	442c      	add	r4, r5
 80009a0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80009a4:	eba4 040c 	sub.w	r4, r4, ip
 80009a8:	2700      	movs	r7, #0
 80009aa:	b11e      	cbz	r6, 80009b4 <__udivmoddi4+0xa0>
 80009ac:	40d4      	lsrs	r4, r2
 80009ae:	2300      	movs	r3, #0
 80009b0:	e9c6 4300 	strd	r4, r3, [r6]
 80009b4:	4639      	mov	r1, r7
 80009b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d909      	bls.n	80009d2 <__udivmoddi4+0xbe>
 80009be:	2e00      	cmp	r6, #0
 80009c0:	f000 80eb 	beq.w	8000b9a <__udivmoddi4+0x286>
 80009c4:	2700      	movs	r7, #0
 80009c6:	e9c6 0100 	strd	r0, r1, [r6]
 80009ca:	4638      	mov	r0, r7
 80009cc:	4639      	mov	r1, r7
 80009ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d2:	fab3 f783 	clz	r7, r3
 80009d6:	2f00      	cmp	r7, #0
 80009d8:	d147      	bne.n	8000a6a <__udivmoddi4+0x156>
 80009da:	428b      	cmp	r3, r1
 80009dc:	d302      	bcc.n	80009e4 <__udivmoddi4+0xd0>
 80009de:	4282      	cmp	r2, r0
 80009e0:	f200 80fa 	bhi.w	8000bd8 <__udivmoddi4+0x2c4>
 80009e4:	1a84      	subs	r4, r0, r2
 80009e6:	eb61 0303 	sbc.w	r3, r1, r3
 80009ea:	2001      	movs	r0, #1
 80009ec:	4698      	mov	r8, r3
 80009ee:	2e00      	cmp	r6, #0
 80009f0:	d0e0      	beq.n	80009b4 <__udivmoddi4+0xa0>
 80009f2:	e9c6 4800 	strd	r4, r8, [r6]
 80009f6:	e7dd      	b.n	80009b4 <__udivmoddi4+0xa0>
 80009f8:	b902      	cbnz	r2, 80009fc <__udivmoddi4+0xe8>
 80009fa:	deff      	udf	#255	; 0xff
 80009fc:	fab2 f282 	clz	r2, r2
 8000a00:	2a00      	cmp	r2, #0
 8000a02:	f040 808f 	bne.w	8000b24 <__udivmoddi4+0x210>
 8000a06:	1b49      	subs	r1, r1, r5
 8000a08:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a0c:	fa1f f885 	uxth.w	r8, r5
 8000a10:	2701      	movs	r7, #1
 8000a12:	fbb1 fcfe 	udiv	ip, r1, lr
 8000a16:	0c23      	lsrs	r3, r4, #16
 8000a18:	fb0e 111c 	mls	r1, lr, ip, r1
 8000a1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a20:	fb08 f10c 	mul.w	r1, r8, ip
 8000a24:	4299      	cmp	r1, r3
 8000a26:	d907      	bls.n	8000a38 <__udivmoddi4+0x124>
 8000a28:	18eb      	adds	r3, r5, r3
 8000a2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000a2e:	d202      	bcs.n	8000a36 <__udivmoddi4+0x122>
 8000a30:	4299      	cmp	r1, r3
 8000a32:	f200 80cd 	bhi.w	8000bd0 <__udivmoddi4+0x2bc>
 8000a36:	4684      	mov	ip, r0
 8000a38:	1a59      	subs	r1, r3, r1
 8000a3a:	b2a3      	uxth	r3, r4
 8000a3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a40:	fb0e 1410 	mls	r4, lr, r0, r1
 8000a44:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000a48:	fb08 f800 	mul.w	r8, r8, r0
 8000a4c:	45a0      	cmp	r8, r4
 8000a4e:	d907      	bls.n	8000a60 <__udivmoddi4+0x14c>
 8000a50:	192c      	adds	r4, r5, r4
 8000a52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a56:	d202      	bcs.n	8000a5e <__udivmoddi4+0x14a>
 8000a58:	45a0      	cmp	r8, r4
 8000a5a:	f200 80b6 	bhi.w	8000bca <__udivmoddi4+0x2b6>
 8000a5e:	4618      	mov	r0, r3
 8000a60:	eba4 0408 	sub.w	r4, r4, r8
 8000a64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a68:	e79f      	b.n	80009aa <__udivmoddi4+0x96>
 8000a6a:	f1c7 0c20 	rsb	ip, r7, #32
 8000a6e:	40bb      	lsls	r3, r7
 8000a70:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000a74:	ea4e 0e03 	orr.w	lr, lr, r3
 8000a78:	fa01 f407 	lsl.w	r4, r1, r7
 8000a7c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000a80:	fa21 f30c 	lsr.w	r3, r1, ip
 8000a84:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000a88:	4325      	orrs	r5, r4
 8000a8a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000a8e:	0c2c      	lsrs	r4, r5, #16
 8000a90:	fb08 3319 	mls	r3, r8, r9, r3
 8000a94:	fa1f fa8e 	uxth.w	sl, lr
 8000a98:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000a9c:	fb09 f40a 	mul.w	r4, r9, sl
 8000aa0:	429c      	cmp	r4, r3
 8000aa2:	fa02 f207 	lsl.w	r2, r2, r7
 8000aa6:	fa00 f107 	lsl.w	r1, r0, r7
 8000aaa:	d90b      	bls.n	8000ac4 <__udivmoddi4+0x1b0>
 8000aac:	eb1e 0303 	adds.w	r3, lr, r3
 8000ab0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ab4:	f080 8087 	bcs.w	8000bc6 <__udivmoddi4+0x2b2>
 8000ab8:	429c      	cmp	r4, r3
 8000aba:	f240 8084 	bls.w	8000bc6 <__udivmoddi4+0x2b2>
 8000abe:	f1a9 0902 	sub.w	r9, r9, #2
 8000ac2:	4473      	add	r3, lr
 8000ac4:	1b1b      	subs	r3, r3, r4
 8000ac6:	b2ad      	uxth	r5, r5
 8000ac8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000acc:	fb08 3310 	mls	r3, r8, r0, r3
 8000ad0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ad4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ad8:	45a2      	cmp	sl, r4
 8000ada:	d908      	bls.n	8000aee <__udivmoddi4+0x1da>
 8000adc:	eb1e 0404 	adds.w	r4, lr, r4
 8000ae0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ae4:	d26b      	bcs.n	8000bbe <__udivmoddi4+0x2aa>
 8000ae6:	45a2      	cmp	sl, r4
 8000ae8:	d969      	bls.n	8000bbe <__udivmoddi4+0x2aa>
 8000aea:	3802      	subs	r0, #2
 8000aec:	4474      	add	r4, lr
 8000aee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000af2:	fba0 8902 	umull	r8, r9, r0, r2
 8000af6:	eba4 040a 	sub.w	r4, r4, sl
 8000afa:	454c      	cmp	r4, r9
 8000afc:	46c2      	mov	sl, r8
 8000afe:	464b      	mov	r3, r9
 8000b00:	d354      	bcc.n	8000bac <__udivmoddi4+0x298>
 8000b02:	d051      	beq.n	8000ba8 <__udivmoddi4+0x294>
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d069      	beq.n	8000bdc <__udivmoddi4+0x2c8>
 8000b08:	ebb1 050a 	subs.w	r5, r1, sl
 8000b0c:	eb64 0403 	sbc.w	r4, r4, r3
 8000b10:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000b14:	40fd      	lsrs	r5, r7
 8000b16:	40fc      	lsrs	r4, r7
 8000b18:	ea4c 0505 	orr.w	r5, ip, r5
 8000b1c:	e9c6 5400 	strd	r5, r4, [r6]
 8000b20:	2700      	movs	r7, #0
 8000b22:	e747      	b.n	80009b4 <__udivmoddi4+0xa0>
 8000b24:	f1c2 0320 	rsb	r3, r2, #32
 8000b28:	fa20 f703 	lsr.w	r7, r0, r3
 8000b2c:	4095      	lsls	r5, r2
 8000b2e:	fa01 f002 	lsl.w	r0, r1, r2
 8000b32:	fa21 f303 	lsr.w	r3, r1, r3
 8000b36:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b3a:	4338      	orrs	r0, r7
 8000b3c:	0c01      	lsrs	r1, r0, #16
 8000b3e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000b42:	fa1f f885 	uxth.w	r8, r5
 8000b46:	fb0e 3317 	mls	r3, lr, r7, r3
 8000b4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b4e:	fb07 f308 	mul.w	r3, r7, r8
 8000b52:	428b      	cmp	r3, r1
 8000b54:	fa04 f402 	lsl.w	r4, r4, r2
 8000b58:	d907      	bls.n	8000b6a <__udivmoddi4+0x256>
 8000b5a:	1869      	adds	r1, r5, r1
 8000b5c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000b60:	d22f      	bcs.n	8000bc2 <__udivmoddi4+0x2ae>
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d92d      	bls.n	8000bc2 <__udivmoddi4+0x2ae>
 8000b66:	3f02      	subs	r7, #2
 8000b68:	4429      	add	r1, r5
 8000b6a:	1acb      	subs	r3, r1, r3
 8000b6c:	b281      	uxth	r1, r0
 8000b6e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b72:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b76:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b7a:	fb00 f308 	mul.w	r3, r0, r8
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d907      	bls.n	8000b92 <__udivmoddi4+0x27e>
 8000b82:	1869      	adds	r1, r5, r1
 8000b84:	f100 3cff 	add.w	ip, r0, #4294967295
 8000b88:	d217      	bcs.n	8000bba <__udivmoddi4+0x2a6>
 8000b8a:	428b      	cmp	r3, r1
 8000b8c:	d915      	bls.n	8000bba <__udivmoddi4+0x2a6>
 8000b8e:	3802      	subs	r0, #2
 8000b90:	4429      	add	r1, r5
 8000b92:	1ac9      	subs	r1, r1, r3
 8000b94:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000b98:	e73b      	b.n	8000a12 <__udivmoddi4+0xfe>
 8000b9a:	4637      	mov	r7, r6
 8000b9c:	4630      	mov	r0, r6
 8000b9e:	e709      	b.n	80009b4 <__udivmoddi4+0xa0>
 8000ba0:	4607      	mov	r7, r0
 8000ba2:	e6e7      	b.n	8000974 <__udivmoddi4+0x60>
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	e6fb      	b.n	80009a0 <__udivmoddi4+0x8c>
 8000ba8:	4541      	cmp	r1, r8
 8000baa:	d2ab      	bcs.n	8000b04 <__udivmoddi4+0x1f0>
 8000bac:	ebb8 0a02 	subs.w	sl, r8, r2
 8000bb0:	eb69 020e 	sbc.w	r2, r9, lr
 8000bb4:	3801      	subs	r0, #1
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	e7a4      	b.n	8000b04 <__udivmoddi4+0x1f0>
 8000bba:	4660      	mov	r0, ip
 8000bbc:	e7e9      	b.n	8000b92 <__udivmoddi4+0x27e>
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	e795      	b.n	8000aee <__udivmoddi4+0x1da>
 8000bc2:	4667      	mov	r7, ip
 8000bc4:	e7d1      	b.n	8000b6a <__udivmoddi4+0x256>
 8000bc6:	4681      	mov	r9, r0
 8000bc8:	e77c      	b.n	8000ac4 <__udivmoddi4+0x1b0>
 8000bca:	3802      	subs	r0, #2
 8000bcc:	442c      	add	r4, r5
 8000bce:	e747      	b.n	8000a60 <__udivmoddi4+0x14c>
 8000bd0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bd4:	442b      	add	r3, r5
 8000bd6:	e72f      	b.n	8000a38 <__udivmoddi4+0x124>
 8000bd8:	4638      	mov	r0, r7
 8000bda:	e708      	b.n	80009ee <__udivmoddi4+0xda>
 8000bdc:	4637      	mov	r7, r6
 8000bde:	e6e9      	b.n	80009b4 <__udivmoddi4+0xa0>

08000be0 <__aeabi_idiv0>:
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000be8:	f000 fc0f 	bl	800140a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bec:	f000 f81e 	bl	8000c2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf0:	f000 f9b2 	bl	8000f58 <MX_GPIO_Init>
  MX_CRC_Init();
 8000bf4:	f000 f8aa 	bl	8000d4c <MX_CRC_Init>
  MX_USART2_UART_Init();
 8000bf8:	f000 f916 	bl	8000e28 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000bfc:	f000 f960 	bl	8000ec0 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000c00:	f005 fac6 	bl	8006190 <MX_USB_DEVICE_Init>
  MX_X_CUBE_AI_Init();
 8000c04:	f008 fac8 	bl	8009198 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */

	usb_txbuf[0] = 3;
 8000c08:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <main+0x44>)
 8000c0a:	2203      	movs	r2, #3
 8000c0c:	701a      	strb	r2, [r3, #0]
	usb_txbuf[1] = 15;
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <main+0x44>)
 8000c10:	220f      	movs	r2, #15
 8000c12:	705a      	strb	r2, [r3, #1]
	usb_txbuf[2] = 20;
 8000c14:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <main+0x44>)
 8000c16:	2214      	movs	r2, #20
 8000c18:	709a      	strb	r2, [r3, #2]
	usb_txbuf[3] = 0;
 8000c1a:	4b03      	ldr	r3, [pc, #12]	; (8000c28 <main+0x44>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	70da      	strb	r2, [r3, #3]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 8000c20:	f008 fac2 	bl	80091a8 <MX_X_CUBE_AI_Process>
 8000c24:	e7fc      	b.n	8000c20 <main+0x3c>
 8000c26:	bf00      	nop
 8000c28:	2004ed9c 	.word	0x2004ed9c

08000c2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b0bc      	sub	sp, #240	; 0xf0
 8000c30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c32:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c36:	2244      	movs	r2, #68	; 0x44
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f00e fbd1 	bl	800f3e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c40:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	2294      	movs	r2, #148	; 0x94
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f00e fbc3 	bl	800f3e2 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f001 fb89 	bl	8002374 <HAL_PWREx_ControlVoltageScaling>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <SystemClock_Config+0x40>
  {
    Error_Handler();
 8000c68:	f000 f9ce 	bl	8001008 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000c6c:	2310      	movs	r3, #16
 8000c6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c72:	2301      	movs	r3, #1
 8000c74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c7e:	2360      	movs	r3, #96	; 0x60
 8000c80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c84:	2302      	movs	r3, #2
 8000c86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c90:	2301      	movs	r3, #1
 8000c92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000c96:	233c      	movs	r3, #60	; 0x3c
 8000c98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f001 fc12 	bl	80024dc <HAL_RCC_OscConfig>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000cbe:	f000 f9a3 	bl	8001008 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc2:	230f      	movs	r3, #15
 8000cc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ce0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000ce4:	2105      	movs	r1, #5
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f002 f81e 	bl	8002d28 <HAL_RCC_ClockConfig>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000cf2:	f000 f989 	bl	8001008 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000cf6:	f242 0307 	movw	r3, #8199	; 0x2007
 8000cfa:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d00:	2300      	movs	r3, #0
 8000d02:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000d08:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000d0c:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000d12:	2301      	movs	r3, #1
 8000d14:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000d16:	2318      	movs	r3, #24
 8000d18:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000d22:	2302      	movs	r3, #2
 8000d24:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000d26:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d2a:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d2c:	1d3b      	adds	r3, r7, #4
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f002 faaa 	bl	8003288 <HAL_RCCEx_PeriphCLKConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <SystemClock_Config+0x112>
  {
    Error_Handler();
 8000d3a:	f000 f965 	bl	8001008 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000d3e:	f002 fdcb 	bl	80038d8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000d42:	bf00      	nop
 8000d44:	37f0      	adds	r7, #240	; 0xf0
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
	...

08000d4c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000d50:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <MX_CRC_Init+0x3c>)
 8000d52:	4a0e      	ldr	r2, [pc, #56]	; (8000d8c <MX_CRC_Init+0x40>)
 8000d54:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <MX_CRC_Init+0x3c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000d5c:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <MX_CRC_Init+0x3c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <MX_CRC_Init+0x3c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000d68:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <MX_CRC_Init+0x3c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <MX_CRC_Init+0x3c>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d74:	4804      	ldr	r0, [pc, #16]	; (8000d88 <MX_CRC_Init+0x3c>)
 8000d76:	f000 fceb 	bl	8001750 <HAL_CRC_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000d80:	f000 f942 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	2004ed78 	.word	0x2004ed78
 8000d8c:	40023000 	.word	0x40023000

08000d90 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d94:	4b22      	ldr	r3, [pc, #136]	; (8000e20 <MX_USART1_UART_Init+0x90>)
 8000d96:	4a23      	ldr	r2, [pc, #140]	; (8000e24 <MX_USART1_UART_Init+0x94>)
 8000d98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d9a:	4b21      	ldr	r3, [pc, #132]	; (8000e20 <MX_USART1_UART_Init+0x90>)
 8000d9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000da0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000da2:	4b1f      	ldr	r3, [pc, #124]	; (8000e20 <MX_USART1_UART_Init+0x90>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000da8:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <MX_USART1_UART_Init+0x90>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dae:	4b1c      	ldr	r3, [pc, #112]	; (8000e20 <MX_USART1_UART_Init+0x90>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000db4:	4b1a      	ldr	r3, [pc, #104]	; (8000e20 <MX_USART1_UART_Init+0x90>)
 8000db6:	220c      	movs	r2, #12
 8000db8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dba:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <MX_USART1_UART_Init+0x90>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc0:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <MX_USART1_UART_Init+0x90>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dc6:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <MX_USART1_UART_Init+0x90>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dcc:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <MX_USART1_UART_Init+0x90>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dd2:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <MX_USART1_UART_Init+0x90>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dd8:	4811      	ldr	r0, [pc, #68]	; (8000e20 <MX_USART1_UART_Init+0x90>)
 8000dda:	f002 ff6d 	bl	8003cb8 <HAL_UART_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000de4:	f000 f910 	bl	8001008 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000de8:	2100      	movs	r1, #0
 8000dea:	480d      	ldr	r0, [pc, #52]	; (8000e20 <MX_USART1_UART_Init+0x90>)
 8000dec:	f003 fd91 	bl	8004912 <HAL_UARTEx_SetTxFifoThreshold>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000df6:	f000 f907 	bl	8001008 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4808      	ldr	r0, [pc, #32]	; (8000e20 <MX_USART1_UART_Init+0x90>)
 8000dfe:	f003 fdc6 	bl	800498e <HAL_UARTEx_SetRxFifoThreshold>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e08:	f000 f8fe 	bl	8001008 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e0c:	4804      	ldr	r0, [pc, #16]	; (8000e20 <MX_USART1_UART_Init+0x90>)
 8000e0e:	f003 fd47 	bl	80048a0 <HAL_UARTEx_DisableFifoMode>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e18:	f000 f8f6 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	2004eda0 	.word	0x2004eda0
 8000e24:	40013800 	.word	0x40013800

08000e28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e2c:	4b22      	ldr	r3, [pc, #136]	; (8000eb8 <MX_USART2_UART_Init+0x90>)
 8000e2e:	4a23      	ldr	r2, [pc, #140]	; (8000ebc <MX_USART2_UART_Init+0x94>)
 8000e30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e32:	4b21      	ldr	r3, [pc, #132]	; (8000eb8 <MX_USART2_UART_Init+0x90>)
 8000e34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3a:	4b1f      	ldr	r3, [pc, #124]	; (8000eb8 <MX_USART2_UART_Init+0x90>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e40:	4b1d      	ldr	r3, [pc, #116]	; (8000eb8 <MX_USART2_UART_Init+0x90>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e46:	4b1c      	ldr	r3, [pc, #112]	; (8000eb8 <MX_USART2_UART_Init+0x90>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e4c:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <MX_USART2_UART_Init+0x90>)
 8000e4e:	220c      	movs	r2, #12
 8000e50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e52:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <MX_USART2_UART_Init+0x90>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e58:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <MX_USART2_UART_Init+0x90>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e5e:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <MX_USART2_UART_Init+0x90>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e64:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <MX_USART2_UART_Init+0x90>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e6a:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <MX_USART2_UART_Init+0x90>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e70:	4811      	ldr	r0, [pc, #68]	; (8000eb8 <MX_USART2_UART_Init+0x90>)
 8000e72:	f002 ff21 	bl	8003cb8 <HAL_UART_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000e7c:	f000 f8c4 	bl	8001008 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e80:	2100      	movs	r1, #0
 8000e82:	480d      	ldr	r0, [pc, #52]	; (8000eb8 <MX_USART2_UART_Init+0x90>)
 8000e84:	f003 fd45 	bl	8004912 <HAL_UARTEx_SetTxFifoThreshold>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000e8e:	f000 f8bb 	bl	8001008 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e92:	2100      	movs	r1, #0
 8000e94:	4808      	ldr	r0, [pc, #32]	; (8000eb8 <MX_USART2_UART_Init+0x90>)
 8000e96:	f003 fd7a 	bl	800498e <HAL_UARTEx_SetRxFifoThreshold>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000ea0:	f000 f8b2 	bl	8001008 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ea4:	4804      	ldr	r0, [pc, #16]	; (8000eb8 <MX_USART2_UART_Init+0x90>)
 8000ea6:	f003 fcfb 	bl	80048a0 <HAL_UARTEx_DisableFifoMode>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000eb0:	f000 f8aa 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	2004ee2c 	.word	0x2004ee2c
 8000ebc:	40004400 	.word	0x40004400

08000ec0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ec4:	4b22      	ldr	r3, [pc, #136]	; (8000f50 <MX_USART3_UART_Init+0x90>)
 8000ec6:	4a23      	ldr	r2, [pc, #140]	; (8000f54 <MX_USART3_UART_Init+0x94>)
 8000ec8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000eca:	4b21      	ldr	r3, [pc, #132]	; (8000f50 <MX_USART3_UART_Init+0x90>)
 8000ecc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ed0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed2:	4b1f      	ldr	r3, [pc, #124]	; (8000f50 <MX_USART3_UART_Init+0x90>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ed8:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <MX_USART3_UART_Init+0x90>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ede:	4b1c      	ldr	r3, [pc, #112]	; (8000f50 <MX_USART3_UART_Init+0x90>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <MX_USART3_UART_Init+0x90>)
 8000ee6:	220c      	movs	r2, #12
 8000ee8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eea:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <MX_USART3_UART_Init+0x90>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef0:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <MX_USART3_UART_Init+0x90>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ef6:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <MX_USART3_UART_Init+0x90>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000efc:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <MX_USART3_UART_Init+0x90>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f02:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <MX_USART3_UART_Init+0x90>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f08:	4811      	ldr	r0, [pc, #68]	; (8000f50 <MX_USART3_UART_Init+0x90>)
 8000f0a:	f002 fed5 	bl	8003cb8 <HAL_UART_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f14:	f000 f878 	bl	8001008 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f18:	2100      	movs	r1, #0
 8000f1a:	480d      	ldr	r0, [pc, #52]	; (8000f50 <MX_USART3_UART_Init+0x90>)
 8000f1c:	f003 fcf9 	bl	8004912 <HAL_UARTEx_SetTxFifoThreshold>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f26:	f000 f86f 	bl	8001008 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4808      	ldr	r0, [pc, #32]	; (8000f50 <MX_USART3_UART_Init+0x90>)
 8000f2e:	f003 fd2e 	bl	800498e <HAL_UARTEx_SetRxFifoThreshold>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f38:	f000 f866 	bl	8001008 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f3c:	4804      	ldr	r0, [pc, #16]	; (8000f50 <MX_USART3_UART_Init+0x90>)
 8000f3e:	f003 fcaf 	bl	80048a0 <HAL_UARTEx_DisableFifoMode>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f48:	f000 f85e 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	2004ecec 	.word	0x2004ecec
 8000f54:	40004800 	.word	0x40004800

08000f58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	; 0x28
 8000f5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
 8000f6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6e:	4b24      	ldr	r3, [pc, #144]	; (8001000 <MX_GPIO_Init+0xa8>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	4a23      	ldr	r2, [pc, #140]	; (8001000 <MX_GPIO_Init+0xa8>)
 8000f74:	f043 0304 	orr.w	r3, r3, #4
 8000f78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f7a:	4b21      	ldr	r3, [pc, #132]	; (8001000 <MX_GPIO_Init+0xa8>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	f003 0304 	and.w	r3, r3, #4
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f86:	4b1e      	ldr	r3, [pc, #120]	; (8001000 <MX_GPIO_Init+0xa8>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8a:	4a1d      	ldr	r2, [pc, #116]	; (8001000 <MX_GPIO_Init+0xa8>)
 8000f8c:	f043 0302 	orr.w	r3, r3, #2
 8000f90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f92:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <MX_GPIO_Init+0xa8>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	4b18      	ldr	r3, [pc, #96]	; (8001000 <MX_GPIO_Init+0xa8>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	4a17      	ldr	r2, [pc, #92]	; (8001000 <MX_GPIO_Init+0xa8>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <MX_GPIO_Init+0xa8>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fb6:	4b12      	ldr	r3, [pc, #72]	; (8001000 <MX_GPIO_Init+0xa8>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	4a11      	ldr	r2, [pc, #68]	; (8001000 <MX_GPIO_Init+0xa8>)
 8000fbc:	f043 0308 	orr.w	r3, r3, #8
 8000fc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc2:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <MX_GPIO_Init+0xa8>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc6:	f003 0308 	and.w	r3, r3, #8
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fd4:	480b      	ldr	r0, [pc, #44]	; (8001004 <MX_GPIO_Init+0xac>)
 8000fd6:	f000 fe37 	bl	8001c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000fda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4804      	ldr	r0, [pc, #16]	; (8001004 <MX_GPIO_Init+0xac>)
 8000ff4:	f000 fc96 	bl	8001924 <HAL_GPIO_Init>

}
 8000ff8:	bf00      	nop
 8000ffa:	3728      	adds	r7, #40	; 0x28
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40021000 	.word	0x40021000
 8001004:	48000400 	.word	0x48000400

08001008 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800100c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800100e:	e7fe      	b.n	800100e <Error_Handler+0x6>

08001010 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001016:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <HAL_MspInit+0x44>)
 8001018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800101a:	4a0e      	ldr	r2, [pc, #56]	; (8001054 <HAL_MspInit+0x44>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6613      	str	r3, [r2, #96]	; 0x60
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <HAL_MspInit+0x44>)
 8001024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <HAL_MspInit+0x44>)
 8001030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001032:	4a08      	ldr	r2, [pc, #32]	; (8001054 <HAL_MspInit+0x44>)
 8001034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001038:	6593      	str	r3, [r2, #88]	; 0x58
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_MspInit+0x44>)
 800103c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001042:	603b      	str	r3, [r7, #0]
 8001044:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40021000 	.word	0x40021000

08001058 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <HAL_CRC_MspInit+0x38>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d10b      	bne.n	8001082 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <HAL_CRC_MspInit+0x3c>)
 800106c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800106e:	4a09      	ldr	r2, [pc, #36]	; (8001094 <HAL_CRC_MspInit+0x3c>)
 8001070:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001074:	6493      	str	r3, [r2, #72]	; 0x48
 8001076:	4b07      	ldr	r3, [pc, #28]	; (8001094 <HAL_CRC_MspInit+0x3c>)
 8001078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800107a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001082:	bf00      	nop
 8001084:	3714      	adds	r7, #20
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	40023000 	.word	0x40023000
 8001094:	40021000 	.word	0x40021000

08001098 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08e      	sub	sp, #56	; 0x38
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a45      	ldr	r2, [pc, #276]	; (80011cc <HAL_UART_MspInit+0x134>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d128      	bne.n	800110c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010ba:	4b45      	ldr	r3, [pc, #276]	; (80011d0 <HAL_UART_MspInit+0x138>)
 80010bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010be:	4a44      	ldr	r2, [pc, #272]	; (80011d0 <HAL_UART_MspInit+0x138>)
 80010c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c4:	6613      	str	r3, [r2, #96]	; 0x60
 80010c6:	4b42      	ldr	r3, [pc, #264]	; (80011d0 <HAL_UART_MspInit+0x138>)
 80010c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ce:	623b      	str	r3, [r7, #32]
 80010d0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d2:	4b3f      	ldr	r3, [pc, #252]	; (80011d0 <HAL_UART_MspInit+0x138>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d6:	4a3e      	ldr	r2, [pc, #248]	; (80011d0 <HAL_UART_MspInit+0x138>)
 80010d8:	f043 0302 	orr.w	r3, r3, #2
 80010dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010de:	4b3c      	ldr	r3, [pc, #240]	; (80011d0 <HAL_UART_MspInit+0x138>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	61fb      	str	r3, [r7, #28]
 80010e8:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010ea:	23c0      	movs	r3, #192	; 0xc0
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f6:	2303      	movs	r3, #3
 80010f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010fa:	2307      	movs	r3, #7
 80010fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001102:	4619      	mov	r1, r3
 8001104:	4833      	ldr	r0, [pc, #204]	; (80011d4 <HAL_UART_MspInit+0x13c>)
 8001106:	f000 fc0d 	bl	8001924 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800110a:	e05a      	b.n	80011c2 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART2)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a31      	ldr	r2, [pc, #196]	; (80011d8 <HAL_UART_MspInit+0x140>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d128      	bne.n	8001168 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001116:	4b2e      	ldr	r3, [pc, #184]	; (80011d0 <HAL_UART_MspInit+0x138>)
 8001118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111a:	4a2d      	ldr	r2, [pc, #180]	; (80011d0 <HAL_UART_MspInit+0x138>)
 800111c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001120:	6593      	str	r3, [r2, #88]	; 0x58
 8001122:	4b2b      	ldr	r3, [pc, #172]	; (80011d0 <HAL_UART_MspInit+0x138>)
 8001124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112a:	61bb      	str	r3, [r7, #24]
 800112c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800112e:	4b28      	ldr	r3, [pc, #160]	; (80011d0 <HAL_UART_MspInit+0x138>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001132:	4a27      	ldr	r2, [pc, #156]	; (80011d0 <HAL_UART_MspInit+0x138>)
 8001134:	f043 0308 	orr.w	r3, r3, #8
 8001138:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113a:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <HAL_UART_MspInit+0x138>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113e:	f003 0308 	and.w	r3, r3, #8
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001146:	2360      	movs	r3, #96	; 0x60
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	2302      	movs	r3, #2
 800114c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001152:	2303      	movs	r3, #3
 8001154:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001156:	2307      	movs	r3, #7
 8001158:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800115a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115e:	4619      	mov	r1, r3
 8001160:	481e      	ldr	r0, [pc, #120]	; (80011dc <HAL_UART_MspInit+0x144>)
 8001162:	f000 fbdf 	bl	8001924 <HAL_GPIO_Init>
}
 8001166:	e02c      	b.n	80011c2 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a1c      	ldr	r2, [pc, #112]	; (80011e0 <HAL_UART_MspInit+0x148>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d127      	bne.n	80011c2 <HAL_UART_MspInit+0x12a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001172:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <HAL_UART_MspInit+0x138>)
 8001174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001176:	4a16      	ldr	r2, [pc, #88]	; (80011d0 <HAL_UART_MspInit+0x138>)
 8001178:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800117c:	6593      	str	r3, [r2, #88]	; 0x58
 800117e:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <HAL_UART_MspInit+0x138>)
 8001180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001182:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800118a:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <HAL_UART_MspInit+0x138>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118e:	4a10      	ldr	r2, [pc, #64]	; (80011d0 <HAL_UART_MspInit+0x138>)
 8001190:	f043 0304 	orr.w	r3, r3, #4
 8001194:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001196:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <HAL_UART_MspInit+0x138>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119a:	f003 0304 	and.w	r3, r3, #4
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80011a2:	2330      	movs	r3, #48	; 0x30
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a6:	2302      	movs	r3, #2
 80011a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ae:	2303      	movs	r3, #3
 80011b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011b2:	2307      	movs	r3, #7
 80011b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ba:	4619      	mov	r1, r3
 80011bc:	4809      	ldr	r0, [pc, #36]	; (80011e4 <HAL_UART_MspInit+0x14c>)
 80011be:	f000 fbb1 	bl	8001924 <HAL_GPIO_Init>
}
 80011c2:	bf00      	nop
 80011c4:	3738      	adds	r7, #56	; 0x38
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40013800 	.word	0x40013800
 80011d0:	40021000 	.word	0x40021000
 80011d4:	48000400 	.word	0x48000400
 80011d8:	40004400 	.word	0x40004400
 80011dc:	48000c00 	.word	0x48000c00
 80011e0:	40004800 	.word	0x40004800
 80011e4:	48000800 	.word	0x48000800

080011e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011ec:	e7fe      	b.n	80011ec <NMI_Handler+0x4>

080011ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f2:	e7fe      	b.n	80011f2 <HardFault_Handler+0x4>

080011f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <MemManage_Handler+0x4>

080011fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011fe:	e7fe      	b.n	80011fe <BusFault_Handler+0x4>

08001200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <UsageFault_Handler+0x4>

08001206 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001234:	f000 f93e 	bl	80014b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}

0800123c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	e00a      	b.n	8001264 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800124e:	f3af 8000 	nop.w
 8001252:	4601      	mov	r1, r0
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	1c5a      	adds	r2, r3, #1
 8001258:	60ba      	str	r2, [r7, #8]
 800125a:	b2ca      	uxtb	r2, r1
 800125c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	3301      	adds	r3, #1
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	697a      	ldr	r2, [r7, #20]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	429a      	cmp	r2, r3
 800126a:	dbf0      	blt.n	800124e <_read+0x12>
	}

return len;
 800126c:	687b      	ldr	r3, [r7, #4]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001276:	b480      	push	{r7}
 8001278:	b083      	sub	sp, #12
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
	return -1;
 800127e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001282:	4618      	mov	r0, r3
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800128e:	b480      	push	{r7}
 8001290:	b083      	sub	sp, #12
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
 8001296:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800129e:	605a      	str	r2, [r3, #4]
	return 0;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <_isatty>:

int _isatty(int file)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b083      	sub	sp, #12
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
	return 1;
 80012b6:	2301      	movs	r3, #1
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
	return 0;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012e8:	4a14      	ldr	r2, [pc, #80]	; (800133c <_sbrk+0x5c>)
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <_sbrk+0x60>)
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012f4:	4b13      	ldr	r3, [pc, #76]	; (8001344 <_sbrk+0x64>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d102      	bne.n	8001302 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012fc:	4b11      	ldr	r3, [pc, #68]	; (8001344 <_sbrk+0x64>)
 80012fe:	4a12      	ldr	r2, [pc, #72]	; (8001348 <_sbrk+0x68>)
 8001300:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001302:	4b10      	ldr	r3, [pc, #64]	; (8001344 <_sbrk+0x64>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4413      	add	r3, r2
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	429a      	cmp	r2, r3
 800130e:	d207      	bcs.n	8001320 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001310:	f00e f822 	bl	800f358 <__errno>
 8001314:	4602      	mov	r2, r0
 8001316:	230c      	movs	r3, #12
 8001318:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800131a:	f04f 33ff 	mov.w	r3, #4294967295
 800131e:	e009      	b.n	8001334 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <_sbrk+0x64>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001326:	4b07      	ldr	r3, [pc, #28]	; (8001344 <_sbrk+0x64>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4413      	add	r3, r2
 800132e:	4a05      	ldr	r2, [pc, #20]	; (8001344 <_sbrk+0x64>)
 8001330:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001332:	68fb      	ldr	r3, [r7, #12]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	200a0000 	.word	0x200a0000
 8001340:	00000800 	.word	0x00000800
 8001344:	200008fc 	.word	0x200008fc
 8001348:	2006a7e8 	.word	0x2006a7e8

0800134c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001350:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <SystemInit+0x64>)
 8001352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001356:	4a16      	ldr	r2, [pc, #88]	; (80013b0 <SystemInit+0x64>)
 8001358:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800135c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001360:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <SystemInit+0x68>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a13      	ldr	r2, [pc, #76]	; (80013b4 <SystemInit+0x68>)
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800136c:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <SystemInit+0x68>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001372:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <SystemInit+0x68>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a0f      	ldr	r2, [pc, #60]	; (80013b4 <SystemInit+0x68>)
 8001378:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800137c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001380:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001382:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <SystemInit+0x68>)
 8001384:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001388:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800138a:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <SystemInit+0x68>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a09      	ldr	r2, [pc, #36]	; (80013b4 <SystemInit+0x68>)
 8001390:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001394:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001396:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <SystemInit+0x68>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800139c:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <SystemInit+0x64>)
 800139e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013a2:	609a      	str	r2, [r3, #8]
#endif
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000ed00 	.word	0xe000ed00
 80013b4:	40021000 	.word	0x40021000

080013b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013bc:	f7ff ffc6 	bl	800134c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80013c0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80013c2:	e003      	b.n	80013cc <LoopCopyDataInit>

080013c4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80013c4:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80013c6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80013c8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80013ca:	3104      	adds	r1, #4

080013cc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80013cc:	480a      	ldr	r0, [pc, #40]	; (80013f8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80013ce:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <LoopForever+0xe>)
	adds	r2, r0, r1
 80013d0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80013d2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80013d4:	d3f6      	bcc.n	80013c4 <CopyDataInit>
	ldr	r2, =_sbss
 80013d6:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <LoopForever+0x12>)
	b	LoopFillZerobss
 80013d8:	e002      	b.n	80013e0 <LoopFillZerobss>

080013da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80013da:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80013dc:	f842 3b04 	str.w	r3, [r2], #4

080013e0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80013e0:	4b08      	ldr	r3, [pc, #32]	; (8001404 <LoopForever+0x16>)
	cmp	r2, r3
 80013e2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80013e4:	d3f9      	bcc.n	80013da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013e6:	f00d ffbd 	bl	800f364 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013ea:	f7ff fbfb 	bl	8000be4 <main>

080013ee <LoopForever>:

LoopForever:
    b LoopForever
 80013ee:	e7fe      	b.n	80013ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013f0:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80013f4:	0801b9e4 	.word	0x0801b9e4
	ldr	r0, =_sdata
 80013f8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80013fc:	200008dc 	.word	0x200008dc
	ldr	r2, =_sbss
 8001400:	200008e0 	.word	0x200008e0
	ldr	r3, = _ebss
 8001404:	2006a7e4 	.word	0x2006a7e4

08001408 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001408:	e7fe      	b.n	8001408 <ADC1_IRQHandler>

0800140a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001410:	2300      	movs	r3, #0
 8001412:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001414:	2003      	movs	r0, #3
 8001416:	f000 f967 	bl	80016e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800141a:	2000      	movs	r0, #0
 800141c:	f000 f80e 	bl	800143c <HAL_InitTick>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d002      	beq.n	800142c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	71fb      	strb	r3, [r7, #7]
 800142a:	e001      	b.n	8001430 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800142c:	f7ff fdf0 	bl	8001010 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001430:	79fb      	ldrb	r3, [r7, #7]
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001444:	2300      	movs	r3, #0
 8001446:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001448:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <HAL_InitTick+0x6c>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d023      	beq.n	8001498 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001450:	4b16      	ldr	r3, [pc, #88]	; (80014ac <HAL_InitTick+0x70>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <HAL_InitTick+0x6c>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	4619      	mov	r1, r3
 800145a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800145e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001462:	fbb2 f3f3 	udiv	r3, r2, r3
 8001466:	4618      	mov	r0, r3
 8001468:	f000 f965 	bl	8001736 <HAL_SYSTICK_Config>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d10f      	bne.n	8001492 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2b0f      	cmp	r3, #15
 8001476:	d809      	bhi.n	800148c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001478:	2200      	movs	r2, #0
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	f04f 30ff 	mov.w	r0, #4294967295
 8001480:	f000 f93d 	bl	80016fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001484:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <HAL_InitTick+0x74>)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	e007      	b.n	800149c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	73fb      	strb	r3, [r7, #15]
 8001490:	e004      	b.n	800149c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	73fb      	strb	r3, [r7, #15]
 8001496:	e001      	b.n	800149c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800149c:	7bfb      	ldrb	r3, [r7, #15]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000008 	.word	0x20000008
 80014ac:	20000000 	.word	0x20000000
 80014b0:	20000004 	.word	0x20000004

080014b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_IncTick+0x20>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	461a      	mov	r2, r3
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_IncTick+0x24>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4413      	add	r3, r2
 80014c4:	4a04      	ldr	r2, [pc, #16]	; (80014d8 <HAL_IncTick+0x24>)
 80014c6:	6013      	str	r3, [r2, #0]
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	20000008 	.word	0x20000008
 80014d8:	2004eeb8 	.word	0x2004eeb8

080014dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return uwTick;
 80014e0:	4b03      	ldr	r3, [pc, #12]	; (80014f0 <HAL_GetTick+0x14>)
 80014e2:	681b      	ldr	r3, [r3, #0]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	2004eeb8 	.word	0x2004eeb8

080014f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014fc:	f7ff ffee 	bl	80014dc <HAL_GetTick>
 8001500:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800150c:	d005      	beq.n	800151a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <HAL_Delay+0x40>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	461a      	mov	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	4413      	add	r3, r2
 8001518:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800151a:	bf00      	nop
 800151c:	f7ff ffde 	bl	80014dc <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	429a      	cmp	r2, r3
 800152a:	d8f7      	bhi.n	800151c <HAL_Delay+0x28>
  {
  }
}
 800152c:	bf00      	nop
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000008 	.word	0x20000008

08001538 <HAL_GetHalVersion>:
/**
  * @brief  Return the HAL revision.
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return STM32L4XX_HAL_VERSION;
 800153c:	f04f 7386 	mov.w	r3, #17563648	; 0x10c0000
}
 8001540:	4618      	mov	r0, r3
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
	...

0800154c <HAL_GetREVID>:
/**
  * @brief  Return the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 8001550:	4b04      	ldr	r3, [pc, #16]	; (8001564 <HAL_GetREVID+0x18>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	0c1b      	lsrs	r3, r3, #16
 8001556:	b29b      	uxth	r3, r3
}
 8001558:	4618      	mov	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	e0042000 	.word	0xe0042000

08001568 <HAL_GetDEVID>:
/**
  * @brief  Return the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  return(DBGMCU->IDCODE & DBGMCU_IDCODE_DEV_ID);
 800156c:	4b04      	ldr	r3, [pc, #16]	; (8001580 <HAL_GetDEVID+0x18>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8001574:	4618      	mov	r0, r3
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e0042000 	.word	0xe0042000

08001584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015a0:	4013      	ands	r3, r2
 80015a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015b6:	4a04      	ldr	r2, [pc, #16]	; (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	60d3      	str	r3, [r2, #12]
}
 80015bc:	bf00      	nop
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d0:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <__NVIC_GetPriorityGrouping+0x18>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	0a1b      	lsrs	r3, r3, #8
 80015d6:	f003 0307 	and.w	r3, r3, #7
}
 80015da:	4618      	mov	r0, r3
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	6039      	str	r1, [r7, #0]
 80015f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	db0a      	blt.n	8001612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	490c      	ldr	r1, [pc, #48]	; (8001634 <__NVIC_SetPriority+0x4c>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	0112      	lsls	r2, r2, #4
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	440b      	add	r3, r1
 800160c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001610:	e00a      	b.n	8001628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4908      	ldr	r1, [pc, #32]	; (8001638 <__NVIC_SetPriority+0x50>)
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	3b04      	subs	r3, #4
 8001620:	0112      	lsls	r2, r2, #4
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	440b      	add	r3, r1
 8001626:	761a      	strb	r2, [r3, #24]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	e000e100 	.word	0xe000e100
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800163c:	b480      	push	{r7}
 800163e:	b089      	sub	sp, #36	; 0x24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f1c3 0307 	rsb	r3, r3, #7
 8001656:	2b04      	cmp	r3, #4
 8001658:	bf28      	it	cs
 800165a:	2304      	movcs	r3, #4
 800165c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3304      	adds	r3, #4
 8001662:	2b06      	cmp	r3, #6
 8001664:	d902      	bls.n	800166c <NVIC_EncodePriority+0x30>
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3b03      	subs	r3, #3
 800166a:	e000      	b.n	800166e <NVIC_EncodePriority+0x32>
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001670:	f04f 32ff 	mov.w	r2, #4294967295
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43da      	mvns	r2, r3
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	401a      	ands	r2, r3
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001684:	f04f 31ff 	mov.w	r1, #4294967295
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	fa01 f303 	lsl.w	r3, r1, r3
 800168e:	43d9      	mvns	r1, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	4313      	orrs	r3, r2
         );
}
 8001696:	4618      	mov	r0, r3
 8001698:	3724      	adds	r7, #36	; 0x24
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
	...

080016a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016b4:	d301      	bcc.n	80016ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016b6:	2301      	movs	r3, #1
 80016b8:	e00f      	b.n	80016da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ba:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <SysTick_Config+0x40>)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3b01      	subs	r3, #1
 80016c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016c2:	210f      	movs	r1, #15
 80016c4:	f04f 30ff 	mov.w	r0, #4294967295
 80016c8:	f7ff ff8e 	bl	80015e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016cc:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <SysTick_Config+0x40>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016d2:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <SysTick_Config+0x40>)
 80016d4:	2207      	movs	r2, #7
 80016d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	e000e010 	.word	0xe000e010

080016e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff ff47 	bl	8001584 <__NVIC_SetPriorityGrouping>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b086      	sub	sp, #24
 8001702:	af00      	add	r7, sp, #0
 8001704:	4603      	mov	r3, r0
 8001706:	60b9      	str	r1, [r7, #8]
 8001708:	607a      	str	r2, [r7, #4]
 800170a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001710:	f7ff ff5c 	bl	80015cc <__NVIC_GetPriorityGrouping>
 8001714:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	68b9      	ldr	r1, [r7, #8]
 800171a:	6978      	ldr	r0, [r7, #20]
 800171c:	f7ff ff8e 	bl	800163c <NVIC_EncodePriority>
 8001720:	4602      	mov	r2, r0
 8001722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001726:	4611      	mov	r1, r2
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ff5d 	bl	80015e8 <__NVIC_SetPriority>
}
 800172e:	bf00      	nop
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff ffb0 	bl	80016a4 <SysTick_Config>
 8001744:	4603      	mov	r3, r0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e054      	b.n	800180c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	7f5b      	ldrb	r3, [r3, #29]
 8001766:	b2db      	uxtb	r3, r3
 8001768:	2b00      	cmp	r3, #0
 800176a:	d105      	bne.n	8001778 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff fc70 	bl	8001058 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2202      	movs	r2, #2
 800177c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	791b      	ldrb	r3, [r3, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10c      	bne.n	80017a0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a22      	ldr	r2, [pc, #136]	; (8001814 <HAL_CRC_Init+0xc4>)
 800178c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f022 0218 	bic.w	r2, r2, #24
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	e00c      	b.n	80017ba <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6899      	ldr	r1, [r3, #8]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	461a      	mov	r2, r3
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 f834 	bl	8001818 <HAL_CRCEx_Polynomial_Set>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e028      	b.n	800180c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	795b      	ldrb	r3, [r3, #5]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d105      	bne.n	80017ce <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f04f 32ff 	mov.w	r2, #4294967295
 80017ca:	611a      	str	r2, [r3, #16]
 80017cc:	e004      	b.n	80017d8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	6912      	ldr	r2, [r2, #16]
 80017d6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	695a      	ldr	r2, [r3, #20]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	430a      	orrs	r2, r1
 80017ec:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	699a      	ldr	r2, [r3, #24]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	430a      	orrs	r2, r1
 8001802:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	04c11db7 	.word	0x04c11db7

08001818 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001818:	b480      	push	{r7}
 800181a:	b087      	sub	sp, #28
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001824:	2300      	movs	r3, #0
 8001826:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001828:	231f      	movs	r3, #31
 800182a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800182c:	bf00      	nop
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1e5a      	subs	r2, r3, #1
 8001832:	613a      	str	r2, [r7, #16]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d009      	beq.n	800184c <HAL_CRCEx_Polynomial_Set+0x34>
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	f003 031f 	and.w	r3, r3, #31
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	fa22 f303 	lsr.w	r3, r2, r3
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0f0      	beq.n	800182e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b18      	cmp	r3, #24
 8001850:	d846      	bhi.n	80018e0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001852:	a201      	add	r2, pc, #4	; (adr r2, 8001858 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001858:	080018e7 	.word	0x080018e7
 800185c:	080018e1 	.word	0x080018e1
 8001860:	080018e1 	.word	0x080018e1
 8001864:	080018e1 	.word	0x080018e1
 8001868:	080018e1 	.word	0x080018e1
 800186c:	080018e1 	.word	0x080018e1
 8001870:	080018e1 	.word	0x080018e1
 8001874:	080018e1 	.word	0x080018e1
 8001878:	080018d5 	.word	0x080018d5
 800187c:	080018e1 	.word	0x080018e1
 8001880:	080018e1 	.word	0x080018e1
 8001884:	080018e1 	.word	0x080018e1
 8001888:	080018e1 	.word	0x080018e1
 800188c:	080018e1 	.word	0x080018e1
 8001890:	080018e1 	.word	0x080018e1
 8001894:	080018e1 	.word	0x080018e1
 8001898:	080018c9 	.word	0x080018c9
 800189c:	080018e1 	.word	0x080018e1
 80018a0:	080018e1 	.word	0x080018e1
 80018a4:	080018e1 	.word	0x080018e1
 80018a8:	080018e1 	.word	0x080018e1
 80018ac:	080018e1 	.word	0x080018e1
 80018b0:	080018e1 	.word	0x080018e1
 80018b4:	080018e1 	.word	0x080018e1
 80018b8:	080018bd 	.word	0x080018bd
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	2b06      	cmp	r3, #6
 80018c0:	d913      	bls.n	80018ea <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80018c6:	e010      	b.n	80018ea <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	2b07      	cmp	r3, #7
 80018cc:	d90f      	bls.n	80018ee <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80018d2:	e00c      	b.n	80018ee <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	2b0f      	cmp	r3, #15
 80018d8:	d90b      	bls.n	80018f2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80018de:	e008      	b.n	80018f2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	75fb      	strb	r3, [r7, #23]
      break;
 80018e4:	e006      	b.n	80018f4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80018e6:	bf00      	nop
 80018e8:	e004      	b.n	80018f4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80018ea:	bf00      	nop
 80018ec:	e002      	b.n	80018f4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80018ee:	bf00      	nop
 80018f0:	e000      	b.n	80018f4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80018f2:	bf00      	nop
  }
  if (status == HAL_OK)
 80018f4:	7dfb      	ldrb	r3, [r7, #23]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d10d      	bne.n	8001916 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f023 0118 	bic.w	r1, r3, #24
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	430a      	orrs	r2, r1
 8001914:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001916:	7dfb      	ldrb	r3, [r7, #23]
}
 8001918:	4618      	mov	r0, r3
 800191a:	371c      	adds	r7, #28
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001924:	b480      	push	{r7}
 8001926:	b087      	sub	sp, #28
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001932:	e166      	b.n	8001c02 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	2101      	movs	r1, #1
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	fa01 f303 	lsl.w	r3, r1, r3
 8001940:	4013      	ands	r3, r2
 8001942:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2b00      	cmp	r3, #0
 8001948:	f000 8158 	beq.w	8001bfc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d00b      	beq.n	800196c <HAL_GPIO_Init+0x48>
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b02      	cmp	r3, #2
 800195a:	d007      	beq.n	800196c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001960:	2b11      	cmp	r3, #17
 8001962:	d003      	beq.n	800196c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	2b12      	cmp	r3, #18
 800196a:	d130      	bne.n	80019ce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	2203      	movs	r2, #3
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	68da      	ldr	r2, [r3, #12]
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	4313      	orrs	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019a2:	2201      	movs	r2, #1
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	4013      	ands	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	091b      	lsrs	r3, r3, #4
 80019b8:	f003 0201 	and.w	r2, r3, #1
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	2203      	movs	r2, #3
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43db      	mvns	r3, r3
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4013      	ands	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_Init+0xea>
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b12      	cmp	r3, #18
 8001a0c:	d123      	bne.n	8001a56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	08da      	lsrs	r2, r3, #3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3208      	adds	r2, #8
 8001a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	220f      	movs	r2, #15
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	691a      	ldr	r2, [r3, #16]
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	08da      	lsrs	r2, r3, #3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3208      	adds	r2, #8
 8001a50:	6939      	ldr	r1, [r7, #16]
 8001a52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	2203      	movs	r2, #3
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43db      	mvns	r3, r3
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 0203 	and.w	r2, r3, #3
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f000 80b2 	beq.w	8001bfc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a98:	4b61      	ldr	r3, [pc, #388]	; (8001c20 <HAL_GPIO_Init+0x2fc>)
 8001a9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a9c:	4a60      	ldr	r2, [pc, #384]	; (8001c20 <HAL_GPIO_Init+0x2fc>)
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	6613      	str	r3, [r2, #96]	; 0x60
 8001aa4:	4b5e      	ldr	r3, [pc, #376]	; (8001c20 <HAL_GPIO_Init+0x2fc>)
 8001aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ab0:	4a5c      	ldr	r2, [pc, #368]	; (8001c24 <HAL_GPIO_Init+0x300>)
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	089b      	lsrs	r3, r3, #2
 8001ab6:	3302      	adds	r3, #2
 8001ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001abc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	f003 0303 	and.w	r3, r3, #3
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	220f      	movs	r2, #15
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ada:	d02b      	beq.n	8001b34 <HAL_GPIO_Init+0x210>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a52      	ldr	r2, [pc, #328]	; (8001c28 <HAL_GPIO_Init+0x304>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d025      	beq.n	8001b30 <HAL_GPIO_Init+0x20c>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a51      	ldr	r2, [pc, #324]	; (8001c2c <HAL_GPIO_Init+0x308>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d01f      	beq.n	8001b2c <HAL_GPIO_Init+0x208>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a50      	ldr	r2, [pc, #320]	; (8001c30 <HAL_GPIO_Init+0x30c>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d019      	beq.n	8001b28 <HAL_GPIO_Init+0x204>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a4f      	ldr	r2, [pc, #316]	; (8001c34 <HAL_GPIO_Init+0x310>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d013      	beq.n	8001b24 <HAL_GPIO_Init+0x200>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a4e      	ldr	r2, [pc, #312]	; (8001c38 <HAL_GPIO_Init+0x314>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d00d      	beq.n	8001b20 <HAL_GPIO_Init+0x1fc>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a4d      	ldr	r2, [pc, #308]	; (8001c3c <HAL_GPIO_Init+0x318>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d007      	beq.n	8001b1c <HAL_GPIO_Init+0x1f8>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a4c      	ldr	r2, [pc, #304]	; (8001c40 <HAL_GPIO_Init+0x31c>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d101      	bne.n	8001b18 <HAL_GPIO_Init+0x1f4>
 8001b14:	2307      	movs	r3, #7
 8001b16:	e00e      	b.n	8001b36 <HAL_GPIO_Init+0x212>
 8001b18:	2308      	movs	r3, #8
 8001b1a:	e00c      	b.n	8001b36 <HAL_GPIO_Init+0x212>
 8001b1c:	2306      	movs	r3, #6
 8001b1e:	e00a      	b.n	8001b36 <HAL_GPIO_Init+0x212>
 8001b20:	2305      	movs	r3, #5
 8001b22:	e008      	b.n	8001b36 <HAL_GPIO_Init+0x212>
 8001b24:	2304      	movs	r3, #4
 8001b26:	e006      	b.n	8001b36 <HAL_GPIO_Init+0x212>
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e004      	b.n	8001b36 <HAL_GPIO_Init+0x212>
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	e002      	b.n	8001b36 <HAL_GPIO_Init+0x212>
 8001b30:	2301      	movs	r3, #1
 8001b32:	e000      	b.n	8001b36 <HAL_GPIO_Init+0x212>
 8001b34:	2300      	movs	r3, #0
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	f002 0203 	and.w	r2, r2, #3
 8001b3c:	0092      	lsls	r2, r2, #2
 8001b3e:	4093      	lsls	r3, r2
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b46:	4937      	ldr	r1, [pc, #220]	; (8001c24 <HAL_GPIO_Init+0x300>)
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	089b      	lsrs	r3, r3, #2
 8001b4c:	3302      	adds	r3, #2
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b54:	4b3b      	ldr	r3, [pc, #236]	; (8001c44 <HAL_GPIO_Init+0x320>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4013      	ands	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d003      	beq.n	8001b78 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b78:	4a32      	ldr	r2, [pc, #200]	; (8001c44 <HAL_GPIO_Init+0x320>)
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001b7e:	4b31      	ldr	r3, [pc, #196]	; (8001c44 <HAL_GPIO_Init+0x320>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	43db      	mvns	r3, r3
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ba2:	4a28      	ldr	r2, [pc, #160]	; (8001c44 <HAL_GPIO_Init+0x320>)
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ba8:	4b26      	ldr	r3, [pc, #152]	; (8001c44 <HAL_GPIO_Init+0x320>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d003      	beq.n	8001bcc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bcc:	4a1d      	ldr	r2, [pc, #116]	; (8001c44 <HAL_GPIO_Init+0x320>)
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001bd2:	4b1c      	ldr	r3, [pc, #112]	; (8001c44 <HAL_GPIO_Init+0x320>)
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	4013      	ands	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bf6:	4a13      	ldr	r2, [pc, #76]	; (8001c44 <HAL_GPIO_Init+0x320>)
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f47f ae91 	bne.w	8001934 <HAL_GPIO_Init+0x10>
  }
}
 8001c12:	bf00      	nop
 8001c14:	371c      	adds	r7, #28
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40021000 	.word	0x40021000
 8001c24:	40010000 	.word	0x40010000
 8001c28:	48000400 	.word	0x48000400
 8001c2c:	48000800 	.word	0x48000800
 8001c30:	48000c00 	.word	0x48000c00
 8001c34:	48001000 	.word	0x48001000
 8001c38:	48001400 	.word	0x48001400
 8001c3c:	48001800 	.word	0x48001800
 8001c40:	48001c00 	.word	0x48001c00
 8001c44:	40010400 	.word	0x40010400

08001c48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	460b      	mov	r3, r1
 8001c52:	807b      	strh	r3, [r7, #2]
 8001c54:	4613      	mov	r3, r2
 8001c56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c58:	787b      	ldrb	r3, [r7, #1]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c5e:	887a      	ldrh	r2, [r7, #2]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c64:	e002      	b.n	8001c6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c66:	887a      	ldrh	r2, [r7, #2]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c7a:	b08f      	sub	sp, #60	; 0x3c
 8001c7c:	af0a      	add	r7, sp, #40	; 0x28
 8001c7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e116      	b.n	8001eb8 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d106      	bne.n	8001caa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f004 fbe5 	bl	8006474 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2203      	movs	r2, #3
 8001cae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d102      	bne.n	8001cc4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f002 ff6a 	bl	8004ba2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	603b      	str	r3, [r7, #0]
 8001cd4:	687e      	ldr	r6, [r7, #4]
 8001cd6:	466d      	mov	r5, sp
 8001cd8:	f106 0410 	add.w	r4, r6, #16
 8001cdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ce0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ce2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ce4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ce8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cec:	1d33      	adds	r3, r6, #4
 8001cee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cf0:	6838      	ldr	r0, [r7, #0]
 8001cf2:	f002 fef3 	bl	8004adc <USB_CoreInit>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d005      	beq.n	8001d08 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2202      	movs	r2, #2
 8001d00:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e0d7      	b.n	8001eb8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f002 ff58 	bl	8004bc4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d14:	2300      	movs	r3, #0
 8001d16:	73fb      	strb	r3, [r7, #15]
 8001d18:	e04a      	b.n	8001db0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d1a:	7bfa      	ldrb	r2, [r7, #15]
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	1a9b      	subs	r3, r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	440b      	add	r3, r1
 8001d28:	333d      	adds	r3, #61	; 0x3d
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d2e:	7bfa      	ldrb	r2, [r7, #15]
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	4613      	mov	r3, r2
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	1a9b      	subs	r3, r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	333c      	adds	r3, #60	; 0x3c
 8001d3e:	7bfa      	ldrb	r2, [r7, #15]
 8001d40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d42:	7bfa      	ldrb	r2, [r7, #15]
 8001d44:	7bfb      	ldrb	r3, [r7, #15]
 8001d46:	b298      	uxth	r0, r3
 8001d48:	6879      	ldr	r1, [r7, #4]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	1a9b      	subs	r3, r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	440b      	add	r3, r1
 8001d54:	3342      	adds	r3, #66	; 0x42
 8001d56:	4602      	mov	r2, r0
 8001d58:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d5a:	7bfa      	ldrb	r2, [r7, #15]
 8001d5c:	6879      	ldr	r1, [r7, #4]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	1a9b      	subs	r3, r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	440b      	add	r3, r1
 8001d68:	333f      	adds	r3, #63	; 0x3f
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d6e:	7bfa      	ldrb	r2, [r7, #15]
 8001d70:	6879      	ldr	r1, [r7, #4]
 8001d72:	4613      	mov	r3, r2
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	1a9b      	subs	r3, r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	3344      	adds	r3, #68	; 0x44
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d82:	7bfa      	ldrb	r2, [r7, #15]
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	4613      	mov	r3, r2
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	1a9b      	subs	r3, r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	440b      	add	r3, r1
 8001d90:	3348      	adds	r3, #72	; 0x48
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d96:	7bfa      	ldrb	r2, [r7, #15]
 8001d98:	6879      	ldr	r1, [r7, #4]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	1a9b      	subs	r3, r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	440b      	add	r3, r1
 8001da4:	3350      	adds	r3, #80	; 0x50
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001daa:	7bfb      	ldrb	r3, [r7, #15]
 8001dac:	3301      	adds	r3, #1
 8001dae:	73fb      	strb	r3, [r7, #15]
 8001db0:	7bfa      	ldrb	r2, [r7, #15]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d3af      	bcc.n	8001d1a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dba:	2300      	movs	r3, #0
 8001dbc:	73fb      	strb	r3, [r7, #15]
 8001dbe:	e044      	b.n	8001e4a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001dc0:	7bfa      	ldrb	r2, [r7, #15]
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	1a9b      	subs	r3, r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	440b      	add	r3, r1
 8001dce:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001dd6:	7bfa      	ldrb	r2, [r7, #15]
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	1a9b      	subs	r3, r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	440b      	add	r3, r1
 8001de4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001de8:	7bfa      	ldrb	r2, [r7, #15]
 8001dea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001dec:	7bfa      	ldrb	r2, [r7, #15]
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	1a9b      	subs	r3, r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e02:	7bfa      	ldrb	r2, [r7, #15]
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	1a9b      	subs	r3, r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	440b      	add	r3, r1
 8001e10:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e18:	7bfa      	ldrb	r2, [r7, #15]
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	1a9b      	subs	r3, r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e2e:	7bfa      	ldrb	r2, [r7, #15]
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	4613      	mov	r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	1a9b      	subs	r3, r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e44:	7bfb      	ldrb	r3, [r7, #15]
 8001e46:	3301      	adds	r3, #1
 8001e48:	73fb      	strb	r3, [r7, #15]
 8001e4a:	7bfa      	ldrb	r2, [r7, #15]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d3b5      	bcc.n	8001dc0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	603b      	str	r3, [r7, #0]
 8001e5a:	687e      	ldr	r6, [r7, #4]
 8001e5c:	466d      	mov	r5, sp
 8001e5e:	f106 0410 	add.w	r4, r6, #16
 8001e62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e6e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e72:	1d33      	adds	r3, r6, #4
 8001e74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e76:	6838      	ldr	r0, [r7, #0]
 8001e78:	f002 fece 	bl	8004c18 <USB_DevInit>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d005      	beq.n	8001e8e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2202      	movs	r2, #2
 8001e86:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e014      	b.n	8001eb8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d102      	bne.n	8001eac <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 fa20 	bl	80022ec <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f003 fd7b 	bl	80059ac <USB_DevDisconnect>

  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ec0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d101      	bne.n	8001edc <HAL_PCD_Start+0x1c>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e01c      	b.n	8001f16 <HAL_PCD_Start+0x56>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d105      	bne.n	8001ef8 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f002 fe3f 	bl	8004b80 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f003 fd2f 	bl	800596a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b084      	sub	sp, #16
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	4608      	mov	r0, r1
 8001f28:	4611      	mov	r1, r2
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	70fb      	strb	r3, [r7, #3]
 8001f30:	460b      	mov	r3, r1
 8001f32:	803b      	strh	r3, [r7, #0]
 8001f34:	4613      	mov	r3, r2
 8001f36:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	da0f      	bge.n	8001f64 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f44:	78fb      	ldrb	r3, [r7, #3]
 8001f46:	f003 020f 	and.w	r2, r3, #15
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	1a9b      	subs	r3, r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	3338      	adds	r3, #56	; 0x38
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	4413      	add	r3, r2
 8001f58:	3304      	adds	r3, #4
 8001f5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	705a      	strb	r2, [r3, #1]
 8001f62:	e00f      	b.n	8001f84 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f64:	78fb      	ldrb	r3, [r7, #3]
 8001f66:	f003 020f 	and.w	r2, r3, #15
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	1a9b      	subs	r3, r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	4413      	add	r3, r2
 8001f7a:	3304      	adds	r3, #4
 8001f7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f84:	78fb      	ldrb	r3, [r7, #3]
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f90:	883a      	ldrh	r2, [r7, #0]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	78ba      	ldrb	r2, [r7, #2]
 8001f9a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	785b      	ldrb	r3, [r3, #1]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d004      	beq.n	8001fae <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001fae:	78bb      	ldrb	r3, [r7, #2]
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d102      	bne.n	8001fba <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d101      	bne.n	8001fc8 <HAL_PCD_EP_Open+0xaa>
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	e00e      	b.n	8001fe6 <HAL_PCD_EP_Open+0xc8>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68f9      	ldr	r1, [r7, #12]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f002 ffcb 	bl	8004f72 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001fe4:	7afb      	ldrb	r3, [r7, #11]
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b084      	sub	sp, #16
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ffa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	da0f      	bge.n	8002022 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002002:	78fb      	ldrb	r3, [r7, #3]
 8002004:	f003 020f 	and.w	r2, r3, #15
 8002008:	4613      	mov	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	1a9b      	subs	r3, r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	3338      	adds	r3, #56	; 0x38
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	3304      	adds	r3, #4
 8002018:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2201      	movs	r2, #1
 800201e:	705a      	strb	r2, [r3, #1]
 8002020:	e00f      	b.n	8002042 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002022:	78fb      	ldrb	r3, [r7, #3]
 8002024:	f003 020f 	and.w	r2, r3, #15
 8002028:	4613      	mov	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	1a9b      	subs	r3, r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	4413      	add	r3, r2
 8002038:	3304      	adds	r3, #4
 800203a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002042:	78fb      	ldrb	r3, [r7, #3]
 8002044:	f003 030f 	and.w	r3, r3, #15
 8002048:	b2da      	uxtb	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002054:	2b01      	cmp	r3, #1
 8002056:	d101      	bne.n	800205c <HAL_PCD_EP_Close+0x6e>
 8002058:	2302      	movs	r3, #2
 800205a:	e00e      	b.n	800207a <HAL_PCD_EP_Close+0x8c>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68f9      	ldr	r1, [r7, #12]
 800206a:	4618      	mov	r0, r3
 800206c:	f003 f808 	bl	8005080 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b086      	sub	sp, #24
 8002086:	af00      	add	r7, sp, #0
 8002088:	60f8      	str	r0, [r7, #12]
 800208a:	607a      	str	r2, [r7, #4]
 800208c:	603b      	str	r3, [r7, #0]
 800208e:	460b      	mov	r3, r1
 8002090:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002092:	7afb      	ldrb	r3, [r7, #11]
 8002094:	f003 020f 	and.w	r2, r3, #15
 8002098:	4613      	mov	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	1a9b      	subs	r3, r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	4413      	add	r3, r2
 80020a8:	3304      	adds	r3, #4
 80020aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	2200      	movs	r2, #0
 80020bc:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2200      	movs	r2, #0
 80020c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020c4:	7afb      	ldrb	r3, [r7, #11]
 80020c6:	f003 030f 	and.w	r3, r3, #15
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020d0:	7afb      	ldrb	r3, [r7, #11]
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d106      	bne.n	80020e8 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6979      	ldr	r1, [r7, #20]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f003 fa85 	bl	80055f0 <USB_EP0StartXfer>
 80020e6:	e005      	b.n	80020f4 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6979      	ldr	r1, [r7, #20]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f003 f8a2 	bl	8005238 <USB_EPStartXfer>
  }

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b086      	sub	sp, #24
 8002102:	af00      	add	r7, sp, #0
 8002104:	60f8      	str	r0, [r7, #12]
 8002106:	607a      	str	r2, [r7, #4]
 8002108:	603b      	str	r3, [r7, #0]
 800210a:	460b      	mov	r3, r1
 800210c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800210e:	7afb      	ldrb	r3, [r7, #11]
 8002110:	f003 020f 	and.w	r2, r3, #15
 8002114:	4613      	mov	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	1a9b      	subs	r3, r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	3338      	adds	r3, #56	; 0x38
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	4413      	add	r3, r2
 8002122:	3304      	adds	r3, #4
 8002124:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	2200      	movs	r2, #0
 8002136:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	2201      	movs	r2, #1
 800213c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800213e:	7afb      	ldrb	r3, [r7, #11]
 8002140:	f003 030f 	and.w	r3, r3, #15
 8002144:	b2da      	uxtb	r2, r3
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800214a:	7afb      	ldrb	r3, [r7, #11]
 800214c:	f003 030f 	and.w	r3, r3, #15
 8002150:	2b00      	cmp	r3, #0
 8002152:	d106      	bne.n	8002162 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6979      	ldr	r1, [r7, #20]
 800215a:	4618      	mov	r0, r3
 800215c:	f003 fa48 	bl	80055f0 <USB_EP0StartXfer>
 8002160:	e005      	b.n	800216e <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6979      	ldr	r1, [r7, #20]
 8002168:	4618      	mov	r0, r3
 800216a:	f003 f865 	bl	8005238 <USB_EPStartXfer>
  }

  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002184:	78fb      	ldrb	r3, [r7, #3]
 8002186:	f003 020f 	and.w	r2, r3, #15
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	429a      	cmp	r2, r3
 8002190:	d901      	bls.n	8002196 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e04e      	b.n	8002234 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002196:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800219a:	2b00      	cmp	r3, #0
 800219c:	da0f      	bge.n	80021be <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800219e:	78fb      	ldrb	r3, [r7, #3]
 80021a0:	f003 020f 	and.w	r2, r3, #15
 80021a4:	4613      	mov	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	1a9b      	subs	r3, r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	3338      	adds	r3, #56	; 0x38
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	3304      	adds	r3, #4
 80021b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2201      	movs	r2, #1
 80021ba:	705a      	strb	r2, [r3, #1]
 80021bc:	e00d      	b.n	80021da <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021be:	78fa      	ldrb	r2, [r7, #3]
 80021c0:	4613      	mov	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	1a9b      	subs	r3, r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	4413      	add	r3, r2
 80021d0:	3304      	adds	r3, #4
 80021d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2201      	movs	r2, #1
 80021de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021e0:	78fb      	ldrb	r3, [r7, #3]
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d101      	bne.n	80021fa <HAL_PCD_EP_SetStall+0x82>
 80021f6:	2302      	movs	r3, #2
 80021f8:	e01c      	b.n	8002234 <HAL_PCD_EP_SetStall+0xbc>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68f9      	ldr	r1, [r7, #12]
 8002208:	4618      	mov	r0, r3
 800220a:	f003 fb40 	bl	800588e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800220e:	78fb      	ldrb	r3, [r7, #3]
 8002210:	f003 030f 	and.w	r3, r3, #15
 8002214:	2b00      	cmp	r3, #0
 8002216:	d108      	bne.n	800222a <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002222:	4619      	mov	r1, r3
 8002224:	4610      	mov	r0, r2
 8002226:	f003 fbe3 	bl	80059f0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	70fb      	strb	r3, [r7, #3]
 8002248:	4613      	mov	r3, r2
 800224a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002254:	78fb      	ldrb	r3, [r7, #3]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d107      	bne.n	800226a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800225a:	883b      	ldrh	r3, [r7, #0]
 800225c:	0419      	lsls	r1, r3, #16
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	430a      	orrs	r2, r1
 8002266:	629a      	str	r2, [r3, #40]	; 0x28
 8002268:	e028      	b.n	80022bc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002270:	0c1b      	lsrs	r3, r3, #16
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	4413      	add	r3, r2
 8002276:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002278:	2300      	movs	r3, #0
 800227a:	73fb      	strb	r3, [r7, #15]
 800227c:	e00d      	b.n	800229a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	7bfb      	ldrb	r3, [r7, #15]
 8002284:	3340      	adds	r3, #64	; 0x40
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	0c1b      	lsrs	r3, r3, #16
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	4413      	add	r3, r2
 8002292:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	3301      	adds	r3, #1
 8002298:	73fb      	strb	r3, [r7, #15]
 800229a:	7bfa      	ldrb	r2, [r7, #15]
 800229c:	78fb      	ldrb	r3, [r7, #3]
 800229e:	3b01      	subs	r3, #1
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d3ec      	bcc.n	800227e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80022a4:	883b      	ldrh	r3, [r7, #0]
 80022a6:	0418      	lsls	r0, r3, #16
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6819      	ldr	r1, [r3, #0]
 80022ac:	78fb      	ldrb	r3, [r7, #3]
 80022ae:	3b01      	subs	r3, #1
 80022b0:	68ba      	ldr	r2, [r7, #8]
 80022b2:	4302      	orrs	r2, r0
 80022b4:	3340      	adds	r3, #64	; 0x40
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
 80022d2:	460b      	mov	r3, r1
 80022d4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	887a      	ldrh	r2, [r7, #2]
 80022dc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800231e:	f043 0303 	orr.w	r3, r3, #3
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002338:	4b0d      	ldr	r3, [pc, #52]	; (8002370 <HAL_PWREx_GetVoltageRange+0x3c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002344:	d102      	bne.n	800234c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800234a:	e00b      	b.n	8002364 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800234c:	4b08      	ldr	r3, [pc, #32]	; (8002370 <HAL_PWREx_GetVoltageRange+0x3c>)
 800234e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800235a:	d102      	bne.n	8002362 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800235c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002360:	e000      	b.n	8002364 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002362:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002364:	4618      	mov	r0, r3
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	40007000 	.word	0x40007000

08002374 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d141      	bne.n	8002406 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002382:	4b4b      	ldr	r3, [pc, #300]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800238a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800238e:	d131      	bne.n	80023f4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002390:	4b47      	ldr	r3, [pc, #284]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002396:	4a46      	ldr	r2, [pc, #280]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002398:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800239c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023a0:	4b43      	ldr	r3, [pc, #268]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023a8:	4a41      	ldr	r2, [pc, #260]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80023b0:	4b40      	ldr	r3, [pc, #256]	; (80024b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2232      	movs	r2, #50	; 0x32
 80023b6:	fb02 f303 	mul.w	r3, r2, r3
 80023ba:	4a3f      	ldr	r2, [pc, #252]	; (80024b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80023bc:	fba2 2303 	umull	r2, r3, r2, r3
 80023c0:	0c9b      	lsrs	r3, r3, #18
 80023c2:	3301      	adds	r3, #1
 80023c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023c6:	e002      	b.n	80023ce <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	3b01      	subs	r3, #1
 80023cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023ce:	4b38      	ldr	r3, [pc, #224]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023da:	d102      	bne.n	80023e2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1f2      	bne.n	80023c8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023e2:	4b33      	ldr	r3, [pc, #204]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ee:	d158      	bne.n	80024a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e057      	b.n	80024a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023f4:	4b2e      	ldr	r3, [pc, #184]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023fa:	4a2d      	ldr	r2, [pc, #180]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002400:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002404:	e04d      	b.n	80024a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800240c:	d141      	bne.n	8002492 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800240e:	4b28      	ldr	r3, [pc, #160]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002416:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800241a:	d131      	bne.n	8002480 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800241c:	4b24      	ldr	r3, [pc, #144]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800241e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002422:	4a23      	ldr	r2, [pc, #140]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002428:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800242c:	4b20      	ldr	r3, [pc, #128]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002434:	4a1e      	ldr	r2, [pc, #120]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002436:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800243a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800243c:	4b1d      	ldr	r3, [pc, #116]	; (80024b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2232      	movs	r2, #50	; 0x32
 8002442:	fb02 f303 	mul.w	r3, r2, r3
 8002446:	4a1c      	ldr	r2, [pc, #112]	; (80024b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002448:	fba2 2303 	umull	r2, r3, r2, r3
 800244c:	0c9b      	lsrs	r3, r3, #18
 800244e:	3301      	adds	r3, #1
 8002450:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002452:	e002      	b.n	800245a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	3b01      	subs	r3, #1
 8002458:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800245a:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002466:	d102      	bne.n	800246e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f2      	bne.n	8002454 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800246e:	4b10      	ldr	r3, [pc, #64]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800247a:	d112      	bne.n	80024a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e011      	b.n	80024a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002482:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002486:	4a0a      	ldr	r2, [pc, #40]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002490:	e007      	b.n	80024a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002492:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800249a:	4a05      	ldr	r2, [pc, #20]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800249c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024a0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	40007000 	.word	0x40007000
 80024b4:	20000000 	.word	0x20000000
 80024b8:	431bde83 	.word	0x431bde83

080024bc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80024c0:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	4a04      	ldr	r2, [pc, #16]	; (80024d8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80024c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024ca:	6053      	str	r3, [r2, #4]
}
 80024cc:	bf00      	nop
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	40007000 	.word	0x40007000

080024dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b088      	sub	sp, #32
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d102      	bne.n	80024f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	f000 bc16 	b.w	8002d1c <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024f0:	4ba0      	ldr	r3, [pc, #640]	; (8002774 <HAL_RCC_OscConfig+0x298>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 030c 	and.w	r3, r3, #12
 80024f8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024fa:	4b9e      	ldr	r3, [pc, #632]	; (8002774 <HAL_RCC_OscConfig+0x298>)
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0310 	and.w	r3, r3, #16
 800250c:	2b00      	cmp	r3, #0
 800250e:	f000 80e4 	beq.w	80026da <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d007      	beq.n	8002528 <HAL_RCC_OscConfig+0x4c>
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	2b0c      	cmp	r3, #12
 800251c:	f040 808b 	bne.w	8002636 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	2b01      	cmp	r3, #1
 8002524:	f040 8087 	bne.w	8002636 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002528:	4b92      	ldr	r3, [pc, #584]	; (8002774 <HAL_RCC_OscConfig+0x298>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d005      	beq.n	8002540 <HAL_RCC_OscConfig+0x64>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e3ed      	b.n	8002d1c <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a1a      	ldr	r2, [r3, #32]
 8002544:	4b8b      	ldr	r3, [pc, #556]	; (8002774 <HAL_RCC_OscConfig+0x298>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0308 	and.w	r3, r3, #8
 800254c:	2b00      	cmp	r3, #0
 800254e:	d004      	beq.n	800255a <HAL_RCC_OscConfig+0x7e>
 8002550:	4b88      	ldr	r3, [pc, #544]	; (8002774 <HAL_RCC_OscConfig+0x298>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002558:	e005      	b.n	8002566 <HAL_RCC_OscConfig+0x8a>
 800255a:	4b86      	ldr	r3, [pc, #536]	; (8002774 <HAL_RCC_OscConfig+0x298>)
 800255c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002560:	091b      	lsrs	r3, r3, #4
 8002562:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002566:	4293      	cmp	r3, r2
 8002568:	d223      	bcs.n	80025b2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	4618      	mov	r0, r3
 8002570:	f000 fdc8 	bl	8003104 <RCC_SetFlashLatencyFromMSIRange>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e3ce      	b.n	8002d1c <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800257e:	4b7d      	ldr	r3, [pc, #500]	; (8002774 <HAL_RCC_OscConfig+0x298>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a7c      	ldr	r2, [pc, #496]	; (8002774 <HAL_RCC_OscConfig+0x298>)
 8002584:	f043 0308 	orr.w	r3, r3, #8
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	4b7a      	ldr	r3, [pc, #488]	; (8002774 <HAL_RCC_OscConfig+0x298>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	4977      	ldr	r1, [pc, #476]	; (8002774 <HAL_RCC_OscConfig+0x298>)
 8002598:	4313      	orrs	r3, r2
 800259a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800259c:	4b75      	ldr	r3, [pc, #468]	; (8002774 <HAL_RCC_OscConfig+0x298>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	021b      	lsls	r3, r3, #8
 80025aa:	4972      	ldr	r1, [pc, #456]	; (8002774 <HAL_RCC_OscConfig+0x298>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	604b      	str	r3, [r1, #4]
 80025b0:	e025      	b.n	80025fe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025b2:	4b70      	ldr	r3, [pc, #448]	; (8002774 <HAL_RCC_OscConfig+0x298>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a6f      	ldr	r2, [pc, #444]	; (8002774 <HAL_RCC_OscConfig+0x298>)
 80025b8:	f043 0308 	orr.w	r3, r3, #8
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	4b6d      	ldr	r3, [pc, #436]	; (8002774 <HAL_RCC_OscConfig+0x298>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	496a      	ldr	r1, [pc, #424]	; (8002774 <HAL_RCC_OscConfig+0x298>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025d0:	4b68      	ldr	r3, [pc, #416]	; (8002774 <HAL_RCC_OscConfig+0x298>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	69db      	ldr	r3, [r3, #28]
 80025dc:	021b      	lsls	r3, r3, #8
 80025de:	4965      	ldr	r1, [pc, #404]	; (8002774 <HAL_RCC_OscConfig+0x298>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d109      	bne.n	80025fe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 fd88 	bl	8003104 <RCC_SetFlashLatencyFromMSIRange>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e38e      	b.n	8002d1c <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025fe:	f000 fcbf 	bl	8002f80 <HAL_RCC_GetSysClockFreq>
 8002602:	4601      	mov	r1, r0
 8002604:	4b5b      	ldr	r3, [pc, #364]	; (8002774 <HAL_RCC_OscConfig+0x298>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	091b      	lsrs	r3, r3, #4
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	4a5a      	ldr	r2, [pc, #360]	; (8002778 <HAL_RCC_OscConfig+0x29c>)
 8002610:	5cd3      	ldrb	r3, [r2, r3]
 8002612:	f003 031f 	and.w	r3, r3, #31
 8002616:	fa21 f303 	lsr.w	r3, r1, r3
 800261a:	4a58      	ldr	r2, [pc, #352]	; (800277c <HAL_RCC_OscConfig+0x2a0>)
 800261c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800261e:	4b58      	ldr	r3, [pc, #352]	; (8002780 <HAL_RCC_OscConfig+0x2a4>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f7fe ff0a 	bl	800143c <HAL_InitTick>
 8002628:	4603      	mov	r3, r0
 800262a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d052      	beq.n	80026d8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002632:	7bfb      	ldrb	r3, [r7, #15]
 8002634:	e372      	b.n	8002d1c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d032      	beq.n	80026a4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800263e:	4b4d      	ldr	r3, [pc, #308]	; (8002774 <HAL_RCC_OscConfig+0x298>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a4c      	ldr	r2, [pc, #304]	; (8002774 <HAL_RCC_OscConfig+0x298>)
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800264a:	f7fe ff47 	bl	80014dc <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002652:	f7fe ff43 	bl	80014dc <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e35b      	b.n	8002d1c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002664:	4b43      	ldr	r3, [pc, #268]	; (8002774 <HAL_RCC_OscConfig+0x298>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0f0      	beq.n	8002652 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002670:	4b40      	ldr	r3, [pc, #256]	; (8002774 <HAL_RCC_OscConfig+0x298>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a3f      	ldr	r2, [pc, #252]	; (8002774 <HAL_RCC_OscConfig+0x298>)
 8002676:	f043 0308 	orr.w	r3, r3, #8
 800267a:	6013      	str	r3, [r2, #0]
 800267c:	4b3d      	ldr	r3, [pc, #244]	; (8002774 <HAL_RCC_OscConfig+0x298>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	493a      	ldr	r1, [pc, #232]	; (8002774 <HAL_RCC_OscConfig+0x298>)
 800268a:	4313      	orrs	r3, r2
 800268c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800268e:	4b39      	ldr	r3, [pc, #228]	; (8002774 <HAL_RCC_OscConfig+0x298>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	021b      	lsls	r3, r3, #8
 800269c:	4935      	ldr	r1, [pc, #212]	; (8002774 <HAL_RCC_OscConfig+0x298>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	604b      	str	r3, [r1, #4]
 80026a2:	e01a      	b.n	80026da <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026a4:	4b33      	ldr	r3, [pc, #204]	; (8002774 <HAL_RCC_OscConfig+0x298>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a32      	ldr	r2, [pc, #200]	; (8002774 <HAL_RCC_OscConfig+0x298>)
 80026aa:	f023 0301 	bic.w	r3, r3, #1
 80026ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026b0:	f7fe ff14 	bl	80014dc <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026b8:	f7fe ff10 	bl	80014dc <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e328      	b.n	8002d1c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026ca:	4b2a      	ldr	r3, [pc, #168]	; (8002774 <HAL_RCC_OscConfig+0x298>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_OscConfig+0x1dc>
 80026d6:	e000      	b.n	80026da <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d073      	beq.n	80027ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	d005      	beq.n	80026f8 <HAL_RCC_OscConfig+0x21c>
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	2b0c      	cmp	r3, #12
 80026f0:	d10e      	bne.n	8002710 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	2b03      	cmp	r3, #3
 80026f6:	d10b      	bne.n	8002710 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f8:	4b1e      	ldr	r3, [pc, #120]	; (8002774 <HAL_RCC_OscConfig+0x298>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d063      	beq.n	80027cc <HAL_RCC_OscConfig+0x2f0>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d15f      	bne.n	80027cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e305      	b.n	8002d1c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002718:	d106      	bne.n	8002728 <HAL_RCC_OscConfig+0x24c>
 800271a:	4b16      	ldr	r3, [pc, #88]	; (8002774 <HAL_RCC_OscConfig+0x298>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a15      	ldr	r2, [pc, #84]	; (8002774 <HAL_RCC_OscConfig+0x298>)
 8002720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	e01d      	b.n	8002764 <HAL_RCC_OscConfig+0x288>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002730:	d10c      	bne.n	800274c <HAL_RCC_OscConfig+0x270>
 8002732:	4b10      	ldr	r3, [pc, #64]	; (8002774 <HAL_RCC_OscConfig+0x298>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a0f      	ldr	r2, [pc, #60]	; (8002774 <HAL_RCC_OscConfig+0x298>)
 8002738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	4b0d      	ldr	r3, [pc, #52]	; (8002774 <HAL_RCC_OscConfig+0x298>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a0c      	ldr	r2, [pc, #48]	; (8002774 <HAL_RCC_OscConfig+0x298>)
 8002744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	e00b      	b.n	8002764 <HAL_RCC_OscConfig+0x288>
 800274c:	4b09      	ldr	r3, [pc, #36]	; (8002774 <HAL_RCC_OscConfig+0x298>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a08      	ldr	r2, [pc, #32]	; (8002774 <HAL_RCC_OscConfig+0x298>)
 8002752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002756:	6013      	str	r3, [r2, #0]
 8002758:	4b06      	ldr	r3, [pc, #24]	; (8002774 <HAL_RCC_OscConfig+0x298>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a05      	ldr	r2, [pc, #20]	; (8002774 <HAL_RCC_OscConfig+0x298>)
 800275e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d01b      	beq.n	80027a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276c:	f7fe feb6 	bl	80014dc <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002772:	e010      	b.n	8002796 <HAL_RCC_OscConfig+0x2ba>
 8002774:	40021000 	.word	0x40021000
 8002778:	0801111c 	.word	0x0801111c
 800277c:	20000000 	.word	0x20000000
 8002780:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002784:	f7fe feaa 	bl	80014dc <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b64      	cmp	r3, #100	; 0x64
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e2c2      	b.n	8002d1c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002796:	4baf      	ldr	r3, [pc, #700]	; (8002a54 <HAL_RCC_OscConfig+0x578>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0f0      	beq.n	8002784 <HAL_RCC_OscConfig+0x2a8>
 80027a2:	e014      	b.n	80027ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a4:	f7fe fe9a 	bl	80014dc <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ac:	f7fe fe96 	bl	80014dc <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b64      	cmp	r3, #100	; 0x64
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e2ae      	b.n	8002d1c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027be:	4ba5      	ldr	r3, [pc, #660]	; (8002a54 <HAL_RCC_OscConfig+0x578>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f0      	bne.n	80027ac <HAL_RCC_OscConfig+0x2d0>
 80027ca:	e000      	b.n	80027ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d060      	beq.n	800289c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	2b04      	cmp	r3, #4
 80027de:	d005      	beq.n	80027ec <HAL_RCC_OscConfig+0x310>
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	2b0c      	cmp	r3, #12
 80027e4:	d119      	bne.n	800281a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d116      	bne.n	800281a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027ec:	4b99      	ldr	r3, [pc, #612]	; (8002a54 <HAL_RCC_OscConfig+0x578>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <HAL_RCC_OscConfig+0x328>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e28b      	b.n	8002d1c <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002804:	4b93      	ldr	r3, [pc, #588]	; (8002a54 <HAL_RCC_OscConfig+0x578>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	061b      	lsls	r3, r3, #24
 8002812:	4990      	ldr	r1, [pc, #576]	; (8002a54 <HAL_RCC_OscConfig+0x578>)
 8002814:	4313      	orrs	r3, r2
 8002816:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002818:	e040      	b.n	800289c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d023      	beq.n	800286a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002822:	4b8c      	ldr	r3, [pc, #560]	; (8002a54 <HAL_RCC_OscConfig+0x578>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a8b      	ldr	r2, [pc, #556]	; (8002a54 <HAL_RCC_OscConfig+0x578>)
 8002828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800282c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282e:	f7fe fe55 	bl	80014dc <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002836:	f7fe fe51 	bl	80014dc <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e269      	b.n	8002d1c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002848:	4b82      	ldr	r3, [pc, #520]	; (8002a54 <HAL_RCC_OscConfig+0x578>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0f0      	beq.n	8002836 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002854:	4b7f      	ldr	r3, [pc, #508]	; (8002a54 <HAL_RCC_OscConfig+0x578>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	061b      	lsls	r3, r3, #24
 8002862:	497c      	ldr	r1, [pc, #496]	; (8002a54 <HAL_RCC_OscConfig+0x578>)
 8002864:	4313      	orrs	r3, r2
 8002866:	604b      	str	r3, [r1, #4]
 8002868:	e018      	b.n	800289c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800286a:	4b7a      	ldr	r3, [pc, #488]	; (8002a54 <HAL_RCC_OscConfig+0x578>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a79      	ldr	r2, [pc, #484]	; (8002a54 <HAL_RCC_OscConfig+0x578>)
 8002870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002874:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002876:	f7fe fe31 	bl	80014dc <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800287e:	f7fe fe2d 	bl	80014dc <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e245      	b.n	8002d1c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002890:	4b70      	ldr	r3, [pc, #448]	; (8002a54 <HAL_RCC_OscConfig+0x578>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1f0      	bne.n	800287e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0308 	and.w	r3, r3, #8
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d03c      	beq.n	8002922 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d01c      	beq.n	80028ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028b0:	4b68      	ldr	r3, [pc, #416]	; (8002a54 <HAL_RCC_OscConfig+0x578>)
 80028b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028b6:	4a67      	ldr	r2, [pc, #412]	; (8002a54 <HAL_RCC_OscConfig+0x578>)
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c0:	f7fe fe0c 	bl	80014dc <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028c8:	f7fe fe08 	bl	80014dc <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e220      	b.n	8002d1c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028da:	4b5e      	ldr	r3, [pc, #376]	; (8002a54 <HAL_RCC_OscConfig+0x578>)
 80028dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0ef      	beq.n	80028c8 <HAL_RCC_OscConfig+0x3ec>
 80028e8:	e01b      	b.n	8002922 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ea:	4b5a      	ldr	r3, [pc, #360]	; (8002a54 <HAL_RCC_OscConfig+0x578>)
 80028ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028f0:	4a58      	ldr	r2, [pc, #352]	; (8002a54 <HAL_RCC_OscConfig+0x578>)
 80028f2:	f023 0301 	bic.w	r3, r3, #1
 80028f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fa:	f7fe fdef 	bl	80014dc <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002902:	f7fe fdeb 	bl	80014dc <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e203      	b.n	8002d1c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002914:	4b4f      	ldr	r3, [pc, #316]	; (8002a54 <HAL_RCC_OscConfig+0x578>)
 8002916:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1ef      	bne.n	8002902 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 80a6 	beq.w	8002a7c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002930:	2300      	movs	r3, #0
 8002932:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002934:	4b47      	ldr	r3, [pc, #284]	; (8002a54 <HAL_RCC_OscConfig+0x578>)
 8002936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10d      	bne.n	800295c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002940:	4b44      	ldr	r3, [pc, #272]	; (8002a54 <HAL_RCC_OscConfig+0x578>)
 8002942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002944:	4a43      	ldr	r2, [pc, #268]	; (8002a54 <HAL_RCC_OscConfig+0x578>)
 8002946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800294a:	6593      	str	r3, [r2, #88]	; 0x58
 800294c:	4b41      	ldr	r3, [pc, #260]	; (8002a54 <HAL_RCC_OscConfig+0x578>)
 800294e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002958:	2301      	movs	r3, #1
 800295a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800295c:	4b3e      	ldr	r3, [pc, #248]	; (8002a58 <HAL_RCC_OscConfig+0x57c>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002964:	2b00      	cmp	r3, #0
 8002966:	d118      	bne.n	800299a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002968:	4b3b      	ldr	r3, [pc, #236]	; (8002a58 <HAL_RCC_OscConfig+0x57c>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a3a      	ldr	r2, [pc, #232]	; (8002a58 <HAL_RCC_OscConfig+0x57c>)
 800296e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002972:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002974:	f7fe fdb2 	bl	80014dc <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800297c:	f7fe fdae 	bl	80014dc <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e1c6      	b.n	8002d1c <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800298e:	4b32      	ldr	r3, [pc, #200]	; (8002a58 <HAL_RCC_OscConfig+0x57c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f0      	beq.n	800297c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d108      	bne.n	80029b4 <HAL_RCC_OscConfig+0x4d8>
 80029a2:	4b2c      	ldr	r3, [pc, #176]	; (8002a54 <HAL_RCC_OscConfig+0x578>)
 80029a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a8:	4a2a      	ldr	r2, [pc, #168]	; (8002a54 <HAL_RCC_OscConfig+0x578>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029b2:	e024      	b.n	80029fe <HAL_RCC_OscConfig+0x522>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	2b05      	cmp	r3, #5
 80029ba:	d110      	bne.n	80029de <HAL_RCC_OscConfig+0x502>
 80029bc:	4b25      	ldr	r3, [pc, #148]	; (8002a54 <HAL_RCC_OscConfig+0x578>)
 80029be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c2:	4a24      	ldr	r2, [pc, #144]	; (8002a54 <HAL_RCC_OscConfig+0x578>)
 80029c4:	f043 0304 	orr.w	r3, r3, #4
 80029c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029cc:	4b21      	ldr	r3, [pc, #132]	; (8002a54 <HAL_RCC_OscConfig+0x578>)
 80029ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d2:	4a20      	ldr	r2, [pc, #128]	; (8002a54 <HAL_RCC_OscConfig+0x578>)
 80029d4:	f043 0301 	orr.w	r3, r3, #1
 80029d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029dc:	e00f      	b.n	80029fe <HAL_RCC_OscConfig+0x522>
 80029de:	4b1d      	ldr	r3, [pc, #116]	; (8002a54 <HAL_RCC_OscConfig+0x578>)
 80029e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e4:	4a1b      	ldr	r2, [pc, #108]	; (8002a54 <HAL_RCC_OscConfig+0x578>)
 80029e6:	f023 0301 	bic.w	r3, r3, #1
 80029ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029ee:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <HAL_RCC_OscConfig+0x578>)
 80029f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f4:	4a17      	ldr	r2, [pc, #92]	; (8002a54 <HAL_RCC_OscConfig+0x578>)
 80029f6:	f023 0304 	bic.w	r3, r3, #4
 80029fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d016      	beq.n	8002a34 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a06:	f7fe fd69 	bl	80014dc <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a0c:	e00a      	b.n	8002a24 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a0e:	f7fe fd65 	bl	80014dc <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e17b      	b.n	8002d1c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <HAL_RCC_OscConfig+0x578>)
 8002a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0ed      	beq.n	8002a0e <HAL_RCC_OscConfig+0x532>
 8002a32:	e01a      	b.n	8002a6a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a34:	f7fe fd52 	bl	80014dc <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a3a:	e00f      	b.n	8002a5c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a3c:	f7fe fd4e 	bl	80014dc <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d906      	bls.n	8002a5c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e164      	b.n	8002d1c <HAL_RCC_OscConfig+0x840>
 8002a52:	bf00      	nop
 8002a54:	40021000 	.word	0x40021000
 8002a58:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a5c:	4ba8      	ldr	r3, [pc, #672]	; (8002d00 <HAL_RCC_OscConfig+0x824>)
 8002a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1e8      	bne.n	8002a3c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a6a:	7ffb      	ldrb	r3, [r7, #31]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d105      	bne.n	8002a7c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a70:	4ba3      	ldr	r3, [pc, #652]	; (8002d00 <HAL_RCC_OscConfig+0x824>)
 8002a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a74:	4aa2      	ldr	r2, [pc, #648]	; (8002d00 <HAL_RCC_OscConfig+0x824>)
 8002a76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0320 	and.w	r3, r3, #32
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d03c      	beq.n	8002b02 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d01c      	beq.n	8002aca <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a90:	4b9b      	ldr	r3, [pc, #620]	; (8002d00 <HAL_RCC_OscConfig+0x824>)
 8002a92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a96:	4a9a      	ldr	r2, [pc, #616]	; (8002d00 <HAL_RCC_OscConfig+0x824>)
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa0:	f7fe fd1c 	bl	80014dc <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002aa8:	f7fe fd18 	bl	80014dc <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e130      	b.n	8002d1c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002aba:	4b91      	ldr	r3, [pc, #580]	; (8002d00 <HAL_RCC_OscConfig+0x824>)
 8002abc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0ef      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x5cc>
 8002ac8:	e01b      	b.n	8002b02 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002aca:	4b8d      	ldr	r3, [pc, #564]	; (8002d00 <HAL_RCC_OscConfig+0x824>)
 8002acc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ad0:	4a8b      	ldr	r2, [pc, #556]	; (8002d00 <HAL_RCC_OscConfig+0x824>)
 8002ad2:	f023 0301 	bic.w	r3, r3, #1
 8002ad6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ada:	f7fe fcff 	bl	80014dc <HAL_GetTick>
 8002ade:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ae0:	e008      	b.n	8002af4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ae2:	f7fe fcfb 	bl	80014dc <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e113      	b.n	8002d1c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002af4:	4b82      	ldr	r3, [pc, #520]	; (8002d00 <HAL_RCC_OscConfig+0x824>)
 8002af6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1ef      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 8107 	beq.w	8002d1a <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	f040 80cb 	bne.w	8002cac <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b16:	4b7a      	ldr	r3, [pc, #488]	; (8002d00 <HAL_RCC_OscConfig+0x824>)
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f003 0203 	and.w	r2, r3, #3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d12c      	bne.n	8002b84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b34:	3b01      	subs	r3, #1
 8002b36:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d123      	bne.n	8002b84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b46:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d11b      	bne.n	8002b84 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b56:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d113      	bne.n	8002b84 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b66:	085b      	lsrs	r3, r3, #1
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d109      	bne.n	8002b84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	085b      	lsrs	r3, r3, #1
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d06d      	beq.n	8002c60 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	2b0c      	cmp	r3, #12
 8002b88:	d068      	beq.n	8002c5c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b8a:	4b5d      	ldr	r3, [pc, #372]	; (8002d00 <HAL_RCC_OscConfig+0x824>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d105      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b96:	4b5a      	ldr	r3, [pc, #360]	; (8002d00 <HAL_RCC_OscConfig+0x824>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e0ba      	b.n	8002d1c <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ba6:	4b56      	ldr	r3, [pc, #344]	; (8002d00 <HAL_RCC_OscConfig+0x824>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a55      	ldr	r2, [pc, #340]	; (8002d00 <HAL_RCC_OscConfig+0x824>)
 8002bac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bb0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bb2:	f7fe fc93 	bl	80014dc <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bba:	f7fe fc8f 	bl	80014dc <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e0a7      	b.n	8002d1c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bcc:	4b4c      	ldr	r3, [pc, #304]	; (8002d00 <HAL_RCC_OscConfig+0x824>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1f0      	bne.n	8002bba <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bd8:	4b49      	ldr	r3, [pc, #292]	; (8002d00 <HAL_RCC_OscConfig+0x824>)
 8002bda:	68da      	ldr	r2, [r3, #12]
 8002bdc:	4b49      	ldr	r3, [pc, #292]	; (8002d04 <HAL_RCC_OscConfig+0x828>)
 8002bde:	4013      	ands	r3, r2
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002be8:	3a01      	subs	r2, #1
 8002bea:	0112      	lsls	r2, r2, #4
 8002bec:	4311      	orrs	r1, r2
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bf2:	0212      	lsls	r2, r2, #8
 8002bf4:	4311      	orrs	r1, r2
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bfa:	0852      	lsrs	r2, r2, #1
 8002bfc:	3a01      	subs	r2, #1
 8002bfe:	0552      	lsls	r2, r2, #21
 8002c00:	4311      	orrs	r1, r2
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c06:	0852      	lsrs	r2, r2, #1
 8002c08:	3a01      	subs	r2, #1
 8002c0a:	0652      	lsls	r2, r2, #25
 8002c0c:	4311      	orrs	r1, r2
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c12:	06d2      	lsls	r2, r2, #27
 8002c14:	430a      	orrs	r2, r1
 8002c16:	493a      	ldr	r1, [pc, #232]	; (8002d00 <HAL_RCC_OscConfig+0x824>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c1c:	4b38      	ldr	r3, [pc, #224]	; (8002d00 <HAL_RCC_OscConfig+0x824>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a37      	ldr	r2, [pc, #220]	; (8002d00 <HAL_RCC_OscConfig+0x824>)
 8002c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c26:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c28:	4b35      	ldr	r3, [pc, #212]	; (8002d00 <HAL_RCC_OscConfig+0x824>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	4a34      	ldr	r2, [pc, #208]	; (8002d00 <HAL_RCC_OscConfig+0x824>)
 8002c2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c32:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c34:	f7fe fc52 	bl	80014dc <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c3c:	f7fe fc4e 	bl	80014dc <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e066      	b.n	8002d1c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c4e:	4b2c      	ldr	r3, [pc, #176]	; (8002d00 <HAL_RCC_OscConfig+0x824>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0f0      	beq.n	8002c3c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c5a:	e05e      	b.n	8002d1a <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e05d      	b.n	8002d1c <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c60:	4b27      	ldr	r3, [pc, #156]	; (8002d00 <HAL_RCC_OscConfig+0x824>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d156      	bne.n	8002d1a <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c6c:	4b24      	ldr	r3, [pc, #144]	; (8002d00 <HAL_RCC_OscConfig+0x824>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a23      	ldr	r2, [pc, #140]	; (8002d00 <HAL_RCC_OscConfig+0x824>)
 8002c72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c76:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c78:	4b21      	ldr	r3, [pc, #132]	; (8002d00 <HAL_RCC_OscConfig+0x824>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	4a20      	ldr	r2, [pc, #128]	; (8002d00 <HAL_RCC_OscConfig+0x824>)
 8002c7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c82:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c84:	f7fe fc2a 	bl	80014dc <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c8c:	f7fe fc26 	bl	80014dc <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e03e      	b.n	8002d1c <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c9e:	4b18      	ldr	r3, [pc, #96]	; (8002d00 <HAL_RCC_OscConfig+0x824>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0f0      	beq.n	8002c8c <HAL_RCC_OscConfig+0x7b0>
 8002caa:	e036      	b.n	8002d1a <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	2b0c      	cmp	r3, #12
 8002cb0:	d031      	beq.n	8002d16 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb2:	4b13      	ldr	r3, [pc, #76]	; (8002d00 <HAL_RCC_OscConfig+0x824>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a12      	ldr	r2, [pc, #72]	; (8002d00 <HAL_RCC_OscConfig+0x824>)
 8002cb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cbc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002cbe:	4b10      	ldr	r3, [pc, #64]	; (8002d00 <HAL_RCC_OscConfig+0x824>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d105      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002cca:	4b0d      	ldr	r3, [pc, #52]	; (8002d00 <HAL_RCC_OscConfig+0x824>)
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	4a0c      	ldr	r2, [pc, #48]	; (8002d00 <HAL_RCC_OscConfig+0x824>)
 8002cd0:	f023 0303 	bic.w	r3, r3, #3
 8002cd4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002cd6:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <HAL_RCC_OscConfig+0x824>)
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	4a09      	ldr	r2, [pc, #36]	; (8002d00 <HAL_RCC_OscConfig+0x824>)
 8002cdc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002ce0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ce4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce6:	f7fe fbf9 	bl	80014dc <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cec:	e00c      	b.n	8002d08 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cee:	f7fe fbf5 	bl	80014dc <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d905      	bls.n	8002d08 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e00d      	b.n	8002d1c <HAL_RCC_OscConfig+0x840>
 8002d00:	40021000 	.word	0x40021000
 8002d04:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d08:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <HAL_RCC_OscConfig+0x848>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1ec      	bne.n	8002cee <HAL_RCC_OscConfig+0x812>
 8002d14:	e001      	b.n	8002d1a <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e000      	b.n	8002d1c <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3720      	adds	r7, #32
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40021000 	.word	0x40021000

08002d28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002d32:	2300      	movs	r3, #0
 8002d34:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e10f      	b.n	8002f60 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d40:	4b89      	ldr	r3, [pc, #548]	; (8002f68 <HAL_RCC_ClockConfig+0x240>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 030f 	and.w	r3, r3, #15
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d910      	bls.n	8002d70 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4e:	4b86      	ldr	r3, [pc, #536]	; (8002f68 <HAL_RCC_ClockConfig+0x240>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f023 020f 	bic.w	r2, r3, #15
 8002d56:	4984      	ldr	r1, [pc, #528]	; (8002f68 <HAL_RCC_ClockConfig+0x240>)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d5e:	4b82      	ldr	r3, [pc, #520]	; (8002f68 <HAL_RCC_ClockConfig+0x240>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 030f 	and.w	r3, r3, #15
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d001      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e0f7      	b.n	8002f60 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 8089 	beq.w	8002e90 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b03      	cmp	r3, #3
 8002d84:	d133      	bne.n	8002dee <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d86:	4b79      	ldr	r3, [pc, #484]	; (8002f6c <HAL_RCC_ClockConfig+0x244>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e0e4      	b.n	8002f60 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002d96:	f000 fa0f 	bl	80031b8 <RCC_GetSysClockFreqFromPLLSource>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	4b74      	ldr	r3, [pc, #464]	; (8002f70 <HAL_RCC_ClockConfig+0x248>)
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d955      	bls.n	8002e4e <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002da2:	4b72      	ldr	r3, [pc, #456]	; (8002f6c <HAL_RCC_ClockConfig+0x244>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10a      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002dae:	4b6f      	ldr	r3, [pc, #444]	; (8002f6c <HAL_RCC_ClockConfig+0x244>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002db6:	4a6d      	ldr	r2, [pc, #436]	; (8002f6c <HAL_RCC_ClockConfig+0x244>)
 8002db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dbc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002dbe:	2380      	movs	r3, #128	; 0x80
 8002dc0:	617b      	str	r3, [r7, #20]
 8002dc2:	e044      	b.n	8002e4e <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d03e      	beq.n	8002e4e <HAL_RCC_ClockConfig+0x126>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d13a      	bne.n	8002e4e <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002dd8:	4b64      	ldr	r3, [pc, #400]	; (8002f6c <HAL_RCC_ClockConfig+0x244>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002de0:	4a62      	ldr	r2, [pc, #392]	; (8002f6c <HAL_RCC_ClockConfig+0x244>)
 8002de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002de6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002de8:	2380      	movs	r3, #128	; 0x80
 8002dea:	617b      	str	r3, [r7, #20]
 8002dec:	e02f      	b.n	8002e4e <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d107      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002df6:	4b5d      	ldr	r3, [pc, #372]	; (8002f6c <HAL_RCC_ClockConfig+0x244>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d115      	bne.n	8002e2e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e0ac      	b.n	8002f60 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d107      	bne.n	8002e1e <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e0e:	4b57      	ldr	r3, [pc, #348]	; (8002f6c <HAL_RCC_ClockConfig+0x244>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d109      	bne.n	8002e2e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e0a0      	b.n	8002f60 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e1e:	4b53      	ldr	r3, [pc, #332]	; (8002f6c <HAL_RCC_ClockConfig+0x244>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e098      	b.n	8002f60 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002e2e:	f000 f8a7 	bl	8002f80 <HAL_RCC_GetSysClockFreq>
 8002e32:	4602      	mov	r2, r0
 8002e34:	4b4e      	ldr	r3, [pc, #312]	; (8002f70 <HAL_RCC_ClockConfig+0x248>)
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d909      	bls.n	8002e4e <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e3a:	4b4c      	ldr	r3, [pc, #304]	; (8002f6c <HAL_RCC_ClockConfig+0x244>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e42:	4a4a      	ldr	r2, [pc, #296]	; (8002f6c <HAL_RCC_ClockConfig+0x244>)
 8002e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e48:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002e4a:	2380      	movs	r3, #128	; 0x80
 8002e4c:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e4e:	4b47      	ldr	r3, [pc, #284]	; (8002f6c <HAL_RCC_ClockConfig+0x244>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f023 0203 	bic.w	r2, r3, #3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	4944      	ldr	r1, [pc, #272]	; (8002f6c <HAL_RCC_ClockConfig+0x244>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e60:	f7fe fb3c 	bl	80014dc <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e66:	e00a      	b.n	8002e7e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e68:	f7fe fb38 	bl	80014dc <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e070      	b.n	8002f60 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7e:	4b3b      	ldr	r3, [pc, #236]	; (8002f6c <HAL_RCC_ClockConfig+0x244>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 020c 	and.w	r2, r3, #12
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d1eb      	bne.n	8002e68 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d009      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e9c:	4b33      	ldr	r3, [pc, #204]	; (8002f6c <HAL_RCC_ClockConfig+0x244>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	4930      	ldr	r1, [pc, #192]	; (8002f6c <HAL_RCC_ClockConfig+0x244>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	608b      	str	r3, [r1, #8]
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	2b80      	cmp	r3, #128	; 0x80
 8002eb4:	d105      	bne.n	8002ec2 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002eb6:	4b2d      	ldr	r3, [pc, #180]	; (8002f6c <HAL_RCC_ClockConfig+0x244>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	4a2c      	ldr	r2, [pc, #176]	; (8002f6c <HAL_RCC_ClockConfig+0x244>)
 8002ebc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ec0:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ec2:	4b29      	ldr	r3, [pc, #164]	; (8002f68 <HAL_RCC_ClockConfig+0x240>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d210      	bcs.n	8002ef2 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed0:	4b25      	ldr	r3, [pc, #148]	; (8002f68 <HAL_RCC_ClockConfig+0x240>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f023 020f 	bic.w	r2, r3, #15
 8002ed8:	4923      	ldr	r1, [pc, #140]	; (8002f68 <HAL_RCC_ClockConfig+0x240>)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee0:	4b21      	ldr	r3, [pc, #132]	; (8002f68 <HAL_RCC_ClockConfig+0x240>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 030f 	and.w	r3, r3, #15
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d001      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e036      	b.n	8002f60 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0304 	and.w	r3, r3, #4
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d008      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002efe:	4b1b      	ldr	r3, [pc, #108]	; (8002f6c <HAL_RCC_ClockConfig+0x244>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	4918      	ldr	r1, [pc, #96]	; (8002f6c <HAL_RCC_ClockConfig+0x244>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0308 	and.w	r3, r3, #8
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d009      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f1c:	4b13      	ldr	r3, [pc, #76]	; (8002f6c <HAL_RCC_ClockConfig+0x244>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	4910      	ldr	r1, [pc, #64]	; (8002f6c <HAL_RCC_ClockConfig+0x244>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f30:	f000 f826 	bl	8002f80 <HAL_RCC_GetSysClockFreq>
 8002f34:	4601      	mov	r1, r0
 8002f36:	4b0d      	ldr	r3, [pc, #52]	; (8002f6c <HAL_RCC_ClockConfig+0x244>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	091b      	lsrs	r3, r3, #4
 8002f3c:	f003 030f 	and.w	r3, r3, #15
 8002f40:	4a0c      	ldr	r2, [pc, #48]	; (8002f74 <HAL_RCC_ClockConfig+0x24c>)
 8002f42:	5cd3      	ldrb	r3, [r2, r3]
 8002f44:	f003 031f 	and.w	r3, r3, #31
 8002f48:	fa21 f303 	lsr.w	r3, r1, r3
 8002f4c:	4a0a      	ldr	r2, [pc, #40]	; (8002f78 <HAL_RCC_ClockConfig+0x250>)
 8002f4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f50:	4b0a      	ldr	r3, [pc, #40]	; (8002f7c <HAL_RCC_ClockConfig+0x254>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7fe fa71 	bl	800143c <HAL_InitTick>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	73fb      	strb	r3, [r7, #15]

  return status;
 8002f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3718      	adds	r7, #24
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40022000 	.word	0x40022000
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	04c4b400 	.word	0x04c4b400
 8002f74:	0801111c 	.word	0x0801111c
 8002f78:	20000000 	.word	0x20000000
 8002f7c:	20000004 	.word	0x20000004

08002f80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b089      	sub	sp, #36	; 0x24
 8002f84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61fb      	str	r3, [r7, #28]
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f8e:	4b3d      	ldr	r3, [pc, #244]	; (8003084 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 030c 	and.w	r3, r3, #12
 8002f96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f98:	4b3a      	ldr	r3, [pc, #232]	; (8003084 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	f003 0303 	and.w	r3, r3, #3
 8002fa0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d005      	beq.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x34>
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	2b0c      	cmp	r3, #12
 8002fac:	d121      	bne.n	8002ff2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d11e      	bne.n	8002ff2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fb4:	4b33      	ldr	r3, [pc, #204]	; (8003084 <HAL_RCC_GetSysClockFreq+0x104>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0308 	and.w	r3, r3, #8
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d107      	bne.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fc0:	4b30      	ldr	r3, [pc, #192]	; (8003084 <HAL_RCC_GetSysClockFreq+0x104>)
 8002fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fc6:	0a1b      	lsrs	r3, r3, #8
 8002fc8:	f003 030f 	and.w	r3, r3, #15
 8002fcc:	61fb      	str	r3, [r7, #28]
 8002fce:	e005      	b.n	8002fdc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002fd0:	4b2c      	ldr	r3, [pc, #176]	; (8003084 <HAL_RCC_GetSysClockFreq+0x104>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	091b      	lsrs	r3, r3, #4
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002fdc:	4a2a      	ldr	r2, [pc, #168]	; (8003088 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d10d      	bne.n	8003008 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ff0:	e00a      	b.n	8003008 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	2b04      	cmp	r3, #4
 8002ff6:	d102      	bne.n	8002ffe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ff8:	4b24      	ldr	r3, [pc, #144]	; (800308c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ffa:	61bb      	str	r3, [r7, #24]
 8002ffc:	e004      	b.n	8003008 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	2b08      	cmp	r3, #8
 8003002:	d101      	bne.n	8003008 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003004:	4b22      	ldr	r3, [pc, #136]	; (8003090 <HAL_RCC_GetSysClockFreq+0x110>)
 8003006:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	2b0c      	cmp	r3, #12
 800300c:	d133      	bne.n	8003076 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800300e:	4b1d      	ldr	r3, [pc, #116]	; (8003084 <HAL_RCC_GetSysClockFreq+0x104>)
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	2b02      	cmp	r3, #2
 800301c:	d002      	beq.n	8003024 <HAL_RCC_GetSysClockFreq+0xa4>
 800301e:	2b03      	cmp	r3, #3
 8003020:	d003      	beq.n	800302a <HAL_RCC_GetSysClockFreq+0xaa>
 8003022:	e005      	b.n	8003030 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003024:	4b19      	ldr	r3, [pc, #100]	; (800308c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003026:	617b      	str	r3, [r7, #20]
      break;
 8003028:	e005      	b.n	8003036 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800302a:	4b19      	ldr	r3, [pc, #100]	; (8003090 <HAL_RCC_GetSysClockFreq+0x110>)
 800302c:	617b      	str	r3, [r7, #20]
      break;
 800302e:	e002      	b.n	8003036 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	617b      	str	r3, [r7, #20]
      break;
 8003034:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003036:	4b13      	ldr	r3, [pc, #76]	; (8003084 <HAL_RCC_GetSysClockFreq+0x104>)
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	091b      	lsrs	r3, r3, #4
 800303c:	f003 030f 	and.w	r3, r3, #15
 8003040:	3301      	adds	r3, #1
 8003042:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003044:	4b0f      	ldr	r3, [pc, #60]	; (8003084 <HAL_RCC_GetSysClockFreq+0x104>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	0a1b      	lsrs	r3, r3, #8
 800304a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	fb02 f203 	mul.w	r2, r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	fbb2 f3f3 	udiv	r3, r2, r3
 800305a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800305c:	4b09      	ldr	r3, [pc, #36]	; (8003084 <HAL_RCC_GetSysClockFreq+0x104>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	0e5b      	lsrs	r3, r3, #25
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	3301      	adds	r3, #1
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	fbb2 f3f3 	udiv	r3, r2, r3
 8003074:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003076:	69bb      	ldr	r3, [r7, #24]
}
 8003078:	4618      	mov	r0, r3
 800307a:	3724      	adds	r7, #36	; 0x24
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	40021000 	.word	0x40021000
 8003088:	08011134 	.word	0x08011134
 800308c:	00f42400 	.word	0x00f42400
 8003090:	007a1200 	.word	0x007a1200

08003094 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003098:	4b03      	ldr	r3, [pc, #12]	; (80030a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800309a:	681b      	ldr	r3, [r3, #0]
}
 800309c:	4618      	mov	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	20000000 	.word	0x20000000

080030ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030b0:	f7ff fff0 	bl	8003094 <HAL_RCC_GetHCLKFreq>
 80030b4:	4601      	mov	r1, r0
 80030b6:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	0a1b      	lsrs	r3, r3, #8
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	4a04      	ldr	r2, [pc, #16]	; (80030d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030c2:	5cd3      	ldrb	r3, [r2, r3]
 80030c4:	f003 031f 	and.w	r3, r3, #31
 80030c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40021000 	.word	0x40021000
 80030d4:	0801112c 	.word	0x0801112c

080030d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80030dc:	f7ff ffda 	bl	8003094 <HAL_RCC_GetHCLKFreq>
 80030e0:	4601      	mov	r1, r0
 80030e2:	4b06      	ldr	r3, [pc, #24]	; (80030fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	0adb      	lsrs	r3, r3, #11
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	4a04      	ldr	r2, [pc, #16]	; (8003100 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030ee:	5cd3      	ldrb	r3, [r2, r3]
 80030f0:	f003 031f 	and.w	r3, r3, #31
 80030f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40021000 	.word	0x40021000
 8003100:	0801112c 	.word	0x0801112c

08003104 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800310c:	2300      	movs	r3, #0
 800310e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003110:	4b27      	ldr	r3, [pc, #156]	; (80031b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d003      	beq.n	8003124 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800311c:	f7ff f90a 	bl	8002334 <HAL_PWREx_GetVoltageRange>
 8003120:	6178      	str	r0, [r7, #20]
 8003122:	e014      	b.n	800314e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003124:	4b22      	ldr	r3, [pc, #136]	; (80031b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003128:	4a21      	ldr	r2, [pc, #132]	; (80031b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800312a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800312e:	6593      	str	r3, [r2, #88]	; 0x58
 8003130:	4b1f      	ldr	r3, [pc, #124]	; (80031b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003138:	60fb      	str	r3, [r7, #12]
 800313a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800313c:	f7ff f8fa 	bl	8002334 <HAL_PWREx_GetVoltageRange>
 8003140:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003142:	4b1b      	ldr	r3, [pc, #108]	; (80031b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003146:	4a1a      	ldr	r2, [pc, #104]	; (80031b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800314c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003154:	d10b      	bne.n	800316e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b80      	cmp	r3, #128	; 0x80
 800315a:	d913      	bls.n	8003184 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2ba0      	cmp	r3, #160	; 0xa0
 8003160:	d902      	bls.n	8003168 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003162:	2302      	movs	r3, #2
 8003164:	613b      	str	r3, [r7, #16]
 8003166:	e00d      	b.n	8003184 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003168:	2301      	movs	r3, #1
 800316a:	613b      	str	r3, [r7, #16]
 800316c:	e00a      	b.n	8003184 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b7f      	cmp	r3, #127	; 0x7f
 8003172:	d902      	bls.n	800317a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003174:	2302      	movs	r3, #2
 8003176:	613b      	str	r3, [r7, #16]
 8003178:	e004      	b.n	8003184 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b70      	cmp	r3, #112	; 0x70
 800317e:	d101      	bne.n	8003184 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003180:	2301      	movs	r3, #1
 8003182:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003184:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f023 020f 	bic.w	r2, r3, #15
 800318c:	4909      	ldr	r1, [pc, #36]	; (80031b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	4313      	orrs	r3, r2
 8003192:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003194:	4b07      	ldr	r3, [pc, #28]	; (80031b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 030f 	and.w	r3, r3, #15
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d001      	beq.n	80031a6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e000      	b.n	80031a8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3718      	adds	r7, #24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40021000 	.word	0x40021000
 80031b4:	40022000 	.word	0x40022000

080031b8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b087      	sub	sp, #28
 80031bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80031be:	2300      	movs	r3, #0
 80031c0:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80031c2:	4b2d      	ldr	r3, [pc, #180]	; (8003278 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d118      	bne.n	8003200 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031ce:	4b2a      	ldr	r3, [pc, #168]	; (8003278 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0308 	and.w	r3, r3, #8
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d107      	bne.n	80031ea <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80031da:	4b27      	ldr	r3, [pc, #156]	; (8003278 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80031dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031e0:	0a1b      	lsrs	r3, r3, #8
 80031e2:	f003 030f 	and.w	r3, r3, #15
 80031e6:	617b      	str	r3, [r7, #20]
 80031e8:	e005      	b.n	80031f6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80031ea:	4b23      	ldr	r3, [pc, #140]	; (8003278 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	091b      	lsrs	r3, r3, #4
 80031f0:	f003 030f 	and.w	r3, r3, #15
 80031f4:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80031f6:	4a21      	ldr	r2, [pc, #132]	; (800327c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031fe:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003200:	4b1d      	ldr	r3, [pc, #116]	; (8003278 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	f003 0303 	and.w	r3, r3, #3
 8003208:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2b02      	cmp	r3, #2
 800320e:	d002      	beq.n	8003216 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8003210:	2b03      	cmp	r3, #3
 8003212:	d003      	beq.n	800321c <RCC_GetSysClockFreqFromPLLSource+0x64>
 8003214:	e005      	b.n	8003222 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003216:	4b1a      	ldr	r3, [pc, #104]	; (8003280 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003218:	613b      	str	r3, [r7, #16]
    break;
 800321a:	e005      	b.n	8003228 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800321c:	4b19      	ldr	r3, [pc, #100]	; (8003284 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800321e:	613b      	str	r3, [r7, #16]
    break;
 8003220:	e002      	b.n	8003228 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	613b      	str	r3, [r7, #16]
    break;
 8003226:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003228:	4b13      	ldr	r3, [pc, #76]	; (8003278 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	091b      	lsrs	r3, r3, #4
 800322e:	f003 030f 	and.w	r3, r3, #15
 8003232:	3301      	adds	r3, #1
 8003234:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003236:	4b10      	ldr	r3, [pc, #64]	; (8003278 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	0a1b      	lsrs	r3, r3, #8
 800323c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	fb02 f203 	mul.w	r2, r2, r3
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	fbb2 f3f3 	udiv	r3, r2, r3
 800324c:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800324e:	4b0a      	ldr	r3, [pc, #40]	; (8003278 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	0e5b      	lsrs	r3, r3, #25
 8003254:	f003 0303 	and.w	r3, r3, #3
 8003258:	3301      	adds	r3, #1
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	fbb2 f3f3 	udiv	r3, r2, r3
 8003266:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003268:	683b      	ldr	r3, [r7, #0]
}
 800326a:	4618      	mov	r0, r3
 800326c:	371c      	adds	r7, #28
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	40021000 	.word	0x40021000
 800327c:	08011134 	.word	0x08011134
 8003280:	00f42400 	.word	0x00f42400
 8003284:	007a1200 	.word	0x007a1200

08003288 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003290:	2300      	movs	r3, #0
 8003292:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003294:	2300      	movs	r3, #0
 8003296:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d03d      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032a8:	2b40      	cmp	r3, #64	; 0x40
 80032aa:	d00b      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80032ac:	2b40      	cmp	r3, #64	; 0x40
 80032ae:	d804      	bhi.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x32>
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00e      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80032b4:	2b20      	cmp	r3, #32
 80032b6:	d015      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80032b8:	e01d      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80032ba:	2b60      	cmp	r3, #96	; 0x60
 80032bc:	d01e      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x74>
 80032be:	2b80      	cmp	r3, #128	; 0x80
 80032c0:	d01c      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x74>
 80032c2:	e018      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032c4:	4b86      	ldr	r3, [pc, #536]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	4a85      	ldr	r2, [pc, #532]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032d0:	e015      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	3304      	adds	r3, #4
 80032d6:	2100      	movs	r1, #0
 80032d8:	4618      	mov	r0, r3
 80032da:	f000 fb0d 	bl	80038f8 <RCCEx_PLLSAI1_Config>
 80032de:	4603      	mov	r3, r0
 80032e0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032e2:	e00c      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3320      	adds	r3, #32
 80032e8:	2100      	movs	r1, #0
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 fbf4 	bl	8003ad8 <RCCEx_PLLSAI2_Config>
 80032f0:	4603      	mov	r3, r0
 80032f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032f4:	e003      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	74fb      	strb	r3, [r7, #19]
      break;
 80032fa:	e000      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 80032fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032fe:	7cfb      	ldrb	r3, [r7, #19]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10b      	bne.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003304:	4b76      	ldr	r3, [pc, #472]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003306:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800330a:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003312:	4973      	ldr	r1, [pc, #460]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003314:	4313      	orrs	r3, r2
 8003316:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800331a:	e001      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800331c:	7cfb      	ldrb	r3, [r7, #19]
 800331e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d042      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003330:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003334:	d00f      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8003336:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800333a:	d805      	bhi.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 800333c:	2b00      	cmp	r3, #0
 800333e:	d011      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003340:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003344:	d017      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8003346:	e01f      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003348:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800334c:	d01f      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x106>
 800334e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003352:	d01c      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003354:	e018      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003356:	4b62      	ldr	r3, [pc, #392]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	4a61      	ldr	r2, [pc, #388]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800335c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003360:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003362:	e015      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3304      	adds	r3, #4
 8003368:	2100      	movs	r1, #0
 800336a:	4618      	mov	r0, r3
 800336c:	f000 fac4 	bl	80038f8 <RCCEx_PLLSAI1_Config>
 8003370:	4603      	mov	r3, r0
 8003372:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003374:	e00c      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	3320      	adds	r3, #32
 800337a:	2100      	movs	r1, #0
 800337c:	4618      	mov	r0, r3
 800337e:	f000 fbab 	bl	8003ad8 <RCCEx_PLLSAI2_Config>
 8003382:	4603      	mov	r3, r0
 8003384:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003386:	e003      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	74fb      	strb	r3, [r7, #19]
      break;
 800338c:	e000      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 800338e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003390:	7cfb      	ldrb	r3, [r7, #19]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10b      	bne.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003396:	4b52      	ldr	r3, [pc, #328]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003398:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800339c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a4:	494e      	ldr	r1, [pc, #312]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80033ac:	e001      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ae:	7cfb      	ldrb	r3, [r7, #19]
 80033b0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f000 809f 	beq.w	80034fe <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033c0:	2300      	movs	r3, #0
 80033c2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033c4:	4b46      	ldr	r3, [pc, #280]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80033d0:	2301      	movs	r3, #1
 80033d2:	e000      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80033d4:	2300      	movs	r3, #0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00d      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033da:	4b41      	ldr	r3, [pc, #260]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033de:	4a40      	ldr	r2, [pc, #256]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033e4:	6593      	str	r3, [r2, #88]	; 0x58
 80033e6:	4b3e      	ldr	r3, [pc, #248]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ee:	60bb      	str	r3, [r7, #8]
 80033f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033f2:	2301      	movs	r3, #1
 80033f4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033f6:	4b3b      	ldr	r3, [pc, #236]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a3a      	ldr	r2, [pc, #232]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80033fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003400:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003402:	f7fe f86b 	bl	80014dc <HAL_GetTick>
 8003406:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003408:	e009      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800340a:	f7fe f867 	bl	80014dc <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d902      	bls.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	74fb      	strb	r3, [r7, #19]
        break;
 800341c:	e005      	b.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800341e:	4b31      	ldr	r3, [pc, #196]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0ef      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 800342a:	7cfb      	ldrb	r3, [r7, #19]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d15b      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003430:	4b2b      	ldr	r3, [pc, #172]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800343a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d01f      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	429a      	cmp	r2, r3
 800344c:	d019      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800344e:	4b24      	ldr	r3, [pc, #144]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003458:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800345a:	4b21      	ldr	r3, [pc, #132]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800345c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003460:	4a1f      	ldr	r2, [pc, #124]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003462:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003466:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800346a:	4b1d      	ldr	r3, [pc, #116]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800346c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003470:	4a1b      	ldr	r2, [pc, #108]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003476:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800347a:	4a19      	ldr	r2, [pc, #100]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	2b00      	cmp	r3, #0
 800348a:	d016      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348c:	f7fe f826 	bl	80014dc <HAL_GetTick>
 8003490:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003492:	e00b      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003494:	f7fe f822 	bl	80014dc <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d902      	bls.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	74fb      	strb	r3, [r7, #19]
            break;
 80034aa:	e006      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ac:	4b0c      	ldr	r3, [pc, #48]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0ec      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 80034ba:	7cfb      	ldrb	r3, [r7, #19]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10c      	bne.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034c0:	4b07      	ldr	r3, [pc, #28]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d0:	4903      	ldr	r1, [pc, #12]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80034d8:	e008      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034da:	7cfb      	ldrb	r3, [r7, #19]
 80034dc:	74bb      	strb	r3, [r7, #18]
 80034de:	e005      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x264>
 80034e0:	40021000 	.word	0x40021000
 80034e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034e8:	7cfb      	ldrb	r3, [r7, #19]
 80034ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034ec:	7c7b      	ldrb	r3, [r7, #17]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d105      	bne.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034f2:	4ba0      	ldr	r3, [pc, #640]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f6:	4a9f      	ldr	r2, [pc, #636]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00a      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800350a:	4b9a      	ldr	r3, [pc, #616]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003510:	f023 0203 	bic.w	r2, r3, #3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003518:	4996      	ldr	r1, [pc, #600]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351a:	4313      	orrs	r3, r2
 800351c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00a      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800352c:	4b91      	ldr	r3, [pc, #580]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003532:	f023 020c 	bic.w	r2, r3, #12
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	498e      	ldr	r1, [pc, #568]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800353c:	4313      	orrs	r3, r2
 800353e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0304 	and.w	r3, r3, #4
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00a      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800354e:	4b89      	ldr	r3, [pc, #548]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003554:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355c:	4985      	ldr	r1, [pc, #532]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800355e:	4313      	orrs	r3, r2
 8003560:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0308 	and.w	r3, r3, #8
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00a      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003570:	4b80      	ldr	r3, [pc, #512]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003576:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800357e:	497d      	ldr	r1, [pc, #500]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0310 	and.w	r3, r3, #16
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003592:	4b78      	ldr	r3, [pc, #480]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003598:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035a0:	4974      	ldr	r1, [pc, #464]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0320 	and.w	r3, r3, #32
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00a      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035b4:	4b6f      	ldr	r3, [pc, #444]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c2:	496c      	ldr	r1, [pc, #432]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00a      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035d6:	4b67      	ldr	r3, [pc, #412]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035e4:	4963      	ldr	r1, [pc, #396]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00a      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035f8:	4b5e      	ldr	r3, [pc, #376]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003606:	495b      	ldr	r1, [pc, #364]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003608:	4313      	orrs	r3, r2
 800360a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00a      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800361a:	4b56      	ldr	r3, [pc, #344]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003620:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003628:	4952      	ldr	r1, [pc, #328]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800362a:	4313      	orrs	r3, r2
 800362c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00a      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800363c:	4b4d      	ldr	r3, [pc, #308]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003642:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364a:	494a      	ldr	r1, [pc, #296]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800364c:	4313      	orrs	r3, r2
 800364e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00a      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800365e:	4b45      	ldr	r3, [pc, #276]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003664:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366c:	4941      	ldr	r1, [pc, #260]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800366e:	4313      	orrs	r3, r2
 8003670:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00a      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003680:	4b3c      	ldr	r3, [pc, #240]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003682:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003686:	f023 0203 	bic.w	r2, r3, #3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800368e:	4939      	ldr	r1, [pc, #228]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003690:	4313      	orrs	r3, r2
 8003692:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d028      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036a2:	4b34      	ldr	r3, [pc, #208]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036b0:	4930      	ldr	r1, [pc, #192]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036c0:	d106      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036c2:	4b2c      	ldr	r3, [pc, #176]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	4a2b      	ldr	r2, [pc, #172]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036cc:	60d3      	str	r3, [r2, #12]
 80036ce:	e011      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036d8:	d10c      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	3304      	adds	r3, #4
 80036de:	2101      	movs	r1, #1
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 f909 	bl	80038f8 <RCCEx_PLLSAI1_Config>
 80036e6:	4603      	mov	r3, r0
 80036e8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80036ea:	7cfb      	ldrb	r3, [r7, #19]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 80036f0:	7cfb      	ldrb	r3, [r7, #19]
 80036f2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d04d      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003704:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003708:	d108      	bne.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x494>
 800370a:	4b1a      	ldr	r3, [pc, #104]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800370c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003710:	4a18      	ldr	r2, [pc, #96]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003712:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003716:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800371a:	e012      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800371c:	4b15      	ldr	r3, [pc, #84]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800371e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003722:	4a14      	ldr	r2, [pc, #80]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003724:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003728:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800372c:	4b11      	ldr	r3, [pc, #68]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003732:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800373a:	490e      	ldr	r1, [pc, #56]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800373c:	4313      	orrs	r3, r2
 800373e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800374a:	d106      	bne.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800374c:	4b09      	ldr	r3, [pc, #36]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	4a08      	ldr	r2, [pc, #32]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003756:	60d3      	str	r3, [r2, #12]
 8003758:	e020      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800375e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003762:	d109      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003764:	4b03      	ldr	r3, [pc, #12]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	4a02      	ldr	r2, [pc, #8]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800376a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800376e:	60d3      	str	r3, [r2, #12]
 8003770:	e014      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003772:	bf00      	nop
 8003774:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800377c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003780:	d10c      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	3304      	adds	r3, #4
 8003786:	2101      	movs	r1, #1
 8003788:	4618      	mov	r0, r3
 800378a:	f000 f8b5 	bl	80038f8 <RCCEx_PLLSAI1_Config>
 800378e:	4603      	mov	r3, r0
 8003790:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003792:	7cfb      	ldrb	r3, [r7, #19]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003798:	7cfb      	ldrb	r3, [r7, #19]
 800379a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d028      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037a8:	4b4a      	ldr	r3, [pc, #296]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80037aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037b6:	4947      	ldr	r1, [pc, #284]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037c6:	d106      	bne.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037c8:	4b42      	ldr	r3, [pc, #264]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	4a41      	ldr	r2, [pc, #260]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80037ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037d2:	60d3      	str	r3, [r2, #12]
 80037d4:	e011      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037de:	d10c      	bne.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3304      	adds	r3, #4
 80037e4:	2101      	movs	r1, #1
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 f886 	bl	80038f8 <RCCEx_PLLSAI1_Config>
 80037ec:	4603      	mov	r3, r0
 80037ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037f0:	7cfb      	ldrb	r3, [r7, #19]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 80037f6:	7cfb      	ldrb	r3, [r7, #19]
 80037f8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d01e      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003806:	4b33      	ldr	r3, [pc, #204]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003816:	492f      	ldr	r1, [pc, #188]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003818:	4313      	orrs	r3, r2
 800381a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003824:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003828:	d10c      	bne.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	3304      	adds	r3, #4
 800382e:	2102      	movs	r1, #2
 8003830:	4618      	mov	r0, r3
 8003832:	f000 f861 	bl	80038f8 <RCCEx_PLLSAI1_Config>
 8003836:	4603      	mov	r3, r0
 8003838:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800383a:	7cfb      	ldrb	r3, [r7, #19]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8003840:	7cfb      	ldrb	r3, [r7, #19]
 8003842:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00b      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003850:	4b20      	ldr	r3, [pc, #128]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003852:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003856:	f023 0204 	bic.w	r2, r3, #4
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003860:	491c      	ldr	r1, [pc, #112]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003862:	4313      	orrs	r3, r2
 8003864:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00b      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003874:	4b17      	ldr	r3, [pc, #92]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003876:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800387a:	f023 0218 	bic.w	r2, r3, #24
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003884:	4913      	ldr	r1, [pc, #76]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003886:	4313      	orrs	r3, r2
 8003888:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d017      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003898:	4b0e      	ldr	r3, [pc, #56]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800389a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800389e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038a8:	490a      	ldr	r1, [pc, #40]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038ba:	d105      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038bc:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	4a04      	ldr	r2, [pc, #16]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80038c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038c6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80038c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3718      	adds	r7, #24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40021000 	.word	0x40021000

080038d8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80038dc:	4b05      	ldr	r3, [pc, #20]	; (80038f4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a04      	ldr	r2, [pc, #16]	; (80038f4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80038e2:	f043 0304 	orr.w	r3, r3, #4
 80038e6:	6013      	str	r3, [r2, #0]
}
 80038e8:	bf00      	nop
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	40021000 	.word	0x40021000

080038f8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003902:	2300      	movs	r3, #0
 8003904:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003906:	4b70      	ldr	r3, [pc, #448]	; (8003ac8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	f003 0303 	and.w	r3, r3, #3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00e      	beq.n	8003930 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003912:	4b6d      	ldr	r3, [pc, #436]	; (8003ac8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	f003 0203 	and.w	r2, r3, #3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	429a      	cmp	r2, r3
 8003920:	d103      	bne.n	800392a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
       ||
 8003926:	2b00      	cmp	r3, #0
 8003928:	d13f      	bne.n	80039aa <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	73fb      	strb	r3, [r7, #15]
 800392e:	e03c      	b.n	80039aa <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b02      	cmp	r3, #2
 8003936:	d00c      	beq.n	8003952 <RCCEx_PLLSAI1_Config+0x5a>
 8003938:	2b03      	cmp	r3, #3
 800393a:	d013      	beq.n	8003964 <RCCEx_PLLSAI1_Config+0x6c>
 800393c:	2b01      	cmp	r3, #1
 800393e:	d120      	bne.n	8003982 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003940:	4b61      	ldr	r3, [pc, #388]	; (8003ac8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d11d      	bne.n	8003988 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003950:	e01a      	b.n	8003988 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003952:	4b5d      	ldr	r3, [pc, #372]	; (8003ac8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800395a:	2b00      	cmp	r3, #0
 800395c:	d116      	bne.n	800398c <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003962:	e013      	b.n	800398c <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003964:	4b58      	ldr	r3, [pc, #352]	; (8003ac8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10f      	bne.n	8003990 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003970:	4b55      	ldr	r3, [pc, #340]	; (8003ac8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d109      	bne.n	8003990 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003980:	e006      	b.n	8003990 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	73fb      	strb	r3, [r7, #15]
      break;
 8003986:	e004      	b.n	8003992 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003988:	bf00      	nop
 800398a:	e002      	b.n	8003992 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 800398c:	bf00      	nop
 800398e:	e000      	b.n	8003992 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003990:	bf00      	nop
    }

    if(status == HAL_OK)
 8003992:	7bfb      	ldrb	r3, [r7, #15]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d108      	bne.n	80039aa <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003998:	4b4b      	ldr	r3, [pc, #300]	; (8003ac8 <RCCEx_PLLSAI1_Config+0x1d0>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f023 0203 	bic.w	r2, r3, #3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4948      	ldr	r1, [pc, #288]	; (8003ac8 <RCCEx_PLLSAI1_Config+0x1d0>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80039aa:	7bfb      	ldrb	r3, [r7, #15]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f040 8086 	bne.w	8003abe <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80039b2:	4b45      	ldr	r3, [pc, #276]	; (8003ac8 <RCCEx_PLLSAI1_Config+0x1d0>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a44      	ldr	r2, [pc, #272]	; (8003ac8 <RCCEx_PLLSAI1_Config+0x1d0>)
 80039b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039be:	f7fd fd8d 	bl	80014dc <HAL_GetTick>
 80039c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039c4:	e009      	b.n	80039da <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039c6:	f7fd fd89 	bl	80014dc <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d902      	bls.n	80039da <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	73fb      	strb	r3, [r7, #15]
        break;
 80039d8:	e005      	b.n	80039e6 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039da:	4b3b      	ldr	r3, [pc, #236]	; (8003ac8 <RCCEx_PLLSAI1_Config+0x1d0>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1ef      	bne.n	80039c6 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80039e6:	7bfb      	ldrb	r3, [r7, #15]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d168      	bne.n	8003abe <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d113      	bne.n	8003a1a <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039f2:	4b35      	ldr	r3, [pc, #212]	; (8003ac8 <RCCEx_PLLSAI1_Config+0x1d0>)
 80039f4:	691a      	ldr	r2, [r3, #16]
 80039f6:	4b35      	ldr	r3, [pc, #212]	; (8003acc <RCCEx_PLLSAI1_Config+0x1d4>)
 80039f8:	4013      	ands	r3, r2
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6892      	ldr	r2, [r2, #8]
 80039fe:	0211      	lsls	r1, r2, #8
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	68d2      	ldr	r2, [r2, #12]
 8003a04:	06d2      	lsls	r2, r2, #27
 8003a06:	4311      	orrs	r1, r2
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6852      	ldr	r2, [r2, #4]
 8003a0c:	3a01      	subs	r2, #1
 8003a0e:	0112      	lsls	r2, r2, #4
 8003a10:	430a      	orrs	r2, r1
 8003a12:	492d      	ldr	r1, [pc, #180]	; (8003ac8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	610b      	str	r3, [r1, #16]
 8003a18:	e02d      	b.n	8003a76 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d115      	bne.n	8003a4c <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a20:	4b29      	ldr	r3, [pc, #164]	; (8003ac8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a22:	691a      	ldr	r2, [r3, #16]
 8003a24:	4b2a      	ldr	r3, [pc, #168]	; (8003ad0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a26:	4013      	ands	r3, r2
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6892      	ldr	r2, [r2, #8]
 8003a2c:	0211      	lsls	r1, r2, #8
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6912      	ldr	r2, [r2, #16]
 8003a32:	0852      	lsrs	r2, r2, #1
 8003a34:	3a01      	subs	r2, #1
 8003a36:	0552      	lsls	r2, r2, #21
 8003a38:	4311      	orrs	r1, r2
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6852      	ldr	r2, [r2, #4]
 8003a3e:	3a01      	subs	r2, #1
 8003a40:	0112      	lsls	r2, r2, #4
 8003a42:	430a      	orrs	r2, r1
 8003a44:	4920      	ldr	r1, [pc, #128]	; (8003ac8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	610b      	str	r3, [r1, #16]
 8003a4a:	e014      	b.n	8003a76 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a4c:	4b1e      	ldr	r3, [pc, #120]	; (8003ac8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a4e:	691a      	ldr	r2, [r3, #16]
 8003a50:	4b20      	ldr	r3, [pc, #128]	; (8003ad4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a52:	4013      	ands	r3, r2
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6892      	ldr	r2, [r2, #8]
 8003a58:	0211      	lsls	r1, r2, #8
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6952      	ldr	r2, [r2, #20]
 8003a5e:	0852      	lsrs	r2, r2, #1
 8003a60:	3a01      	subs	r2, #1
 8003a62:	0652      	lsls	r2, r2, #25
 8003a64:	4311      	orrs	r1, r2
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	6852      	ldr	r2, [r2, #4]
 8003a6a:	3a01      	subs	r2, #1
 8003a6c:	0112      	lsls	r2, r2, #4
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	4915      	ldr	r1, [pc, #84]	; (8003ac8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a76:	4b14      	ldr	r3, [pc, #80]	; (8003ac8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a13      	ldr	r2, [pc, #76]	; (8003ac8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a80:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a82:	f7fd fd2b 	bl	80014dc <HAL_GetTick>
 8003a86:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a88:	e009      	b.n	8003a9e <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a8a:	f7fd fd27 	bl	80014dc <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d902      	bls.n	8003a9e <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	73fb      	strb	r3, [r7, #15]
          break;
 8003a9c:	e005      	b.n	8003aaa <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a9e:	4b0a      	ldr	r3, [pc, #40]	; (8003ac8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0ef      	beq.n	8003a8a <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003aaa:	7bfb      	ldrb	r3, [r7, #15]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d106      	bne.n	8003abe <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003ab0:	4b05      	ldr	r3, [pc, #20]	; (8003ac8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003ab2:	691a      	ldr	r2, [r3, #16]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	4903      	ldr	r1, [pc, #12]	; (8003ac8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	07ff800f 	.word	0x07ff800f
 8003ad0:	ff9f800f 	.word	0xff9f800f
 8003ad4:	f9ff800f 	.word	0xf9ff800f

08003ad8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ae6:	4b70      	ldr	r3, [pc, #448]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00e      	beq.n	8003b10 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003af2:	4b6d      	ldr	r3, [pc, #436]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	f003 0203 	and.w	r2, r3, #3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d103      	bne.n	8003b0a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
       ||
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d13f      	bne.n	8003b8a <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	73fb      	strb	r3, [r7, #15]
 8003b0e:	e03c      	b.n	8003b8a <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d00c      	beq.n	8003b32 <RCCEx_PLLSAI2_Config+0x5a>
 8003b18:	2b03      	cmp	r3, #3
 8003b1a:	d013      	beq.n	8003b44 <RCCEx_PLLSAI2_Config+0x6c>
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d120      	bne.n	8003b62 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b20:	4b61      	ldr	r3, [pc, #388]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d11d      	bne.n	8003b68 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b30:	e01a      	b.n	8003b68 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b32:	4b5d      	ldr	r3, [pc, #372]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d116      	bne.n	8003b6c <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b42:	e013      	b.n	8003b6c <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b44:	4b58      	ldr	r3, [pc, #352]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10f      	bne.n	8003b70 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b50:	4b55      	ldr	r3, [pc, #340]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d109      	bne.n	8003b70 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b60:	e006      	b.n	8003b70 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	73fb      	strb	r3, [r7, #15]
      break;
 8003b66:	e004      	b.n	8003b72 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003b68:	bf00      	nop
 8003b6a:	e002      	b.n	8003b72 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003b6c:	bf00      	nop
 8003b6e:	e000      	b.n	8003b72 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003b70:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b72:	7bfb      	ldrb	r3, [r7, #15]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d108      	bne.n	8003b8a <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003b78:	4b4b      	ldr	r3, [pc, #300]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f023 0203 	bic.w	r2, r3, #3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4948      	ldr	r1, [pc, #288]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003b8a:	7bfb      	ldrb	r3, [r7, #15]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f040 8086 	bne.w	8003c9e <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b92:	4b45      	ldr	r3, [pc, #276]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a44      	ldr	r2, [pc, #272]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b9e:	f7fd fc9d 	bl	80014dc <HAL_GetTick>
 8003ba2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ba4:	e009      	b.n	8003bba <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ba6:	f7fd fc99 	bl	80014dc <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d902      	bls.n	8003bba <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	73fb      	strb	r3, [r7, #15]
        break;
 8003bb8:	e005      	b.n	8003bc6 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003bba:	4b3b      	ldr	r3, [pc, #236]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1ef      	bne.n	8003ba6 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003bc6:	7bfb      	ldrb	r3, [r7, #15]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d168      	bne.n	8003c9e <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d113      	bne.n	8003bfa <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003bd2:	4b35      	ldr	r3, [pc, #212]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003bd4:	695a      	ldr	r2, [r3, #20]
 8003bd6:	4b35      	ldr	r3, [pc, #212]	; (8003cac <RCCEx_PLLSAI2_Config+0x1d4>)
 8003bd8:	4013      	ands	r3, r2
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6892      	ldr	r2, [r2, #8]
 8003bde:	0211      	lsls	r1, r2, #8
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	68d2      	ldr	r2, [r2, #12]
 8003be4:	06d2      	lsls	r2, r2, #27
 8003be6:	4311      	orrs	r1, r2
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	6852      	ldr	r2, [r2, #4]
 8003bec:	3a01      	subs	r2, #1
 8003bee:	0112      	lsls	r2, r2, #4
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	492d      	ldr	r1, [pc, #180]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	614b      	str	r3, [r1, #20]
 8003bf8:	e02d      	b.n	8003c56 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d115      	bne.n	8003c2c <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c00:	4b29      	ldr	r3, [pc, #164]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c02:	695a      	ldr	r2, [r3, #20]
 8003c04:	4b2a      	ldr	r3, [pc, #168]	; (8003cb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c06:	4013      	ands	r3, r2
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6892      	ldr	r2, [r2, #8]
 8003c0c:	0211      	lsls	r1, r2, #8
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6912      	ldr	r2, [r2, #16]
 8003c12:	0852      	lsrs	r2, r2, #1
 8003c14:	3a01      	subs	r2, #1
 8003c16:	0552      	lsls	r2, r2, #21
 8003c18:	4311      	orrs	r1, r2
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6852      	ldr	r2, [r2, #4]
 8003c1e:	3a01      	subs	r2, #1
 8003c20:	0112      	lsls	r2, r2, #4
 8003c22:	430a      	orrs	r2, r1
 8003c24:	4920      	ldr	r1, [pc, #128]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	614b      	str	r3, [r1, #20]
 8003c2a:	e014      	b.n	8003c56 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c2c:	4b1e      	ldr	r3, [pc, #120]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c2e:	695a      	ldr	r2, [r3, #20]
 8003c30:	4b20      	ldr	r3, [pc, #128]	; (8003cb4 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003c32:	4013      	ands	r3, r2
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	6892      	ldr	r2, [r2, #8]
 8003c38:	0211      	lsls	r1, r2, #8
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6952      	ldr	r2, [r2, #20]
 8003c3e:	0852      	lsrs	r2, r2, #1
 8003c40:	3a01      	subs	r2, #1
 8003c42:	0652      	lsls	r2, r2, #25
 8003c44:	4311      	orrs	r1, r2
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	6852      	ldr	r2, [r2, #4]
 8003c4a:	3a01      	subs	r2, #1
 8003c4c:	0112      	lsls	r2, r2, #4
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	4915      	ldr	r1, [pc, #84]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003c56:	4b14      	ldr	r3, [pc, #80]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a13      	ldr	r2, [pc, #76]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c60:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c62:	f7fd fc3b 	bl	80014dc <HAL_GetTick>
 8003c66:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c68:	e009      	b.n	8003c7e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c6a:	f7fd fc37 	bl	80014dc <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d902      	bls.n	8003c7e <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	73fb      	strb	r3, [r7, #15]
          break;
 8003c7c:	e005      	b.n	8003c8a <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0ef      	beq.n	8003c6a <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003c8a:	7bfb      	ldrb	r3, [r7, #15]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d106      	bne.n	8003c9e <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003c90:	4b05      	ldr	r3, [pc, #20]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c92:	695a      	ldr	r2, [r3, #20]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	4903      	ldr	r1, [pc, #12]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	07ff800f 	.word	0x07ff800f
 8003cb0:	ff9f800f 	.word	0xff9f800f
 8003cb4:	f9ff800f 	.word	0xf9ff800f

08003cb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e042      	b.n	8003d50 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d106      	bne.n	8003ce2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f7fd f9db 	bl	8001098 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2224      	movs	r2, #36	; 0x24
 8003ce6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 0201 	bic.w	r2, r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f994 	bl	8004028 <UART_SetConfig>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d101      	bne.n	8003d0a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e022      	b.n	8003d50 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d002      	beq.n	8003d18 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 fc5a 	bl	80045cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689a      	ldr	r2, [r3, #8]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0201 	orr.w	r2, r2, #1
 8003d46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 fce1 	bl	8004710 <UART_CheckIdleState>
 8003d4e:	4603      	mov	r3, r0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b08a      	sub	sp, #40	; 0x28
 8003d5c:	af02      	add	r7, sp, #8
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	603b      	str	r3, [r7, #0]
 8003d64:	4613      	mov	r3, r2
 8003d66:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d6e:	2b20      	cmp	r3, #32
 8003d70:	f040 8084 	bne.w	8003e7c <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <HAL_UART_Transmit+0x28>
 8003d7a:	88fb      	ldrh	r3, [r7, #6]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e07c      	b.n	8003e7e <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d101      	bne.n	8003d92 <HAL_UART_Transmit+0x3a>
 8003d8e:	2302      	movs	r3, #2
 8003d90:	e075      	b.n	8003e7e <HAL_UART_Transmit+0x126>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2221      	movs	r2, #33	; 0x21
 8003da6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003daa:	f7fd fb97 	bl	80014dc <HAL_GetTick>
 8003dae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	88fa      	ldrh	r2, [r7, #6]
 8003db4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	88fa      	ldrh	r2, [r7, #6]
 8003dbc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc8:	d108      	bne.n	8003ddc <HAL_UART_Transmit+0x84>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d104      	bne.n	8003ddc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	61bb      	str	r3, [r7, #24]
 8003dda:	e003      	b.n	8003de4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003de0:	2300      	movs	r3, #0
 8003de2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8003dec:	e02d      	b.n	8003e4a <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	2200      	movs	r2, #0
 8003df6:	2180      	movs	r1, #128	; 0x80
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f000 fcd1 	bl	80047a0 <UART_WaitOnFlagUntilTimeout>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d001      	beq.n	8003e08 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e03a      	b.n	8003e7e <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10b      	bne.n	8003e26 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	881a      	ldrh	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e1a:	b292      	uxth	r2, r2
 8003e1c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	3302      	adds	r3, #2
 8003e22:	61bb      	str	r3, [r7, #24]
 8003e24:	e008      	b.n	8003e38 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	781a      	ldrb	r2, [r3, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	b292      	uxth	r2, r2
 8003e30:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	3301      	adds	r3, #1
 8003e36:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	3b01      	subs	r3, #1
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1cb      	bne.n	8003dee <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	2140      	movs	r1, #64	; 0x40
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f000 fc9d 	bl	80047a0 <UART_WaitOnFlagUntilTimeout>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e006      	b.n	8003e7e <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	e000      	b.n	8003e7e <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003e7c:	2302      	movs	r3, #2
  }
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3720      	adds	r7, #32
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b08a      	sub	sp, #40	; 0x28
 8003e8a:	af02      	add	r7, sp, #8
 8003e8c:	60f8      	str	r0, [r7, #12]
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	603b      	str	r3, [r7, #0]
 8003e92:	4613      	mov	r3, r2
 8003e94:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e9c:	2b20      	cmp	r3, #32
 8003e9e:	f040 80be 	bne.w	800401e <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d002      	beq.n	8003eae <HAL_UART_Receive+0x28>
 8003ea8:	88fb      	ldrh	r3, [r7, #6]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e0b6      	b.n	8004020 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d101      	bne.n	8003ec0 <HAL_UART_Receive+0x3a>
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	e0af      	b.n	8004020 <HAL_UART_Receive+0x19a>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2222      	movs	r2, #34	; 0x22
 8003ed4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003ed8:	f7fd fb00 	bl	80014dc <HAL_GetTick>
 8003edc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	88fa      	ldrh	r2, [r7, #6]
 8003ee2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	88fa      	ldrh	r2, [r7, #6]
 8003eea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ef6:	d10e      	bne.n	8003f16 <HAL_UART_Receive+0x90>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d105      	bne.n	8003f0c <HAL_UART_Receive+0x86>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003f06:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f0a:	e02d      	b.n	8003f68 <HAL_UART_Receive+0xe2>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	22ff      	movs	r2, #255	; 0xff
 8003f10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f14:	e028      	b.n	8003f68 <HAL_UART_Receive+0xe2>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10d      	bne.n	8003f3a <HAL_UART_Receive+0xb4>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d104      	bne.n	8003f30 <HAL_UART_Receive+0xaa>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	22ff      	movs	r2, #255	; 0xff
 8003f2a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f2e:	e01b      	b.n	8003f68 <HAL_UART_Receive+0xe2>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	227f      	movs	r2, #127	; 0x7f
 8003f34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f38:	e016      	b.n	8003f68 <HAL_UART_Receive+0xe2>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f42:	d10d      	bne.n	8003f60 <HAL_UART_Receive+0xda>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d104      	bne.n	8003f56 <HAL_UART_Receive+0xd0>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	227f      	movs	r2, #127	; 0x7f
 8003f50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f54:	e008      	b.n	8003f68 <HAL_UART_Receive+0xe2>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	223f      	movs	r2, #63	; 0x3f
 8003f5a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f5e:	e003      	b.n	8003f68 <HAL_UART_Receive+0xe2>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003f6e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f78:	d108      	bne.n	8003f8c <HAL_UART_Receive+0x106>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d104      	bne.n	8003f8c <HAL_UART_Receive+0x106>
    {
      pdata8bits  = NULL;
 8003f82:	2300      	movs	r3, #0
 8003f84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	61bb      	str	r3, [r7, #24]
 8003f8a:	e003      	b.n	8003f94 <HAL_UART_Receive+0x10e>
    }
    else
    {
      pdata8bits  = pData;
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f90:	2300      	movs	r3, #0
 8003f92:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003f9c:	e033      	b.n	8004006 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	2120      	movs	r1, #32
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f000 fbf9 	bl	80047a0 <UART_WaitOnFlagUntilTimeout>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <HAL_UART_Receive+0x132>
      {
        return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e033      	b.n	8004020 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10c      	bne.n	8003fd8 <HAL_UART_Receive+0x152>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	8a7b      	ldrh	r3, [r7, #18]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	3302      	adds	r3, #2
 8003fd4:	61bb      	str	r3, [r7, #24]
 8003fd6:	e00d      	b.n	8003ff4 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	b2da      	uxtb	r2, r3
 8003fe2:	8a7b      	ldrh	r3, [r7, #18]
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	b2da      	uxtb	r2, r3
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800400c:	b29b      	uxth	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1c5      	bne.n	8003f9e <HAL_UART_Receive+0x118>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2220      	movs	r2, #32
 8004016:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800401a:	2300      	movs	r3, #0
 800401c:	e000      	b.n	8004020 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 800401e:	2302      	movs	r3, #2
  }
}
 8004020:	4618      	mov	r0, r3
 8004022:	3720      	adds	r7, #32
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004028:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800402c:	b088      	sub	sp, #32
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004032:	2300      	movs	r3, #0
 8004034:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689a      	ldr	r2, [r3, #8]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	431a      	orrs	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	431a      	orrs	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	4313      	orrs	r3, r2
 800404c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004052:	69fa      	ldr	r2, [r7, #28]
 8004054:	4313      	orrs	r3, r2
 8004056:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	4bb1      	ldr	r3, [pc, #708]	; (8004324 <UART_SetConfig+0x2fc>)
 8004060:	4013      	ands	r3, r2
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6812      	ldr	r2, [r2, #0]
 8004066:	69f9      	ldr	r1, [r7, #28]
 8004068:	430b      	orrs	r3, r1
 800406a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68da      	ldr	r2, [r3, #12]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4aa6      	ldr	r2, [pc, #664]	; (8004328 <UART_SetConfig+0x300>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d004      	beq.n	800409c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	69fa      	ldr	r2, [r7, #28]
 8004098:	4313      	orrs	r3, r2
 800409a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80040a6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6812      	ldr	r2, [r2, #0]
 80040ae:	69f9      	ldr	r1, [r7, #28]
 80040b0:	430b      	orrs	r3, r1
 80040b2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ba:	f023 010f 	bic.w	r1, r3, #15
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a97      	ldr	r2, [pc, #604]	; (800432c <UART_SetConfig+0x304>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d121      	bne.n	8004118 <UART_SetConfig+0xf0>
 80040d4:	4b96      	ldr	r3, [pc, #600]	; (8004330 <UART_SetConfig+0x308>)
 80040d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040da:	f003 0303 	and.w	r3, r3, #3
 80040de:	2b03      	cmp	r3, #3
 80040e0:	d816      	bhi.n	8004110 <UART_SetConfig+0xe8>
 80040e2:	a201      	add	r2, pc, #4	; (adr r2, 80040e8 <UART_SetConfig+0xc0>)
 80040e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e8:	080040f9 	.word	0x080040f9
 80040ec:	08004105 	.word	0x08004105
 80040f0:	080040ff 	.word	0x080040ff
 80040f4:	0800410b 	.word	0x0800410b
 80040f8:	2301      	movs	r3, #1
 80040fa:	76fb      	strb	r3, [r7, #27]
 80040fc:	e0e8      	b.n	80042d0 <UART_SetConfig+0x2a8>
 80040fe:	2302      	movs	r3, #2
 8004100:	76fb      	strb	r3, [r7, #27]
 8004102:	e0e5      	b.n	80042d0 <UART_SetConfig+0x2a8>
 8004104:	2304      	movs	r3, #4
 8004106:	76fb      	strb	r3, [r7, #27]
 8004108:	e0e2      	b.n	80042d0 <UART_SetConfig+0x2a8>
 800410a:	2308      	movs	r3, #8
 800410c:	76fb      	strb	r3, [r7, #27]
 800410e:	e0df      	b.n	80042d0 <UART_SetConfig+0x2a8>
 8004110:	2310      	movs	r3, #16
 8004112:	76fb      	strb	r3, [r7, #27]
 8004114:	bf00      	nop
 8004116:	e0db      	b.n	80042d0 <UART_SetConfig+0x2a8>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a85      	ldr	r2, [pc, #532]	; (8004334 <UART_SetConfig+0x30c>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d134      	bne.n	800418c <UART_SetConfig+0x164>
 8004122:	4b83      	ldr	r3, [pc, #524]	; (8004330 <UART_SetConfig+0x308>)
 8004124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004128:	f003 030c 	and.w	r3, r3, #12
 800412c:	2b0c      	cmp	r3, #12
 800412e:	d829      	bhi.n	8004184 <UART_SetConfig+0x15c>
 8004130:	a201      	add	r2, pc, #4	; (adr r2, 8004138 <UART_SetConfig+0x110>)
 8004132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004136:	bf00      	nop
 8004138:	0800416d 	.word	0x0800416d
 800413c:	08004185 	.word	0x08004185
 8004140:	08004185 	.word	0x08004185
 8004144:	08004185 	.word	0x08004185
 8004148:	08004179 	.word	0x08004179
 800414c:	08004185 	.word	0x08004185
 8004150:	08004185 	.word	0x08004185
 8004154:	08004185 	.word	0x08004185
 8004158:	08004173 	.word	0x08004173
 800415c:	08004185 	.word	0x08004185
 8004160:	08004185 	.word	0x08004185
 8004164:	08004185 	.word	0x08004185
 8004168:	0800417f 	.word	0x0800417f
 800416c:	2300      	movs	r3, #0
 800416e:	76fb      	strb	r3, [r7, #27]
 8004170:	e0ae      	b.n	80042d0 <UART_SetConfig+0x2a8>
 8004172:	2302      	movs	r3, #2
 8004174:	76fb      	strb	r3, [r7, #27]
 8004176:	e0ab      	b.n	80042d0 <UART_SetConfig+0x2a8>
 8004178:	2304      	movs	r3, #4
 800417a:	76fb      	strb	r3, [r7, #27]
 800417c:	e0a8      	b.n	80042d0 <UART_SetConfig+0x2a8>
 800417e:	2308      	movs	r3, #8
 8004180:	76fb      	strb	r3, [r7, #27]
 8004182:	e0a5      	b.n	80042d0 <UART_SetConfig+0x2a8>
 8004184:	2310      	movs	r3, #16
 8004186:	76fb      	strb	r3, [r7, #27]
 8004188:	bf00      	nop
 800418a:	e0a1      	b.n	80042d0 <UART_SetConfig+0x2a8>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a69      	ldr	r2, [pc, #420]	; (8004338 <UART_SetConfig+0x310>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d120      	bne.n	80041d8 <UART_SetConfig+0x1b0>
 8004196:	4b66      	ldr	r3, [pc, #408]	; (8004330 <UART_SetConfig+0x308>)
 8004198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041a0:	2b10      	cmp	r3, #16
 80041a2:	d00f      	beq.n	80041c4 <UART_SetConfig+0x19c>
 80041a4:	2b10      	cmp	r3, #16
 80041a6:	d802      	bhi.n	80041ae <UART_SetConfig+0x186>
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d005      	beq.n	80041b8 <UART_SetConfig+0x190>
 80041ac:	e010      	b.n	80041d0 <UART_SetConfig+0x1a8>
 80041ae:	2b20      	cmp	r3, #32
 80041b0:	d005      	beq.n	80041be <UART_SetConfig+0x196>
 80041b2:	2b30      	cmp	r3, #48	; 0x30
 80041b4:	d009      	beq.n	80041ca <UART_SetConfig+0x1a2>
 80041b6:	e00b      	b.n	80041d0 <UART_SetConfig+0x1a8>
 80041b8:	2300      	movs	r3, #0
 80041ba:	76fb      	strb	r3, [r7, #27]
 80041bc:	e088      	b.n	80042d0 <UART_SetConfig+0x2a8>
 80041be:	2302      	movs	r3, #2
 80041c0:	76fb      	strb	r3, [r7, #27]
 80041c2:	e085      	b.n	80042d0 <UART_SetConfig+0x2a8>
 80041c4:	2304      	movs	r3, #4
 80041c6:	76fb      	strb	r3, [r7, #27]
 80041c8:	e082      	b.n	80042d0 <UART_SetConfig+0x2a8>
 80041ca:	2308      	movs	r3, #8
 80041cc:	76fb      	strb	r3, [r7, #27]
 80041ce:	e07f      	b.n	80042d0 <UART_SetConfig+0x2a8>
 80041d0:	2310      	movs	r3, #16
 80041d2:	76fb      	strb	r3, [r7, #27]
 80041d4:	bf00      	nop
 80041d6:	e07b      	b.n	80042d0 <UART_SetConfig+0x2a8>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a57      	ldr	r2, [pc, #348]	; (800433c <UART_SetConfig+0x314>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d120      	bne.n	8004224 <UART_SetConfig+0x1fc>
 80041e2:	4b53      	ldr	r3, [pc, #332]	; (8004330 <UART_SetConfig+0x308>)
 80041e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80041ec:	2b40      	cmp	r3, #64	; 0x40
 80041ee:	d00f      	beq.n	8004210 <UART_SetConfig+0x1e8>
 80041f0:	2b40      	cmp	r3, #64	; 0x40
 80041f2:	d802      	bhi.n	80041fa <UART_SetConfig+0x1d2>
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d005      	beq.n	8004204 <UART_SetConfig+0x1dc>
 80041f8:	e010      	b.n	800421c <UART_SetConfig+0x1f4>
 80041fa:	2b80      	cmp	r3, #128	; 0x80
 80041fc:	d005      	beq.n	800420a <UART_SetConfig+0x1e2>
 80041fe:	2bc0      	cmp	r3, #192	; 0xc0
 8004200:	d009      	beq.n	8004216 <UART_SetConfig+0x1ee>
 8004202:	e00b      	b.n	800421c <UART_SetConfig+0x1f4>
 8004204:	2300      	movs	r3, #0
 8004206:	76fb      	strb	r3, [r7, #27]
 8004208:	e062      	b.n	80042d0 <UART_SetConfig+0x2a8>
 800420a:	2302      	movs	r3, #2
 800420c:	76fb      	strb	r3, [r7, #27]
 800420e:	e05f      	b.n	80042d0 <UART_SetConfig+0x2a8>
 8004210:	2304      	movs	r3, #4
 8004212:	76fb      	strb	r3, [r7, #27]
 8004214:	e05c      	b.n	80042d0 <UART_SetConfig+0x2a8>
 8004216:	2308      	movs	r3, #8
 8004218:	76fb      	strb	r3, [r7, #27]
 800421a:	e059      	b.n	80042d0 <UART_SetConfig+0x2a8>
 800421c:	2310      	movs	r3, #16
 800421e:	76fb      	strb	r3, [r7, #27]
 8004220:	bf00      	nop
 8004222:	e055      	b.n	80042d0 <UART_SetConfig+0x2a8>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a45      	ldr	r2, [pc, #276]	; (8004340 <UART_SetConfig+0x318>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d124      	bne.n	8004278 <UART_SetConfig+0x250>
 800422e:	4b40      	ldr	r3, [pc, #256]	; (8004330 <UART_SetConfig+0x308>)
 8004230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004234:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004238:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800423c:	d012      	beq.n	8004264 <UART_SetConfig+0x23c>
 800423e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004242:	d802      	bhi.n	800424a <UART_SetConfig+0x222>
 8004244:	2b00      	cmp	r3, #0
 8004246:	d007      	beq.n	8004258 <UART_SetConfig+0x230>
 8004248:	e012      	b.n	8004270 <UART_SetConfig+0x248>
 800424a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800424e:	d006      	beq.n	800425e <UART_SetConfig+0x236>
 8004250:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004254:	d009      	beq.n	800426a <UART_SetConfig+0x242>
 8004256:	e00b      	b.n	8004270 <UART_SetConfig+0x248>
 8004258:	2300      	movs	r3, #0
 800425a:	76fb      	strb	r3, [r7, #27]
 800425c:	e038      	b.n	80042d0 <UART_SetConfig+0x2a8>
 800425e:	2302      	movs	r3, #2
 8004260:	76fb      	strb	r3, [r7, #27]
 8004262:	e035      	b.n	80042d0 <UART_SetConfig+0x2a8>
 8004264:	2304      	movs	r3, #4
 8004266:	76fb      	strb	r3, [r7, #27]
 8004268:	e032      	b.n	80042d0 <UART_SetConfig+0x2a8>
 800426a:	2308      	movs	r3, #8
 800426c:	76fb      	strb	r3, [r7, #27]
 800426e:	e02f      	b.n	80042d0 <UART_SetConfig+0x2a8>
 8004270:	2310      	movs	r3, #16
 8004272:	76fb      	strb	r3, [r7, #27]
 8004274:	bf00      	nop
 8004276:	e02b      	b.n	80042d0 <UART_SetConfig+0x2a8>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a2a      	ldr	r2, [pc, #168]	; (8004328 <UART_SetConfig+0x300>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d124      	bne.n	80042cc <UART_SetConfig+0x2a4>
 8004282:	4b2b      	ldr	r3, [pc, #172]	; (8004330 <UART_SetConfig+0x308>)
 8004284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004288:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800428c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004290:	d012      	beq.n	80042b8 <UART_SetConfig+0x290>
 8004292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004296:	d802      	bhi.n	800429e <UART_SetConfig+0x276>
 8004298:	2b00      	cmp	r3, #0
 800429a:	d007      	beq.n	80042ac <UART_SetConfig+0x284>
 800429c:	e012      	b.n	80042c4 <UART_SetConfig+0x29c>
 800429e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042a2:	d006      	beq.n	80042b2 <UART_SetConfig+0x28a>
 80042a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042a8:	d009      	beq.n	80042be <UART_SetConfig+0x296>
 80042aa:	e00b      	b.n	80042c4 <UART_SetConfig+0x29c>
 80042ac:	2300      	movs	r3, #0
 80042ae:	76fb      	strb	r3, [r7, #27]
 80042b0:	e00e      	b.n	80042d0 <UART_SetConfig+0x2a8>
 80042b2:	2302      	movs	r3, #2
 80042b4:	76fb      	strb	r3, [r7, #27]
 80042b6:	e00b      	b.n	80042d0 <UART_SetConfig+0x2a8>
 80042b8:	2304      	movs	r3, #4
 80042ba:	76fb      	strb	r3, [r7, #27]
 80042bc:	e008      	b.n	80042d0 <UART_SetConfig+0x2a8>
 80042be:	2308      	movs	r3, #8
 80042c0:	76fb      	strb	r3, [r7, #27]
 80042c2:	e005      	b.n	80042d0 <UART_SetConfig+0x2a8>
 80042c4:	2310      	movs	r3, #16
 80042c6:	76fb      	strb	r3, [r7, #27]
 80042c8:	bf00      	nop
 80042ca:	e001      	b.n	80042d0 <UART_SetConfig+0x2a8>
 80042cc:	2310      	movs	r3, #16
 80042ce:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a14      	ldr	r2, [pc, #80]	; (8004328 <UART_SetConfig+0x300>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	f040 80a1 	bne.w	800441e <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042dc:	7efb      	ldrb	r3, [r7, #27]
 80042de:	2b08      	cmp	r3, #8
 80042e0:	d836      	bhi.n	8004350 <UART_SetConfig+0x328>
 80042e2:	a201      	add	r2, pc, #4	; (adr r2, 80042e8 <UART_SetConfig+0x2c0>)
 80042e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e8:	0800430d 	.word	0x0800430d
 80042ec:	08004351 	.word	0x08004351
 80042f0:	08004315 	.word	0x08004315
 80042f4:	08004351 	.word	0x08004351
 80042f8:	0800431b 	.word	0x0800431b
 80042fc:	08004351 	.word	0x08004351
 8004300:	08004351 	.word	0x08004351
 8004304:	08004351 	.word	0x08004351
 8004308:	08004349 	.word	0x08004349
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800430c:	f7fe fece 	bl	80030ac <HAL_RCC_GetPCLK1Freq>
 8004310:	6178      	str	r0, [r7, #20]
        break;
 8004312:	e022      	b.n	800435a <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004314:	4b0b      	ldr	r3, [pc, #44]	; (8004344 <UART_SetConfig+0x31c>)
 8004316:	617b      	str	r3, [r7, #20]
        break;
 8004318:	e01f      	b.n	800435a <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800431a:	f7fe fe31 	bl	8002f80 <HAL_RCC_GetSysClockFreq>
 800431e:	6178      	str	r0, [r7, #20]
        break;
 8004320:	e01b      	b.n	800435a <UART_SetConfig+0x332>
 8004322:	bf00      	nop
 8004324:	cfff69f3 	.word	0xcfff69f3
 8004328:	40008000 	.word	0x40008000
 800432c:	40013800 	.word	0x40013800
 8004330:	40021000 	.word	0x40021000
 8004334:	40004400 	.word	0x40004400
 8004338:	40004800 	.word	0x40004800
 800433c:	40004c00 	.word	0x40004c00
 8004340:	40005000 	.word	0x40005000
 8004344:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004348:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800434c:	617b      	str	r3, [r7, #20]
        break;
 800434e:	e004      	b.n	800435a <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8004350:	2300      	movs	r3, #0
 8004352:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	76bb      	strb	r3, [r7, #26]
        break;
 8004358:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 811d 	beq.w	800459c <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	4a97      	ldr	r2, [pc, #604]	; (80045c4 <UART_SetConfig+0x59c>)
 8004368:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800436c:	461a      	mov	r2, r3
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	fbb3 f3f2 	udiv	r3, r3, r2
 8004374:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	4613      	mov	r3, r2
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	4413      	add	r3, r2
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	429a      	cmp	r2, r3
 8004384:	d305      	bcc.n	8004392 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	429a      	cmp	r2, r3
 8004390:	d902      	bls.n	8004398 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	76bb      	strb	r3, [r7, #26]
 8004396:	e101      	b.n	800459c <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	4618      	mov	r0, r3
 800439c:	f04f 0100 	mov.w	r1, #0
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a4:	4a87      	ldr	r2, [pc, #540]	; (80045c4 <UART_SetConfig+0x59c>)
 80043a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	f04f 0400 	mov.w	r4, #0
 80043b0:	461a      	mov	r2, r3
 80043b2:	4623      	mov	r3, r4
 80043b4:	f7fc fa96 	bl	80008e4 <__aeabi_uldivmod>
 80043b8:	4603      	mov	r3, r0
 80043ba:	460c      	mov	r4, r1
 80043bc:	4619      	mov	r1, r3
 80043be:	4622      	mov	r2, r4
 80043c0:	f04f 0300 	mov.w	r3, #0
 80043c4:	f04f 0400 	mov.w	r4, #0
 80043c8:	0214      	lsls	r4, r2, #8
 80043ca:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80043ce:	020b      	lsls	r3, r1, #8
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	6852      	ldr	r2, [r2, #4]
 80043d4:	0852      	lsrs	r2, r2, #1
 80043d6:	4611      	mov	r1, r2
 80043d8:	f04f 0200 	mov.w	r2, #0
 80043dc:	eb13 0b01 	adds.w	fp, r3, r1
 80043e0:	eb44 0c02 	adc.w	ip, r4, r2
 80043e4:	4658      	mov	r0, fp
 80043e6:	4661      	mov	r1, ip
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f04f 0400 	mov.w	r4, #0
 80043f0:	461a      	mov	r2, r3
 80043f2:	4623      	mov	r3, r4
 80043f4:	f7fc fa76 	bl	80008e4 <__aeabi_uldivmod>
 80043f8:	4603      	mov	r3, r0
 80043fa:	460c      	mov	r4, r1
 80043fc:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004404:	d308      	bcc.n	8004418 <UART_SetConfig+0x3f0>
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800440c:	d204      	bcs.n	8004418 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	60da      	str	r2, [r3, #12]
 8004416:	e0c1      	b.n	800459c <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	76bb      	strb	r3, [r7, #26]
 800441c:	e0be      	b.n	800459c <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004426:	d164      	bne.n	80044f2 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8004428:	7efb      	ldrb	r3, [r7, #27]
 800442a:	2b08      	cmp	r3, #8
 800442c:	d827      	bhi.n	800447e <UART_SetConfig+0x456>
 800442e:	a201      	add	r2, pc, #4	; (adr r2, 8004434 <UART_SetConfig+0x40c>)
 8004430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004434:	08004459 	.word	0x08004459
 8004438:	08004461 	.word	0x08004461
 800443c:	08004469 	.word	0x08004469
 8004440:	0800447f 	.word	0x0800447f
 8004444:	0800446f 	.word	0x0800446f
 8004448:	0800447f 	.word	0x0800447f
 800444c:	0800447f 	.word	0x0800447f
 8004450:	0800447f 	.word	0x0800447f
 8004454:	08004477 	.word	0x08004477
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004458:	f7fe fe28 	bl	80030ac <HAL_RCC_GetPCLK1Freq>
 800445c:	6178      	str	r0, [r7, #20]
        break;
 800445e:	e013      	b.n	8004488 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004460:	f7fe fe3a 	bl	80030d8 <HAL_RCC_GetPCLK2Freq>
 8004464:	6178      	str	r0, [r7, #20]
        break;
 8004466:	e00f      	b.n	8004488 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004468:	4b57      	ldr	r3, [pc, #348]	; (80045c8 <UART_SetConfig+0x5a0>)
 800446a:	617b      	str	r3, [r7, #20]
        break;
 800446c:	e00c      	b.n	8004488 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800446e:	f7fe fd87 	bl	8002f80 <HAL_RCC_GetSysClockFreq>
 8004472:	6178      	str	r0, [r7, #20]
        break;
 8004474:	e008      	b.n	8004488 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800447a:	617b      	str	r3, [r7, #20]
        break;
 800447c:	e004      	b.n	8004488 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 800447e:	2300      	movs	r3, #0
 8004480:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	76bb      	strb	r3, [r7, #26]
        break;
 8004486:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 8086 	beq.w	800459c <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004494:	4a4b      	ldr	r2, [pc, #300]	; (80045c4 <UART_SetConfig+0x59c>)
 8004496:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800449a:	461a      	mov	r2, r3
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	fbb3 f3f2 	udiv	r3, r3, r2
 80044a2:	005a      	lsls	r2, r3, #1
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	085b      	lsrs	r3, r3, #1
 80044aa:	441a      	add	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	2b0f      	cmp	r3, #15
 80044bc:	d916      	bls.n	80044ec <UART_SetConfig+0x4c4>
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044c4:	d212      	bcs.n	80044ec <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	f023 030f 	bic.w	r3, r3, #15
 80044ce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	085b      	lsrs	r3, r3, #1
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	f003 0307 	and.w	r3, r3, #7
 80044da:	b29a      	uxth	r2, r3
 80044dc:	89fb      	ldrh	r3, [r7, #14]
 80044de:	4313      	orrs	r3, r2
 80044e0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	89fa      	ldrh	r2, [r7, #14]
 80044e8:	60da      	str	r2, [r3, #12]
 80044ea:	e057      	b.n	800459c <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	76bb      	strb	r3, [r7, #26]
 80044f0:	e054      	b.n	800459c <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044f2:	7efb      	ldrb	r3, [r7, #27]
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d828      	bhi.n	800454a <UART_SetConfig+0x522>
 80044f8:	a201      	add	r2, pc, #4	; (adr r2, 8004500 <UART_SetConfig+0x4d8>)
 80044fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044fe:	bf00      	nop
 8004500:	08004525 	.word	0x08004525
 8004504:	0800452d 	.word	0x0800452d
 8004508:	08004535 	.word	0x08004535
 800450c:	0800454b 	.word	0x0800454b
 8004510:	0800453b 	.word	0x0800453b
 8004514:	0800454b 	.word	0x0800454b
 8004518:	0800454b 	.word	0x0800454b
 800451c:	0800454b 	.word	0x0800454b
 8004520:	08004543 	.word	0x08004543
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004524:	f7fe fdc2 	bl	80030ac <HAL_RCC_GetPCLK1Freq>
 8004528:	6178      	str	r0, [r7, #20]
        break;
 800452a:	e013      	b.n	8004554 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800452c:	f7fe fdd4 	bl	80030d8 <HAL_RCC_GetPCLK2Freq>
 8004530:	6178      	str	r0, [r7, #20]
        break;
 8004532:	e00f      	b.n	8004554 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004534:	4b24      	ldr	r3, [pc, #144]	; (80045c8 <UART_SetConfig+0x5a0>)
 8004536:	617b      	str	r3, [r7, #20]
        break;
 8004538:	e00c      	b.n	8004554 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800453a:	f7fe fd21 	bl	8002f80 <HAL_RCC_GetSysClockFreq>
 800453e:	6178      	str	r0, [r7, #20]
        break;
 8004540:	e008      	b.n	8004554 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004542:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004546:	617b      	str	r3, [r7, #20]
        break;
 8004548:	e004      	b.n	8004554 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 800454a:	2300      	movs	r3, #0
 800454c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	76bb      	strb	r3, [r7, #26]
        break;
 8004552:	bf00      	nop
    }

    if (pclk != 0U)
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d020      	beq.n	800459c <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	4a19      	ldr	r2, [pc, #100]	; (80045c4 <UART_SetConfig+0x59c>)
 8004560:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004564:	461a      	mov	r2, r3
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	fbb3 f2f2 	udiv	r2, r3, r2
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	085b      	lsrs	r3, r3, #1
 8004572:	441a      	add	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	fbb2 f3f3 	udiv	r3, r2, r3
 800457c:	b29b      	uxth	r3, r3
 800457e:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	2b0f      	cmp	r3, #15
 8004584:	d908      	bls.n	8004598 <UART_SetConfig+0x570>
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800458c:	d204      	bcs.n	8004598 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	60da      	str	r2, [r3, #12]
 8004596:	e001      	b.n	800459c <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80045b8:	7ebb      	ldrb	r3, [r7, #26]
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3720      	adds	r7, #32
 80045be:	46bd      	mov	sp, r7
 80045c0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80045c4:	08011164 	.word	0x08011164
 80045c8:	00f42400 	.word	0x00f42400

080045cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00a      	beq.n	80045f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00a      	beq.n	800463a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463e:	f003 0308 	and.w	r3, r3, #8
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00a      	beq.n	800465c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004660:	f003 0310 	and.w	r3, r3, #16
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00a      	beq.n	800467e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004682:	f003 0320 	and.w	r3, r3, #32
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	430a      	orrs	r2, r1
 800469e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d01a      	beq.n	80046e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	430a      	orrs	r2, r1
 80046c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046ca:	d10a      	bne.n	80046e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00a      	beq.n	8004704 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	605a      	str	r2, [r3, #4]
  }
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af02      	add	r7, sp, #8
 8004716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004720:	f7fc fedc 	bl	80014dc <HAL_GetTick>
 8004724:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0308 	and.w	r3, r3, #8
 8004730:	2b08      	cmp	r3, #8
 8004732:	d10e      	bne.n	8004752 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004734:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f82c 	bl	80047a0 <UART_WaitOnFlagUntilTimeout>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e022      	b.n	8004798 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0304 	and.w	r3, r3, #4
 800475c:	2b04      	cmp	r3, #4
 800475e:	d10e      	bne.n	800477e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004760:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f816 	bl	80047a0 <UART_WaitOnFlagUntilTimeout>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e00c      	b.n	8004798 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2220      	movs	r2, #32
 8004782:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2220      	movs	r2, #32
 800478a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	603b      	str	r3, [r7, #0]
 80047ac:	4613      	mov	r3, r2
 80047ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047b0:	e062      	b.n	8004878 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b8:	d05e      	beq.n	8004878 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ba:	f7fc fe8f 	bl	80014dc <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d302      	bcc.n	80047d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d11d      	bne.n	800480c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047de:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689a      	ldr	r2, [r3, #8]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 0201 	bic.w	r2, r2, #1
 80047ee:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2220      	movs	r2, #32
 80047f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2220      	movs	r2, #32
 80047fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e045      	b.n	8004898 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0304 	and.w	r3, r3, #4
 8004816:	2b00      	cmp	r3, #0
 8004818:	d02e      	beq.n	8004878 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004824:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004828:	d126      	bne.n	8004878 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004832:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004842:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689a      	ldr	r2, [r3, #8]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 0201 	bic.w	r2, r2, #1
 8004852:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2220      	movs	r2, #32
 8004858:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2220      	movs	r2, #32
 8004860:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2220      	movs	r2, #32
 8004868:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e00f      	b.n	8004898 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	69da      	ldr	r2, [r3, #28]
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	4013      	ands	r3, r2
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	429a      	cmp	r2, r3
 8004886:	bf0c      	ite	eq
 8004888:	2301      	moveq	r3, #1
 800488a:	2300      	movne	r3, #0
 800488c:	b2db      	uxtb	r3, r3
 800488e:	461a      	mov	r2, r3
 8004890:	79fb      	ldrb	r3, [r7, #7]
 8004892:	429a      	cmp	r2, r3
 8004894:	d08d      	beq.n	80047b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d101      	bne.n	80048b6 <HAL_UARTEx_DisableFifoMode+0x16>
 80048b2:	2302      	movs	r3, #2
 80048b4:	e027      	b.n	8004906 <HAL_UARTEx_DisableFifoMode+0x66>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2224      	movs	r2, #36	; 0x24
 80048c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 0201 	bic.w	r2, r2, #1
 80048dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80048e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2220      	movs	r2, #32
 80048f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr

08004912 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b084      	sub	sp, #16
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
 800491a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004922:	2b01      	cmp	r3, #1
 8004924:	d101      	bne.n	800492a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004926:	2302      	movs	r3, #2
 8004928:	e02d      	b.n	8004986 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2224      	movs	r2, #36	; 0x24
 8004936:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f022 0201 	bic.w	r2, r2, #1
 8004950:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f850 	bl	8004a0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2220      	movs	r2, #32
 8004978:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b084      	sub	sp, #16
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
 8004996:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d101      	bne.n	80049a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80049a2:	2302      	movs	r3, #2
 80049a4:	e02d      	b.n	8004a02 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2224      	movs	r2, #36	; 0x24
 80049b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 0201 	bic.w	r2, r2, #1
 80049cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	430a      	orrs	r2, r1
 80049e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f812 	bl	8004a0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2220      	movs	r2, #32
 80049f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
	...

08004a0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b089      	sub	sp, #36	; 0x24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004a14:	4a2f      	ldr	r2, [pc, #188]	; (8004ad4 <UARTEx_SetNbDataToProcess+0xc8>)
 8004a16:	f107 0314 	add.w	r3, r7, #20
 8004a1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004a1e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004a22:	4a2d      	ldr	r2, [pc, #180]	; (8004ad8 <UARTEx_SetNbDataToProcess+0xcc>)
 8004a24:	f107 030c 	add.w	r3, r7, #12
 8004a28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004a2c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d108      	bne.n	8004a4a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004a48:	e03d      	b.n	8004ac6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004a4a:	2308      	movs	r3, #8
 8004a4c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004a4e:	2308      	movs	r3, #8
 8004a50:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	0e5b      	lsrs	r3, r3, #25
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	f003 0307 	and.w	r3, r3, #7
 8004a60:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	0f5b      	lsrs	r3, r3, #29
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	f003 0307 	and.w	r3, r3, #7
 8004a70:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004a72:	7fbb      	ldrb	r3, [r7, #30]
 8004a74:	7f3a      	ldrb	r2, [r7, #28]
 8004a76:	f107 0120 	add.w	r1, r7, #32
 8004a7a:	440a      	add	r2, r1
 8004a7c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004a80:	fb02 f303 	mul.w	r3, r2, r3
 8004a84:	7f3a      	ldrb	r2, [r7, #28]
 8004a86:	f107 0120 	add.w	r1, r7, #32
 8004a8a:	440a      	add	r2, r1
 8004a8c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004a90:	fb93 f3f2 	sdiv	r3, r3, r2
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004a9c:	7ffb      	ldrb	r3, [r7, #31]
 8004a9e:	7f7a      	ldrb	r2, [r7, #29]
 8004aa0:	f107 0120 	add.w	r1, r7, #32
 8004aa4:	440a      	add	r2, r1
 8004aa6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004aaa:	fb02 f303 	mul.w	r3, r2, r3
 8004aae:	7f7a      	ldrb	r2, [r7, #29]
 8004ab0:	f107 0120 	add.w	r1, r7, #32
 8004ab4:	440a      	add	r2, r1
 8004ab6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004aba:	fb93 f3f2 	sdiv	r3, r3, r2
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004ac6:	bf00      	nop
 8004ac8:	3724      	adds	r7, #36	; 0x24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	08010574 	.word	0x08010574
 8004ad8:	0801057c 	.word	0x0801057c

08004adc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004adc:	b084      	sub	sp, #16
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b084      	sub	sp, #16
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
 8004ae6:	f107 001c 	add.w	r0, r7, #28
 8004aea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d122      	bne.n	8004b3a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004b08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d105      	bne.n	8004b2e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 ffa6 	bl	8005a80 <USB_CoreReset>
 8004b34:	4603      	mov	r3, r0
 8004b36:	73fb      	strb	r3, [r7, #15]
 8004b38:	e01a      	b.n	8004b70 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 ff9a 	bl	8005a80 <USB_CoreReset>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d106      	bne.n	8004b64 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	639a      	str	r2, [r3, #56]	; 0x38
 8004b62:	e005      	b.n	8004b70 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8004b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b7c:	b004      	add	sp, #16
 8004b7e:	4770      	bx	lr

08004b80 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f043 0201 	orr.w	r2, r3, #1
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b083      	sub	sp, #12
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f023 0201 	bic.w	r2, r3, #1
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	460b      	mov	r3, r1
 8004bce:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004bdc:	78fb      	ldrb	r3, [r7, #3]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d106      	bne.n	8004bf0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	60da      	str	r2, [r3, #12]
 8004bee:	e00b      	b.n	8004c08 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004bf0:	78fb      	ldrb	r3, [r7, #3]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d106      	bne.n	8004c04 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	60da      	str	r2, [r3, #12]
 8004c02:	e001      	b.n	8004c08 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e003      	b.n	8004c10 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004c08:	2032      	movs	r0, #50	; 0x32
 8004c0a:	f7fc fc73 	bl	80014f4 <HAL_Delay>

  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3708      	adds	r7, #8
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c18:	b084      	sub	sp, #16
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b086      	sub	sp, #24
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
 8004c22:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004c26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004c32:	2300      	movs	r3, #0
 8004c34:	613b      	str	r3, [r7, #16]
 8004c36:	e009      	b.n	8004c4c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	3340      	adds	r3, #64	; 0x40
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4413      	add	r3, r2
 8004c42:	2200      	movs	r2, #0
 8004c44:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	3301      	adds	r3, #1
 8004c4a:	613b      	str	r3, [r7, #16]
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	2b0e      	cmp	r3, #14
 8004c50:	d9f2      	bls.n	8004c38 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d11c      	bne.n	8004c92 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c66:	f043 0302 	orr.w	r3, r3, #2
 8004c6a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c70:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	601a      	str	r2, [r3, #0]
 8004c90:	e005      	b.n	8004c9e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c96:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb8:	461a      	mov	r2, r3
 8004cba:	680b      	ldr	r3, [r1, #0]
 8004cbc:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004cbe:	2103      	movs	r1, #3
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f93d 	bl	8004f40 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004cc6:	2110      	movs	r1, #16
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 f8f1 	bl	8004eb0 <USB_FlushTxFifo>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d001      	beq.n	8004cd8 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 f90f 	bl	8004efc <USB_FlushRxFifo>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cee:	461a      	mov	r2, r3
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d06:	461a      	mov	r2, r3
 8004d08:	2300      	movs	r3, #0
 8004d0a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	613b      	str	r3, [r7, #16]
 8004d10:	e043      	b.n	8004d9a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	015a      	lsls	r2, r3, #5
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	4413      	add	r3, r2
 8004d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d28:	d118      	bne.n	8004d5c <USB_DevInit+0x144>
    {
      if (i == 0U)
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10a      	bne.n	8004d46 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	015a      	lsls	r2, r3, #5
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	4413      	add	r3, r2
 8004d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d42:	6013      	str	r3, [r2, #0]
 8004d44:	e013      	b.n	8004d6e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	015a      	lsls	r2, r3, #5
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d52:	461a      	mov	r2, r3
 8004d54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d58:	6013      	str	r3, [r2, #0]
 8004d5a:	e008      	b.n	8004d6e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	015a      	lsls	r2, r3, #5
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4413      	add	r3, r2
 8004d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d68:	461a      	mov	r2, r3
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	015a      	lsls	r2, r3, #5
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	4413      	add	r3, r2
 8004d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	015a      	lsls	r2, r3, #5
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	4413      	add	r3, r2
 8004d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	3301      	adds	r3, #1
 8004d98:	613b      	str	r3, [r7, #16]
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d3b7      	bcc.n	8004d12 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004da2:	2300      	movs	r3, #0
 8004da4:	613b      	str	r3, [r7, #16]
 8004da6:	e043      	b.n	8004e30 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	015a      	lsls	r2, r3, #5
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	4413      	add	r3, r2
 8004db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dbe:	d118      	bne.n	8004df2 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10a      	bne.n	8004ddc <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	015a      	lsls	r2, r3, #5
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	4413      	add	r3, r2
 8004dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004dd8:	6013      	str	r3, [r2, #0]
 8004dda:	e013      	b.n	8004e04 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	015a      	lsls	r2, r3, #5
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	4413      	add	r3, r2
 8004de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de8:	461a      	mov	r2, r3
 8004dea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004dee:	6013      	str	r3, [r2, #0]
 8004df0:	e008      	b.n	8004e04 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	015a      	lsls	r2, r3, #5
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	4413      	add	r3, r2
 8004dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dfe:	461a      	mov	r2, r3
 8004e00:	2300      	movs	r3, #0
 8004e02:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	015a      	lsls	r2, r3, #5
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e10:	461a      	mov	r2, r3
 8004e12:	2300      	movs	r3, #0
 8004e14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	015a      	lsls	r2, r3, #5
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e22:	461a      	mov	r2, r3
 8004e24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	613b      	str	r3, [r7, #16]
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d3b7      	bcc.n	8004da8 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e4a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004e58:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	f043 0210 	orr.w	r2, r3, #16
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	699a      	ldr	r2, [r3, #24]
 8004e6a:	4b10      	ldr	r3, [pc, #64]	; (8004eac <USB_DevInit+0x294>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d005      	beq.n	8004e84 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	f043 0208 	orr.w	r2, r3, #8
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d107      	bne.n	8004e9a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e92:	f043 0304 	orr.w	r3, r3, #4
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3718      	adds	r7, #24
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ea6:	b004      	add	sp, #16
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	803c3800 	.word	0x803c3800

08004eb0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	019b      	lsls	r3, r3, #6
 8004ec2:	f043 0220 	orr.w	r2, r3, #32
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	60fb      	str	r3, [r7, #12]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	4a09      	ldr	r2, [pc, #36]	; (8004ef8 <USB_FlushTxFifo+0x48>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d901      	bls.n	8004edc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e006      	b.n	8004eea <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	f003 0320 	and.w	r3, r3, #32
 8004ee4:	2b20      	cmp	r3, #32
 8004ee6:	d0f0      	beq.n	8004eca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3714      	adds	r7, #20
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	00030d40 	.word	0x00030d40

08004efc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004f04:	2300      	movs	r3, #0
 8004f06:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2210      	movs	r2, #16
 8004f0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	3301      	adds	r3, #1
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	4a09      	ldr	r2, [pc, #36]	; (8004f3c <USB_FlushRxFifo+0x40>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d901      	bls.n	8004f20 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e006      	b.n	8004f2e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	f003 0310 	and.w	r3, r3, #16
 8004f28:	2b10      	cmp	r3, #16
 8004f2a:	d0f0      	beq.n	8004f0e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3714      	adds	r7, #20
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	00030d40 	.word	0x00030d40

08004f40 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	460b      	mov	r3, r1
 8004f4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	78fb      	ldrb	r3, [r7, #3]
 8004f5a:	68f9      	ldr	r1, [r7, #12]
 8004f5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f60:	4313      	orrs	r3, r2
 8004f62:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3714      	adds	r7, #20
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b085      	sub	sp, #20
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
 8004f7a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	785b      	ldrb	r3, [r3, #1]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d13a      	bne.n	8005004 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f94:	69da      	ldr	r2, [r3, #28]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	f003 030f 	and.w	r3, r3, #15
 8004f9e:	2101      	movs	r1, #1
 8004fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	68f9      	ldr	r1, [r7, #12]
 8004fa8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fac:	4313      	orrs	r3, r2
 8004fae:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	015a      	lsls	r2, r3, #5
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d155      	bne.n	8005072 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	78db      	ldrb	r3, [r3, #3]
 8004fe0:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004fe2:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	059b      	lsls	r3, r3, #22
 8004fe8:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004fea:	4313      	orrs	r3, r2
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	0151      	lsls	r1, r2, #5
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	440a      	add	r2, r1
 8004ff4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005000:	6013      	str	r3, [r2, #0]
 8005002:	e036      	b.n	8005072 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800500a:	69da      	ldr	r2, [r3, #28]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	f003 030f 	and.w	r3, r3, #15
 8005014:	2101      	movs	r1, #1
 8005016:	fa01 f303 	lsl.w	r3, r1, r3
 800501a:	041b      	lsls	r3, r3, #16
 800501c:	68f9      	ldr	r1, [r7, #12]
 800501e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005022:	4313      	orrs	r3, r2
 8005024:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	015a      	lsls	r2, r3, #5
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	4413      	add	r3, r2
 800502e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d11a      	bne.n	8005072 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	015a      	lsls	r2, r3, #5
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	4413      	add	r3, r2
 8005044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	78db      	ldrb	r3, [r3, #3]
 8005056:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005058:	430b      	orrs	r3, r1
 800505a:	4313      	orrs	r3, r2
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	0151      	lsls	r1, r2, #5
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	440a      	add	r2, r1
 8005064:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800506c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005070:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3714      	adds	r7, #20
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	785b      	ldrb	r3, [r3, #1]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d161      	bne.n	8005160 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050b2:	d11f      	bne.n	80050f4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	015a      	lsls	r2, r3, #5
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	0151      	lsls	r1, r2, #5
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	440a      	add	r2, r1
 80050ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80050d2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	0151      	lsls	r1, r2, #5
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	440a      	add	r2, r1
 80050ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	f003 030f 	and.w	r3, r3, #15
 8005104:	2101      	movs	r1, #1
 8005106:	fa01 f303 	lsl.w	r3, r1, r3
 800510a:	b29b      	uxth	r3, r3
 800510c:	43db      	mvns	r3, r3
 800510e:	68f9      	ldr	r1, [r7, #12]
 8005110:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005114:	4013      	ands	r3, r2
 8005116:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800511e:	69da      	ldr	r2, [r3, #28]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	f003 030f 	and.w	r3, r3, #15
 8005128:	2101      	movs	r1, #1
 800512a:	fa01 f303 	lsl.w	r3, r1, r3
 800512e:	b29b      	uxth	r3, r3
 8005130:	43db      	mvns	r3, r3
 8005132:	68f9      	ldr	r1, [r7, #12]
 8005134:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005138:	4013      	ands	r3, r2
 800513a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	4413      	add	r3, r2
 8005144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	0159      	lsls	r1, r3, #5
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	440b      	add	r3, r1
 8005152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005156:	4619      	mov	r1, r3
 8005158:	4b35      	ldr	r3, [pc, #212]	; (8005230 <USB_DeactivateEndpoint+0x1b0>)
 800515a:	4013      	ands	r3, r2
 800515c:	600b      	str	r3, [r1, #0]
 800515e:	e060      	b.n	8005222 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	015a      	lsls	r2, r3, #5
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	4413      	add	r3, r2
 8005168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005172:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005176:	d11f      	bne.n	80051b8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	015a      	lsls	r2, r3, #5
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	4413      	add	r3, r2
 8005180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68ba      	ldr	r2, [r7, #8]
 8005188:	0151      	lsls	r1, r2, #5
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	440a      	add	r2, r1
 800518e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005192:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005196:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	0151      	lsls	r1, r2, #5
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	440a      	add	r2, r1
 80051ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	f003 030f 	and.w	r3, r3, #15
 80051c8:	2101      	movs	r1, #1
 80051ca:	fa01 f303 	lsl.w	r3, r1, r3
 80051ce:	041b      	lsls	r3, r3, #16
 80051d0:	43db      	mvns	r3, r3
 80051d2:	68f9      	ldr	r1, [r7, #12]
 80051d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051d8:	4013      	ands	r3, r2
 80051da:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051e2:	69da      	ldr	r2, [r3, #28]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	f003 030f 	and.w	r3, r3, #15
 80051ec:	2101      	movs	r1, #1
 80051ee:	fa01 f303 	lsl.w	r3, r1, r3
 80051f2:	041b      	lsls	r3, r3, #16
 80051f4:	43db      	mvns	r3, r3
 80051f6:	68f9      	ldr	r1, [r7, #12]
 80051f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051fc:	4013      	ands	r3, r2
 80051fe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4413      	add	r3, r2
 8005208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	0159      	lsls	r1, r3, #5
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	440b      	add	r3, r1
 8005216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800521a:	4619      	mov	r1, r3
 800521c:	4b05      	ldr	r3, [pc, #20]	; (8005234 <USB_DeactivateEndpoint+0x1b4>)
 800521e:	4013      	ands	r3, r2
 8005220:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3714      	adds	r7, #20
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr
 8005230:	ec337800 	.word	0xec337800
 8005234:	eff37800 	.word	0xeff37800

08005238 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	785b      	ldrb	r3, [r3, #1]
 8005250:	2b01      	cmp	r3, #1
 8005252:	f040 810a 	bne.w	800546a <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d132      	bne.n	80052c4 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	015a      	lsls	r2, r3, #5
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	4413      	add	r3, r2
 8005266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	0151      	lsls	r1, r2, #5
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	440a      	add	r2, r1
 8005274:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005278:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800527c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005280:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	015a      	lsls	r2, r3, #5
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	4413      	add	r3, r2
 800528a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	0151      	lsls	r1, r2, #5
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	440a      	add	r2, r1
 8005298:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800529c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	015a      	lsls	r2, r3, #5
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	4413      	add	r3, r2
 80052aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	0151      	lsls	r1, r2, #5
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	440a      	add	r2, r1
 80052b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052bc:	0cdb      	lsrs	r3, r3, #19
 80052be:	04db      	lsls	r3, r3, #19
 80052c0:	6113      	str	r3, [r2, #16]
 80052c2:	e074      	b.n	80053ae <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	015a      	lsls	r2, r3, #5
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	4413      	add	r3, r2
 80052cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	0151      	lsls	r1, r2, #5
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	440a      	add	r2, r1
 80052da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052de:	0cdb      	lsrs	r3, r3, #19
 80052e0:	04db      	lsls	r3, r3, #19
 80052e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	015a      	lsls	r2, r3, #5
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	0151      	lsls	r1, r2, #5
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	440a      	add	r2, r1
 80052fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052fe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005302:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005306:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	4413      	add	r3, r2
 8005310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005314:	691a      	ldr	r2, [r3, #16]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	6959      	ldr	r1, [r3, #20]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	440b      	add	r3, r1
 8005320:	1e59      	subs	r1, r3, #1
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	fbb1 f3f3 	udiv	r3, r1, r3
 800532a:	04d9      	lsls	r1, r3, #19
 800532c:	4baf      	ldr	r3, [pc, #700]	; (80055ec <USB_EPStartXfer+0x3b4>)
 800532e:	400b      	ands	r3, r1
 8005330:	6939      	ldr	r1, [r7, #16]
 8005332:	0148      	lsls	r0, r1, #5
 8005334:	6979      	ldr	r1, [r7, #20]
 8005336:	4401      	add	r1, r0
 8005338:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800533c:	4313      	orrs	r3, r2
 800533e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	4413      	add	r3, r2
 8005348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800534c:	691a      	ldr	r2, [r3, #16]
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005356:	6939      	ldr	r1, [r7, #16]
 8005358:	0148      	lsls	r0, r1, #5
 800535a:	6979      	ldr	r1, [r7, #20]
 800535c:	4401      	add	r1, r0
 800535e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005362:	4313      	orrs	r3, r2
 8005364:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	78db      	ldrb	r3, [r3, #3]
 800536a:	2b01      	cmp	r3, #1
 800536c:	d11f      	bne.n	80053ae <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	015a      	lsls	r2, r3, #5
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	4413      	add	r3, r2
 8005376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	0151      	lsls	r1, r2, #5
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	440a      	add	r2, r1
 8005384:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005388:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800538c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	015a      	lsls	r2, r3, #5
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	4413      	add	r3, r2
 8005396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	0151      	lsls	r1, r2, #5
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	440a      	add	r2, r1
 80053a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80053ac:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	015a      	lsls	r2, r3, #5
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	4413      	add	r3, r2
 80053b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	0151      	lsls	r1, r2, #5
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	440a      	add	r2, r1
 80053c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053cc:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	78db      	ldrb	r3, [r3, #3]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d015      	beq.n	8005402 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f000 8100 	beq.w	80055e0 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	f003 030f 	and.w	r3, r3, #15
 80053f0:	2101      	movs	r1, #1
 80053f2:	fa01 f303 	lsl.w	r3, r1, r3
 80053f6:	6979      	ldr	r1, [r7, #20]
 80053f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053fc:	4313      	orrs	r3, r2
 80053fe:	634b      	str	r3, [r1, #52]	; 0x34
 8005400:	e0ee      	b.n	80055e0 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800540e:	2b00      	cmp	r3, #0
 8005410:	d110      	bne.n	8005434 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	015a      	lsls	r2, r3, #5
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	4413      	add	r3, r2
 800541a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	0151      	lsls	r1, r2, #5
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	440a      	add	r2, r1
 8005428:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800542c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005430:	6013      	str	r3, [r2, #0]
 8005432:	e00f      	b.n	8005454 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	4413      	add	r3, r2
 800543c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	0151      	lsls	r1, r2, #5
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	440a      	add	r2, r1
 800544a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800544e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005452:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	68d9      	ldr	r1, [r3, #12]
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	781a      	ldrb	r2, [r3, #0]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	b29b      	uxth	r3, r3
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 f9e2 	bl	800582c <USB_WritePacket>
 8005468:	e0ba      	b.n	80055e0 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	015a      	lsls	r2, r3, #5
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	4413      	add	r3, r2
 8005472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	0151      	lsls	r1, r2, #5
 800547c:	697a      	ldr	r2, [r7, #20]
 800547e:	440a      	add	r2, r1
 8005480:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005484:	0cdb      	lsrs	r3, r3, #19
 8005486:	04db      	lsls	r3, r3, #19
 8005488:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	015a      	lsls	r2, r3, #5
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	4413      	add	r3, r2
 8005492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	0151      	lsls	r1, r2, #5
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	440a      	add	r2, r1
 80054a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054ac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d123      	bne.n	80054fe <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	015a      	lsls	r2, r3, #5
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	4413      	add	r3, r2
 80054be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c2:	691a      	ldr	r2, [r3, #16]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054cc:	6939      	ldr	r1, [r7, #16]
 80054ce:	0148      	lsls	r0, r1, #5
 80054d0:	6979      	ldr	r1, [r7, #20]
 80054d2:	4401      	add	r1, r0
 80054d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80054d8:	4313      	orrs	r3, r2
 80054da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	0151      	lsls	r1, r2, #5
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	440a      	add	r2, r1
 80054f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054fa:	6113      	str	r3, [r2, #16]
 80054fc:	e033      	b.n	8005566 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	695a      	ldr	r2, [r3, #20]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	4413      	add	r3, r2
 8005508:	1e5a      	subs	r2, r3, #1
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005512:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	4413      	add	r3, r2
 800551c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005520:	691a      	ldr	r2, [r3, #16]
 8005522:	89fb      	ldrh	r3, [r7, #14]
 8005524:	04d9      	lsls	r1, r3, #19
 8005526:	4b31      	ldr	r3, [pc, #196]	; (80055ec <USB_EPStartXfer+0x3b4>)
 8005528:	400b      	ands	r3, r1
 800552a:	6939      	ldr	r1, [r7, #16]
 800552c:	0148      	lsls	r0, r1, #5
 800552e:	6979      	ldr	r1, [r7, #20]
 8005530:	4401      	add	r1, r0
 8005532:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005536:	4313      	orrs	r3, r2
 8005538:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	015a      	lsls	r2, r3, #5
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	4413      	add	r3, r2
 8005542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005546:	691a      	ldr	r2, [r3, #16]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	89f9      	ldrh	r1, [r7, #14]
 800554e:	fb01 f303 	mul.w	r3, r1, r3
 8005552:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005556:	6939      	ldr	r1, [r7, #16]
 8005558:	0148      	lsls	r0, r1, #5
 800555a:	6979      	ldr	r1, [r7, #20]
 800555c:	4401      	add	r1, r0
 800555e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005562:	4313      	orrs	r3, r2
 8005564:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	78db      	ldrb	r3, [r3, #3]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d128      	bne.n	80055c0 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800557a:	2b00      	cmp	r3, #0
 800557c:	d110      	bne.n	80055a0 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	015a      	lsls	r2, r3, #5
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	4413      	add	r3, r2
 8005586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	0151      	lsls	r1, r2, #5
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	440a      	add	r2, r1
 8005594:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005598:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800559c:	6013      	str	r3, [r2, #0]
 800559e:	e00f      	b.n	80055c0 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	015a      	lsls	r2, r3, #5
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	4413      	add	r3, r2
 80055a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	0151      	lsls	r1, r2, #5
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	440a      	add	r2, r1
 80055b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055be:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	015a      	lsls	r2, r3, #5
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	4413      	add	r3, r2
 80055c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	0151      	lsls	r1, r2, #5
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	440a      	add	r2, r1
 80055d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3718      	adds	r7, #24
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	1ff80000 	.word	0x1ff80000

080055f0 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	785b      	ldrb	r3, [r3, #1]
 8005608:	2b01      	cmp	r3, #1
 800560a:	f040 80ab 	bne.w	8005764 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d132      	bne.n	800567c <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	015a      	lsls	r2, r3, #5
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	4413      	add	r3, r2
 800561e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	0151      	lsls	r1, r2, #5
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	440a      	add	r2, r1
 800562c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005630:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005634:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005638:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	015a      	lsls	r2, r3, #5
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	4413      	add	r3, r2
 8005642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	0151      	lsls	r1, r2, #5
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	440a      	add	r2, r1
 8005650:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005654:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005658:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	015a      	lsls	r2, r3, #5
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	4413      	add	r3, r2
 8005662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	0151      	lsls	r1, r2, #5
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	440a      	add	r2, r1
 8005670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005674:	0cdb      	lsrs	r3, r3, #19
 8005676:	04db      	lsls	r3, r3, #19
 8005678:	6113      	str	r3, [r2, #16]
 800567a:	e04e      	b.n	800571a <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	015a      	lsls	r2, r3, #5
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	4413      	add	r3, r2
 8005684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	0151      	lsls	r1, r2, #5
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	440a      	add	r2, r1
 8005692:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005696:	0cdb      	lsrs	r3, r3, #19
 8005698:	04db      	lsls	r3, r3, #19
 800569a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	68ba      	ldr	r2, [r7, #8]
 80056ac:	0151      	lsls	r1, r2, #5
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	440a      	add	r2, r1
 80056b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056be:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	695a      	ldr	r2, [r3, #20]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d903      	bls.n	80056d4 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	689a      	ldr	r2, [r3, #8]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	0151      	lsls	r1, r2, #5
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	440a      	add	r2, r1
 80056ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	015a      	lsls	r2, r3, #5
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	4413      	add	r3, r2
 80056fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005700:	691a      	ldr	r2, [r3, #16]
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800570a:	68b9      	ldr	r1, [r7, #8]
 800570c:	0148      	lsls	r0, r1, #5
 800570e:	68f9      	ldr	r1, [r7, #12]
 8005710:	4401      	add	r1, r0
 8005712:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005716:	4313      	orrs	r3, r2
 8005718:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	015a      	lsls	r2, r3, #5
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	4413      	add	r3, r2
 8005722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	0151      	lsls	r1, r2, #5
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	440a      	add	r2, r1
 8005730:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005734:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005738:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d06d      	beq.n	800581e <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005748:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	f003 030f 	and.w	r3, r3, #15
 8005752:	2101      	movs	r1, #1
 8005754:	fa01 f303 	lsl.w	r3, r1, r3
 8005758:	68f9      	ldr	r1, [r7, #12]
 800575a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800575e:	4313      	orrs	r3, r2
 8005760:	634b      	str	r3, [r1, #52]	; 0x34
 8005762:	e05c      	b.n	800581e <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	015a      	lsls	r2, r3, #5
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	4413      	add	r3, r2
 800576c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	0151      	lsls	r1, r2, #5
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	440a      	add	r2, r1
 800577a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800577e:	0cdb      	lsrs	r3, r3, #19
 8005780:	04db      	lsls	r3, r3, #19
 8005782:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4413      	add	r3, r2
 800578c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	0151      	lsls	r1, r2, #5
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	440a      	add	r2, r1
 800579a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800579e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057a6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	695b      	ldr	r3, [r3, #20]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d003      	beq.n	80057b8 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	689a      	ldr	r2, [r3, #8]
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	015a      	lsls	r2, r3, #5
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	4413      	add	r3, r2
 80057c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	68ba      	ldr	r2, [r7, #8]
 80057c8:	0151      	lsls	r1, r2, #5
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	440a      	add	r2, r1
 80057ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	015a      	lsls	r2, r3, #5
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	4413      	add	r3, r2
 80057e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e4:	691a      	ldr	r2, [r3, #16]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057ee:	68b9      	ldr	r1, [r7, #8]
 80057f0:	0148      	lsls	r0, r1, #5
 80057f2:	68f9      	ldr	r1, [r7, #12]
 80057f4:	4401      	add	r1, r0
 80057f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80057fa:	4313      	orrs	r3, r2
 80057fc:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	4413      	add	r3, r2
 8005806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	0151      	lsls	r1, r2, #5
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	440a      	add	r2, r1
 8005814:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005818:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800581c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 800582c:	b480      	push	{r7}
 800582e:	b089      	sub	sp, #36	; 0x24
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	4611      	mov	r1, r2
 8005838:	461a      	mov	r2, r3
 800583a:	460b      	mov	r3, r1
 800583c:	71fb      	strb	r3, [r7, #7]
 800583e:	4613      	mov	r3, r2
 8005840:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800584a:	88bb      	ldrh	r3, [r7, #4]
 800584c:	3303      	adds	r3, #3
 800584e:	089b      	lsrs	r3, r3, #2
 8005850:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8005852:	2300      	movs	r3, #0
 8005854:	61bb      	str	r3, [r7, #24]
 8005856:	e00f      	b.n	8005878 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005858:	79fb      	ldrb	r3, [r7, #7]
 800585a:	031a      	lsls	r2, r3, #12
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	4413      	add	r3, r2
 8005860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005864:	461a      	mov	r2, r3
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6013      	str	r3, [r2, #0]
    pSrc++;
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	3304      	adds	r3, #4
 8005870:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	3301      	adds	r3, #1
 8005876:	61bb      	str	r3, [r7, #24]
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	429a      	cmp	r2, r3
 800587e:	d3eb      	bcc.n	8005858 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3724      	adds	r7, #36	; 0x24
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr

0800588e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800588e:	b480      	push	{r7}
 8005890:	b085      	sub	sp, #20
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
 8005896:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	785b      	ldrb	r3, [r3, #1]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d12c      	bne.n	8005904 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	015a      	lsls	r2, r3, #5
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	4413      	add	r3, r2
 80058b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	db12      	blt.n	80058e2 <USB_EPSetStall+0x54>
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00f      	beq.n	80058e2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	015a      	lsls	r2, r3, #5
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	4413      	add	r3, r2
 80058ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68ba      	ldr	r2, [r7, #8]
 80058d2:	0151      	lsls	r1, r2, #5
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	440a      	add	r2, r1
 80058d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058e0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	015a      	lsls	r2, r3, #5
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	4413      	add	r3, r2
 80058ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	0151      	lsls	r1, r2, #5
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	440a      	add	r2, r1
 80058f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005900:	6013      	str	r3, [r2, #0]
 8005902:	e02b      	b.n	800595c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	015a      	lsls	r2, r3, #5
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	4413      	add	r3, r2
 800590c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	db12      	blt.n	800593c <USB_EPSetStall+0xae>
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00f      	beq.n	800593c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	015a      	lsls	r2, r3, #5
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	4413      	add	r3, r2
 8005924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68ba      	ldr	r2, [r7, #8]
 800592c:	0151      	lsls	r1, r2, #5
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	440a      	add	r2, r1
 8005932:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005936:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800593a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	4413      	add	r3, r2
 8005944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68ba      	ldr	r2, [r7, #8]
 800594c:	0151      	lsls	r1, r2, #5
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	440a      	add	r2, r1
 8005952:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005956:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800595a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800596a:	b480      	push	{r7}
 800596c:	b085      	sub	sp, #20
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005984:	f023 0303 	bic.w	r3, r3, #3
 8005988:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005998:	f023 0302 	bic.w	r3, r3, #2
 800599c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3714      	adds	r7, #20
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80059c6:	f023 0303 	bic.w	r3, r3, #3
 80059ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059da:	f043 0302 	orr.w	r3, r3, #2
 80059de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3714      	adds	r7, #20
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
	...

080059f0 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	333c      	adds	r3, #60	; 0x3c
 8005a02:	3304      	adds	r3, #4
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	4a1c      	ldr	r2, [pc, #112]	; (8005a7c <USB_EP0_OutStart+0x8c>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d90a      	bls.n	8005a26 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a20:	d101      	bne.n	8005a26 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8005a22:	2300      	movs	r3, #0
 8005a24:	e024      	b.n	8005a70 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	2300      	movs	r3, #0
 8005a30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a54:	f043 0318 	orr.w	r3, r3, #24
 8005a58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a68:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005a6c:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3714      	adds	r7, #20
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	4f54300a 	.word	0x4f54300a

08005a80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	3301      	adds	r3, #1
 8005a90:	60fb      	str	r3, [r7, #12]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	4a13      	ldr	r2, [pc, #76]	; (8005ae4 <USB_CoreReset+0x64>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d901      	bls.n	8005a9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e01b      	b.n	8005ad6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	daf2      	bge.n	8005a8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	f043 0201 	orr.w	r2, r3, #1
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	60fb      	str	r3, [r7, #12]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4a09      	ldr	r2, [pc, #36]	; (8005ae4 <USB_CoreReset+0x64>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d901      	bls.n	8005ac8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e006      	b.n	8005ad6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	f003 0301 	and.w	r3, r3, #1
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d0f0      	beq.n	8005ab6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3714      	adds	r7, #20
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	00030d40 	.word	0x00030d40

08005ae8 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	460b      	mov	r3, r1
 8005af2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8005af4:	2018      	movs	r0, #24
 8005af6:	f009 fc59 	bl	800f3ac <malloc>
 8005afa:	4603      	mov	r3, r0
 8005afc:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d105      	bne.n	8005b10 <USBD_CUSTOM_HID_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	e038      	b.n	8005b82 <USBD_CUSTOM_HID_Init+0x9a>
  }

  pdev->pClassData = (void *)hhid;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	7c1b      	ldrb	r3, [r3, #16]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d107      	bne.n	8005b30 <USBD_CUSTOM_HID_Init+0x48>
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2205      	movs	r2, #5
 8005b24:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2205      	movs	r2, #5
 8005b2a:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 8005b2e:	e006      	b.n	8005b3e <USBD_CUSTOM_HID_Init+0x56>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2205      	movs	r2, #5
 8005b34:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2205      	movs	r2, #5
 8005b3a:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8005b3e:	2302      	movs	r3, #2
 8005b40:	2203      	movs	r2, #3
 8005b42:	2181      	movs	r1, #129	; 0x81
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 fd6f 	bl	8006628 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8005b50:	2302      	movs	r3, #2
 8005b52:	2203      	movs	r2, #3
 8005b54:	2101      	movs	r1, #1
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 fd66 	bl	8006628 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  hhid->state = CUSTOM_HID_IDLE;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	2302      	movs	r3, #2
 8005b78:	2101      	movs	r1, #1
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 fe36 	bl	80067ec <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b082      	sub	sp, #8
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
 8005b92:	460b      	mov	r3, r1
 8005b94:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8005b96:	2181      	movs	r1, #129	; 0x81
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 fd83 	bl	80066a4 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8005baa:	2101      	movs	r1, #1
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 fd79 	bl	80066a4 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = 0U;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00e      	beq.n	8005bea <USBD_CUSTOM_HID_DeInit+0x60>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f009 fbed 	bl	800f3bc <free>
    pdev->pClassData = NULL;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3708      	adds	r7, #8
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b088      	sub	sp, #32
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c04:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8005c06:	2300      	movs	r3, #0
 8005c08:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c12:	2300      	movs	r3, #0
 8005c14:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d051      	beq.n	8005cc6 <USBD_CUSTOM_HID_Setup+0xd2>
 8005c22:	2b20      	cmp	r3, #32
 8005c24:	f040 80d9 	bne.w	8005dda <USBD_CUSTOM_HID_Setup+0x1e6>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	785b      	ldrb	r3, [r3, #1]
 8005c2c:	3b02      	subs	r3, #2
 8005c2e:	2b09      	cmp	r3, #9
 8005c30:	d841      	bhi.n	8005cb6 <USBD_CUSTOM_HID_Setup+0xc2>
 8005c32:	a201      	add	r2, pc, #4	; (adr r2, 8005c38 <USBD_CUSTOM_HID_Setup+0x44>)
 8005c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c38:	08005c91 	.word	0x08005c91
 8005c3c:	08005c6f 	.word	0x08005c6f
 8005c40:	08005cb7 	.word	0x08005cb7
 8005c44:	08005cb7 	.word	0x08005cb7
 8005c48:	08005cb7 	.word	0x08005cb7
 8005c4c:	08005cb7 	.word	0x08005cb7
 8005c50:	08005cb7 	.word	0x08005cb7
 8005c54:	08005ca1 	.word	0x08005ca1
 8005c58:	08005c7f 	.word	0x08005c7f
 8005c5c:	08005c61 	.word	0x08005c61
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	885b      	ldrh	r3, [r3, #2]
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	461a      	mov	r2, r3
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	605a      	str	r2, [r3, #4]
      break;
 8005c6c:	e02a      	b.n	8005cc4 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	3304      	adds	r3, #4
 8005c72:	2201      	movs	r2, #1
 8005c74:	4619      	mov	r1, r3
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 fa51 	bl	800611e <USBD_CtlSendData>
      break;
 8005c7c:	e022      	b.n	8005cc4 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	885b      	ldrh	r3, [r3, #2]
 8005c82:	0a1b      	lsrs	r3, r3, #8
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	461a      	mov	r2, r3
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	609a      	str	r2, [r3, #8]
      break;
 8005c8e:	e019      	b.n	8005cc4 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	3308      	adds	r3, #8
 8005c94:	2201      	movs	r2, #1
 8005c96:	4619      	mov	r1, r3
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 fa40 	bl	800611e <USBD_CtlSendData>
      break;
 8005c9e:	e011      	b.n	8005cc4 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	611a      	str	r2, [r3, #16]
      (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8005ca6:	6939      	ldr	r1, [r7, #16]
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	88db      	ldrh	r3, [r3, #6]
 8005cac:	461a      	mov	r2, r3
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 fa50 	bl	8006154 <USBD_CtlPrepareRx>
      break;
 8005cb4:	e006      	b.n	8005cc4 <USBD_CUSTOM_HID_Setup+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005cb6:	6839      	ldr	r1, [r7, #0]
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 f9bf 	bl	800603c <USBD_CtlError>
      ret = USBD_FAIL;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	75fb      	strb	r3, [r7, #23]
      break;
 8005cc2:	bf00      	nop
    }
    break;
 8005cc4:	e090      	b.n	8005de8 <USBD_CUSTOM_HID_Setup+0x1f4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	785b      	ldrb	r3, [r3, #1]
 8005cca:	2b0b      	cmp	r3, #11
 8005ccc:	d87c      	bhi.n	8005dc8 <USBD_CUSTOM_HID_Setup+0x1d4>
 8005cce:	a201      	add	r2, pc, #4	; (adr r2, 8005cd4 <USBD_CUSTOM_HID_Setup+0xe0>)
 8005cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd4:	08005d05 	.word	0x08005d05
 8005cd8:	08005dd7 	.word	0x08005dd7
 8005cdc:	08005dc9 	.word	0x08005dc9
 8005ce0:	08005dc9 	.word	0x08005dc9
 8005ce4:	08005dc9 	.word	0x08005dc9
 8005ce8:	08005dc9 	.word	0x08005dc9
 8005cec:	08005d2d 	.word	0x08005d2d
 8005cf0:	08005dc9 	.word	0x08005dc9
 8005cf4:	08005dc9 	.word	0x08005dc9
 8005cf8:	08005dc9 	.word	0x08005dc9
 8005cfc:	08005d7b 	.word	0x08005d7b
 8005d00:	08005da3 	.word	0x08005da3
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d0a:	2b03      	cmp	r3, #3
 8005d0c:	d107      	bne.n	8005d1e <USBD_CUSTOM_HID_Setup+0x12a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005d0e:	f107 030e 	add.w	r3, r7, #14
 8005d12:	2202      	movs	r2, #2
 8005d14:	4619      	mov	r1, r3
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 fa01 	bl	800611e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005d1c:	e05c      	b.n	8005dd8 <USBD_CUSTOM_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 8005d1e:	6839      	ldr	r1, [r7, #0]
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 f98b 	bl	800603c <USBD_CtlError>
        ret = USBD_FAIL;
 8005d26:	2303      	movs	r3, #3
 8005d28:	75fb      	strb	r3, [r7, #23]
      break;
 8005d2a:	e055      	b.n	8005dd8 <USBD_CUSTOM_HID_Setup+0x1e4>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	885b      	ldrh	r3, [r3, #2]
 8005d30:	0a1b      	lsrs	r3, r3, #8
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	2b22      	cmp	r3, #34	; 0x22
 8005d36:	d10b      	bne.n	8005d50 <USBD_CUSTOM_HID_Setup+0x15c>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	88db      	ldrh	r3, [r3, #6]
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	bf28      	it	cs
 8005d40:	2302      	movcs	r3, #2
 8005d42:	83fb      	strh	r3, [r7, #30]
        pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	61bb      	str	r3, [r7, #24]
 8005d4e:	e00d      	b.n	8005d6c <USBD_CUSTOM_HID_Setup+0x178>
      }
      else
      {
        if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	885b      	ldrh	r3, [r3, #2]
 8005d54:	0a1b      	lsrs	r3, r3, #8
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	2b21      	cmp	r3, #33	; 0x21
 8005d5a:	d107      	bne.n	8005d6c <USBD_CUSTOM_HID_Setup+0x178>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 8005d5c:	4b25      	ldr	r3, [pc, #148]	; (8005df4 <USBD_CUSTOM_HID_Setup+0x200>)
 8005d5e:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	88db      	ldrh	r3, [r3, #6]
 8005d64:	2b09      	cmp	r3, #9
 8005d66:	bf28      	it	cs
 8005d68:	2309      	movcs	r3, #9
 8005d6a:	83fb      	strh	r3, [r7, #30]
        }
      }

      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005d6c:	8bfb      	ldrh	r3, [r7, #30]
 8005d6e:	461a      	mov	r2, r3
 8005d70:	69b9      	ldr	r1, [r7, #24]
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f9d3 	bl	800611e <USBD_CtlSendData>
      break;
 8005d78:	e02e      	b.n	8005dd8 <USBD_CUSTOM_HID_Setup+0x1e4>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d80:	2b03      	cmp	r3, #3
 8005d82:	d107      	bne.n	8005d94 <USBD_CUSTOM_HID_Setup+0x1a0>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	330c      	adds	r3, #12
 8005d88:	2201      	movs	r2, #1
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 f9c6 	bl	800611e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005d92:	e021      	b.n	8005dd8 <USBD_CUSTOM_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 8005d94:	6839      	ldr	r1, [r7, #0]
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 f950 	bl	800603c <USBD_CtlError>
        ret = USBD_FAIL;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	75fb      	strb	r3, [r7, #23]
      break;
 8005da0:	e01a      	b.n	8005dd8 <USBD_CUSTOM_HID_Setup+0x1e4>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005da8:	2b03      	cmp	r3, #3
 8005daa:	d106      	bne.n	8005dba <USBD_CUSTOM_HID_Setup+0x1c6>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	885b      	ldrh	r3, [r3, #2]
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	461a      	mov	r2, r3
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	60da      	str	r2, [r3, #12]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005db8:	e00e      	b.n	8005dd8 <USBD_CUSTOM_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 8005dba:	6839      	ldr	r1, [r7, #0]
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 f93d 	bl	800603c <USBD_CtlError>
        ret = USBD_FAIL;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	75fb      	strb	r3, [r7, #23]
      break;
 8005dc6:	e007      	b.n	8005dd8 <USBD_CUSTOM_HID_Setup+0x1e4>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005dc8:	6839      	ldr	r1, [r7, #0]
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 f936 	bl	800603c <USBD_CtlError>
      ret = USBD_FAIL;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	75fb      	strb	r3, [r7, #23]
      break;
 8005dd4:	e000      	b.n	8005dd8 <USBD_CUSTOM_HID_Setup+0x1e4>
      break;
 8005dd6:	bf00      	nop
    }
    break;
 8005dd8:	e006      	b.n	8005de8 <USBD_CUSTOM_HID_Setup+0x1f4>

  default:
    USBD_CtlError(pdev, req);
 8005dda:	6839      	ldr	r1, [r7, #0]
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 f92d 	bl	800603c <USBD_CtlError>
    ret = USBD_FAIL;
 8005de2:	2303      	movs	r3, #3
 8005de4:	75fb      	strb	r3, [r7, #23]
    break;
 8005de6:	bf00      	nop
  }
  return (uint8_t)ret;
 8005de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3720      	adds	r7, #32
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	200000c8 	.word	0x200000c8

08005df8 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2229      	movs	r2, #41	; 0x29
 8005e04:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 8005e06:	4b03      	ldr	r3, [pc, #12]	; (8005e14 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr
 8005e14:	20000044 	.word	0x20000044

08005e18 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2229      	movs	r2, #41	; 0x29
 8005e24:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 8005e26:	4b03      	ldr	r3, [pc, #12]	; (8005e34 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr
 8005e34:	20000070 	.word	0x20000070

08005e38 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2229      	movs	r2, #41	; 0x29
 8005e44:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8005e46:	4b03      	ldr	r3, [pc, #12]	; (8005e54 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr
 8005e54:	2000009c 	.word	0x2000009c

08005e58 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	460b      	mov	r3, r1
 8005e62:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	460b      	mov	r3, r1
 8005e86:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d101      	bne.n	8005e96 <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e00e      	b.n	8005eb4 <USBD_CUSTOM_HID_DataOut+0x38>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e9c:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	7810      	ldrb	r0, [r2, #0]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	7852      	ldrb	r2, [r2, #1]
 8005eae:	4611      	mov	r1, r2
 8005eb0:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d101      	bne.n	8005ed2 <USBD_CUSTOM_HID_ReceivePacket+0x16>
  {
    return (uint8_t)USBD_FAIL;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e00a      	b.n	8005ee8 <USBD_CUSTOM_HID_ReceivePacket+0x2c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ed8:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	2302      	movs	r3, #2
 8005ede:	2101      	movs	r1, #1
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 fc83 	bl	80067ec <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005efe:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d10c      	bne.n	8005f22 <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	7810      	ldrb	r0, [r2, #0]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	7852      	ldrb	r2, [r2, #1]
 8005f18:	4611      	mov	r1, r2
 8005f1a:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3710      	adds	r7, #16
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	220a      	movs	r2, #10
 8005f38:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8005f3a:	4b03      	ldr	r3, [pc, #12]	; (8005f48 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr
 8005f48:	200000d4 	.word	0x200000d4

08005f4c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d101      	bne.n	8005f60 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e004      	b.n	8005f6a <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	683a      	ldr	r2, [r7, #0]
 8005f64:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	370c      	adds	r7, #12
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr

08005f76 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b086      	sub	sp, #24
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	60f8      	str	r0, [r7, #12]
 8005f7e:	60b9      	str	r1, [r7, #8]
 8005f80:	4613      	mov	r3, r2
 8005f82:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e01f      	b.n	8005fce <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d003      	beq.n	8005fb4 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	79fa      	ldrb	r2, [r7, #7]
 8005fc0:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	f000 fab4 	bl	8006530 <USBD_LL_Init>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3718      	adds	r7, #24
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b084      	sub	sp, #16
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
 8005fde:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d101      	bne.n	8005fee <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e016      	b.n	800601c <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	683a      	ldr	r2, [r7, #0]
 8005ff2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00b      	beq.n	800601a <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600a:	f107 020e 	add.w	r2, r7, #14
 800600e:	4610      	mov	r0, r2
 8006010:	4798      	blx	r3
 8006012:	4602      	mov	r2, r0
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 fac9 	bl	80065c4 <USBD_LL_Start>
 8006032:	4603      	mov	r3, r0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3708      	adds	r7, #8
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006046:	2180      	movs	r1, #128	; 0x80
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 fb61 	bl	8006710 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800604e:	2100      	movs	r1, #0
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 fb5d 	bl	8006710 <USBD_LL_StallEP>
}
 8006056:	bf00      	nop
 8006058:	3708      	adds	r7, #8
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b086      	sub	sp, #24
 8006062:	af00      	add	r7, sp, #0
 8006064:	60f8      	str	r0, [r7, #12]
 8006066:	60b9      	str	r1, [r7, #8]
 8006068:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800606a:	2300      	movs	r3, #0
 800606c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d036      	beq.n	80060e2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006078:	6938      	ldr	r0, [r7, #16]
 800607a:	f000 f836 	bl	80060ea <USBD_GetLen>
 800607e:	4603      	mov	r3, r0
 8006080:	3301      	adds	r3, #1
 8006082:	b29b      	uxth	r3, r3
 8006084:	005b      	lsls	r3, r3, #1
 8006086:	b29a      	uxth	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800608c:	7dfb      	ldrb	r3, [r7, #23]
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	4413      	add	r3, r2
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	7812      	ldrb	r2, [r2, #0]
 8006096:	701a      	strb	r2, [r3, #0]
  idx++;
 8006098:	7dfb      	ldrb	r3, [r7, #23]
 800609a:	3301      	adds	r3, #1
 800609c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800609e:	7dfb      	ldrb	r3, [r7, #23]
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	4413      	add	r3, r2
 80060a4:	2203      	movs	r2, #3
 80060a6:	701a      	strb	r2, [r3, #0]
  idx++;
 80060a8:	7dfb      	ldrb	r3, [r7, #23]
 80060aa:	3301      	adds	r3, #1
 80060ac:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80060ae:	e013      	b.n	80060d8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80060b0:	7dfb      	ldrb	r3, [r7, #23]
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	4413      	add	r3, r2
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	7812      	ldrb	r2, [r2, #0]
 80060ba:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	3301      	adds	r3, #1
 80060c0:	613b      	str	r3, [r7, #16]
    idx++;
 80060c2:	7dfb      	ldrb	r3, [r7, #23]
 80060c4:	3301      	adds	r3, #1
 80060c6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80060c8:	7dfb      	ldrb	r3, [r7, #23]
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	4413      	add	r3, r2
 80060ce:	2200      	movs	r2, #0
 80060d0:	701a      	strb	r2, [r3, #0]
    idx++;
 80060d2:	7dfb      	ldrb	r3, [r7, #23]
 80060d4:	3301      	adds	r3, #1
 80060d6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1e7      	bne.n	80060b0 <USBD_GetString+0x52>
 80060e0:	e000      	b.n	80060e4 <USBD_GetString+0x86>
    return;
 80060e2:	bf00      	nop
  }
}
 80060e4:	3718      	adds	r7, #24
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80060ea:	b480      	push	{r7}
 80060ec:	b085      	sub	sp, #20
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80060f2:	2300      	movs	r3, #0
 80060f4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80060fa:	e005      	b.n	8006108 <USBD_GetLen+0x1e>
  {
    len++;
 80060fc:	7bfb      	ldrb	r3, [r7, #15]
 80060fe:	3301      	adds	r3, #1
 8006100:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	3301      	adds	r3, #1
 8006106:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1f5      	bne.n	80060fc <USBD_GetLen+0x12>
  }

  return len;
 8006110:	7bfb      	ldrb	r3, [r7, #15]
}
 8006112:	4618      	mov	r0, r3
 8006114:	3714      	adds	r7, #20
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b084      	sub	sp, #16
 8006122:	af00      	add	r7, sp, #0
 8006124:	60f8      	str	r0, [r7, #12]
 8006126:	60b9      	str	r1, [r7, #8]
 8006128:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2202      	movs	r2, #2
 800612e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	68ba      	ldr	r2, [r7, #8]
 8006142:	2100      	movs	r1, #0
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f000 fb19 	bl	800677c <USBD_LL_Transmit>

  return USBD_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3710      	adds	r7, #16
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2203      	movs	r2, #3
 8006164:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	2100      	movs	r1, #0
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f000 fb34 	bl	80067ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
	...

08006190 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006194:	2200      	movs	r2, #0
 8006196:	4912      	ldr	r1, [pc, #72]	; (80061e0 <MX_USB_DEVICE_Init+0x50>)
 8006198:	4812      	ldr	r0, [pc, #72]	; (80061e4 <MX_USB_DEVICE_Init+0x54>)
 800619a:	f7ff feec 	bl	8005f76 <USBD_Init>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d001      	beq.n	80061a8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80061a4:	f7fa ff30 	bl	8001008 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 80061a8:	490f      	ldr	r1, [pc, #60]	; (80061e8 <MX_USB_DEVICE_Init+0x58>)
 80061aa:	480e      	ldr	r0, [pc, #56]	; (80061e4 <MX_USB_DEVICE_Init+0x54>)
 80061ac:	f7ff ff13 	bl	8005fd6 <USBD_RegisterClass>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80061b6:	f7fa ff27 	bl	8001008 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80061ba:	490c      	ldr	r1, [pc, #48]	; (80061ec <MX_USB_DEVICE_Init+0x5c>)
 80061bc:	4809      	ldr	r0, [pc, #36]	; (80061e4 <MX_USB_DEVICE_Init+0x54>)
 80061be:	f7ff fec5 	bl	8005f4c <USBD_CUSTOM_HID_RegisterInterface>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d001      	beq.n	80061cc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80061c8:	f7fa ff1e 	bl	8001008 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80061cc:	4805      	ldr	r0, [pc, #20]	; (80061e4 <MX_USB_DEVICE_Init+0x54>)
 80061ce:	f7ff ff29 	bl	8006024 <USBD_Start>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d001      	beq.n	80061dc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80061d8:	f7fa ff16 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80061dc:	bf00      	nop
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	200000f4 	.word	0x200000f4
 80061e4:	2004eebc 	.word	0x2004eebc
 80061e8:	2000000c 	.word	0x2000000c
 80061ec:	200000e4 	.word	0x200000e4

080061f0 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 80061f0:	b480      	push	{r7}
 80061f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80061f4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8006200:	b480      	push	{r7}
 8006202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8006204:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006206:	4618      	mov	r0, r3
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	4603      	mov	r3, r0
 8006218:	460a      	mov	r2, r1
 800621a:	71fb      	strb	r3, [r7, #7]
 800621c:	4613      	mov	r3, r2
 800621e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 8006220:	4803      	ldr	r0, [pc, #12]	; (8006230 <CUSTOM_HID_OutEvent_FS+0x20>)
 8006222:	f7ff fe4b 	bl	8005ebc <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 8006226:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006228:	4618      	mov	r0, r3
 800622a:	3708      	adds	r7, #8
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	2004eebc 	.word	0x2004eebc

08006234 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	4603      	mov	r3, r0
 800623c:	6039      	str	r1, [r7, #0]
 800623e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	2212      	movs	r2, #18
 8006244:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006246:	4b03      	ldr	r3, [pc, #12]	; (8006254 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006248:	4618      	mov	r0, r3
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr
 8006254:	20000114 	.word	0x20000114

08006258 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	4603      	mov	r3, r0
 8006260:	6039      	str	r1, [r7, #0]
 8006262:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	2204      	movs	r2, #4
 8006268:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800626a:	4b03      	ldr	r3, [pc, #12]	; (8006278 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800626c:	4618      	mov	r0, r3
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr
 8006278:	20000134 	.word	0x20000134

0800627c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
 8006282:	4603      	mov	r3, r0
 8006284:	6039      	str	r1, [r7, #0]
 8006286:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006288:	79fb      	ldrb	r3, [r7, #7]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d105      	bne.n	800629a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800628e:	683a      	ldr	r2, [r7, #0]
 8006290:	4907      	ldr	r1, [pc, #28]	; (80062b0 <USBD_FS_ProductStrDescriptor+0x34>)
 8006292:	4808      	ldr	r0, [pc, #32]	; (80062b4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006294:	f7ff fee3 	bl	800605e <USBD_GetString>
 8006298:	e004      	b.n	80062a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800629a:	683a      	ldr	r2, [r7, #0]
 800629c:	4904      	ldr	r1, [pc, #16]	; (80062b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800629e:	4805      	ldr	r0, [pc, #20]	; (80062b4 <USBD_FS_ProductStrDescriptor+0x38>)
 80062a0:	f7ff fedd 	bl	800605e <USBD_GetString>
  }
  return USBD_StrDesc;
 80062a4:	4b02      	ldr	r3, [pc, #8]	; (80062b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3708      	adds	r7, #8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	2004f18c 	.word	0x2004f18c
 80062b4:	08010584 	.word	0x08010584

080062b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	4603      	mov	r3, r0
 80062c0:	6039      	str	r1, [r7, #0]
 80062c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80062c4:	683a      	ldr	r2, [r7, #0]
 80062c6:	4904      	ldr	r1, [pc, #16]	; (80062d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80062c8:	4804      	ldr	r0, [pc, #16]	; (80062dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80062ca:	f7ff fec8 	bl	800605e <USBD_GetString>
  return USBD_StrDesc;
 80062ce:	4b02      	ldr	r3, [pc, #8]	; (80062d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	2004f18c 	.word	0x2004f18c
 80062dc:	080105a4 	.word	0x080105a4

080062e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	4603      	mov	r3, r0
 80062e8:	6039      	str	r1, [r7, #0]
 80062ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	221a      	movs	r2, #26
 80062f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80062f2:	f000 f855 	bl	80063a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80062f6:	4b02      	ldr	r3, [pc, #8]	; (8006300 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3708      	adds	r7, #8
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	20000138 	.word	0x20000138

08006304 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	4603      	mov	r3, r0
 800630c:	6039      	str	r1, [r7, #0]
 800630e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006310:	79fb      	ldrb	r3, [r7, #7]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d105      	bne.n	8006322 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006316:	683a      	ldr	r2, [r7, #0]
 8006318:	4907      	ldr	r1, [pc, #28]	; (8006338 <USBD_FS_ConfigStrDescriptor+0x34>)
 800631a:	4808      	ldr	r0, [pc, #32]	; (800633c <USBD_FS_ConfigStrDescriptor+0x38>)
 800631c:	f7ff fe9f 	bl	800605e <USBD_GetString>
 8006320:	e004      	b.n	800632c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006322:	683a      	ldr	r2, [r7, #0]
 8006324:	4904      	ldr	r1, [pc, #16]	; (8006338 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006326:	4805      	ldr	r0, [pc, #20]	; (800633c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006328:	f7ff fe99 	bl	800605e <USBD_GetString>
  }
  return USBD_StrDesc;
 800632c:	4b02      	ldr	r3, [pc, #8]	; (8006338 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800632e:	4618      	mov	r0, r3
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	2004f18c 	.word	0x2004f18c
 800633c:	080105b8 	.word	0x080105b8

08006340 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	4603      	mov	r3, r0
 8006348:	6039      	str	r1, [r7, #0]
 800634a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800634c:	79fb      	ldrb	r3, [r7, #7]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d105      	bne.n	800635e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	4907      	ldr	r1, [pc, #28]	; (8006374 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006356:	4808      	ldr	r0, [pc, #32]	; (8006378 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006358:	f7ff fe81 	bl	800605e <USBD_GetString>
 800635c:	e004      	b.n	8006368 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800635e:	683a      	ldr	r2, [r7, #0]
 8006360:	4904      	ldr	r1, [pc, #16]	; (8006374 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006362:	4805      	ldr	r0, [pc, #20]	; (8006378 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006364:	f7ff fe7b 	bl	800605e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006368:	4b02      	ldr	r3, [pc, #8]	; (8006374 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800636a:	4618      	mov	r0, r3
 800636c:	3708      	adds	r7, #8
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	2004f18c 	.word	0x2004f18c
 8006378:	080105cc 	.word	0x080105cc

0800637c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	4603      	mov	r3, r0
 8006384:	6039      	str	r1, [r7, #0]
 8006386:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	220c      	movs	r2, #12
 800638c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800638e:	4b03      	ldr	r3, [pc, #12]	; (800639c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8006390:	4618      	mov	r0, r3
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr
 800639c:	20000128 	.word	0x20000128

080063a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80063a6:	4b0f      	ldr	r3, [pc, #60]	; (80063e4 <Get_SerialNum+0x44>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80063ac:	4b0e      	ldr	r3, [pc, #56]	; (80063e8 <Get_SerialNum+0x48>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80063b2:	4b0e      	ldr	r3, [pc, #56]	; (80063ec <Get_SerialNum+0x4c>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4413      	add	r3, r2
 80063be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d009      	beq.n	80063da <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80063c6:	2208      	movs	r2, #8
 80063c8:	4909      	ldr	r1, [pc, #36]	; (80063f0 <Get_SerialNum+0x50>)
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	f000 f814 	bl	80063f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80063d0:	2204      	movs	r2, #4
 80063d2:	4908      	ldr	r1, [pc, #32]	; (80063f4 <Get_SerialNum+0x54>)
 80063d4:	68b8      	ldr	r0, [r7, #8]
 80063d6:	f000 f80f 	bl	80063f8 <IntToUnicode>
  }
}
 80063da:	bf00      	nop
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	1fff7590 	.word	0x1fff7590
 80063e8:	1fff7594 	.word	0x1fff7594
 80063ec:	1fff7598 	.word	0x1fff7598
 80063f0:	2000013a 	.word	0x2000013a
 80063f4:	2000014a 	.word	0x2000014a

080063f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b087      	sub	sp, #28
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	4613      	mov	r3, r2
 8006404:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006406:	2300      	movs	r3, #0
 8006408:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800640a:	2300      	movs	r3, #0
 800640c:	75fb      	strb	r3, [r7, #23]
 800640e:	e027      	b.n	8006460 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	0f1b      	lsrs	r3, r3, #28
 8006414:	2b09      	cmp	r3, #9
 8006416:	d80b      	bhi.n	8006430 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	0f1b      	lsrs	r3, r3, #28
 800641c:	b2da      	uxtb	r2, r3
 800641e:	7dfb      	ldrb	r3, [r7, #23]
 8006420:	005b      	lsls	r3, r3, #1
 8006422:	4619      	mov	r1, r3
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	440b      	add	r3, r1
 8006428:	3230      	adds	r2, #48	; 0x30
 800642a:	b2d2      	uxtb	r2, r2
 800642c:	701a      	strb	r2, [r3, #0]
 800642e:	e00a      	b.n	8006446 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	0f1b      	lsrs	r3, r3, #28
 8006434:	b2da      	uxtb	r2, r3
 8006436:	7dfb      	ldrb	r3, [r7, #23]
 8006438:	005b      	lsls	r3, r3, #1
 800643a:	4619      	mov	r1, r3
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	440b      	add	r3, r1
 8006440:	3237      	adds	r2, #55	; 0x37
 8006442:	b2d2      	uxtb	r2, r2
 8006444:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	011b      	lsls	r3, r3, #4
 800644a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800644c:	7dfb      	ldrb	r3, [r7, #23]
 800644e:	005b      	lsls	r3, r3, #1
 8006450:	3301      	adds	r3, #1
 8006452:	68ba      	ldr	r2, [r7, #8]
 8006454:	4413      	add	r3, r2
 8006456:	2200      	movs	r2, #0
 8006458:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800645a:	7dfb      	ldrb	r3, [r7, #23]
 800645c:	3301      	adds	r3, #1
 800645e:	75fb      	strb	r3, [r7, #23]
 8006460:	7dfa      	ldrb	r2, [r7, #23]
 8006462:	79fb      	ldrb	r3, [r7, #7]
 8006464:	429a      	cmp	r2, r3
 8006466:	d3d3      	bcc.n	8006410 <IntToUnicode+0x18>
  }
}
 8006468:	bf00      	nop
 800646a:	371c      	adds	r7, #28
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b08a      	sub	sp, #40	; 0x28
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800647c:	f107 0314 	add.w	r3, r7, #20
 8006480:	2200      	movs	r2, #0
 8006482:	601a      	str	r2, [r3, #0]
 8006484:	605a      	str	r2, [r3, #4]
 8006486:	609a      	str	r2, [r3, #8]
 8006488:	60da      	str	r2, [r3, #12]
 800648a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006494:	d146      	bne.n	8006524 <HAL_PCD_MspInit+0xb0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006496:	4b25      	ldr	r3, [pc, #148]	; (800652c <HAL_PCD_MspInit+0xb8>)
 8006498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800649a:	4a24      	ldr	r2, [pc, #144]	; (800652c <HAL_PCD_MspInit+0xb8>)
 800649c:	f043 0301 	orr.w	r3, r3, #1
 80064a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80064a2:	4b22      	ldr	r3, [pc, #136]	; (800652c <HAL_PCD_MspInit+0xb8>)
 80064a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064a6:	f003 0301 	and.w	r3, r3, #1
 80064aa:	613b      	str	r3, [r7, #16]
 80064ac:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80064ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80064b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064b4:	2302      	movs	r3, #2
 80064b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064b8:	2300      	movs	r3, #0
 80064ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064bc:	2303      	movs	r3, #3
 80064be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80064c0:	230a      	movs	r3, #10
 80064c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064c4:	f107 0314 	add.w	r3, r7, #20
 80064c8:	4619      	mov	r1, r3
 80064ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80064ce:	f7fb fa29 	bl	8001924 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80064d2:	4b16      	ldr	r3, [pc, #88]	; (800652c <HAL_PCD_MspInit+0xb8>)
 80064d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064d6:	4a15      	ldr	r2, [pc, #84]	; (800652c <HAL_PCD_MspInit+0xb8>)
 80064d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80064dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80064de:	4b13      	ldr	r3, [pc, #76]	; (800652c <HAL_PCD_MspInit+0xb8>)
 80064e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064e6:	60fb      	str	r3, [r7, #12]
 80064e8:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064ea:	4b10      	ldr	r3, [pc, #64]	; (800652c <HAL_PCD_MspInit+0xb8>)
 80064ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d114      	bne.n	8006520 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064f6:	4b0d      	ldr	r3, [pc, #52]	; (800652c <HAL_PCD_MspInit+0xb8>)
 80064f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064fa:	4a0c      	ldr	r2, [pc, #48]	; (800652c <HAL_PCD_MspInit+0xb8>)
 80064fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006500:	6593      	str	r3, [r2, #88]	; 0x58
 8006502:	4b0a      	ldr	r3, [pc, #40]	; (800652c <HAL_PCD_MspInit+0xb8>)
 8006504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800650a:	60bb      	str	r3, [r7, #8]
 800650c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800650e:	f7fb ffd5 	bl	80024bc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006512:	4b06      	ldr	r3, [pc, #24]	; (800652c <HAL_PCD_MspInit+0xb8>)
 8006514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006516:	4a05      	ldr	r2, [pc, #20]	; (800652c <HAL_PCD_MspInit+0xb8>)
 8006518:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800651c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800651e:	e001      	b.n	8006524 <HAL_PCD_MspInit+0xb0>
      HAL_PWREx_EnableVddUSB();
 8006520:	f7fb ffcc 	bl	80024bc <HAL_PWREx_EnableVddUSB>
}
 8006524:	bf00      	nop
 8006526:	3728      	adds	r7, #40	; 0x28
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}
 800652c:	40021000 	.word	0x40021000

08006530 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d139      	bne.n	80065b4 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006540:	4a1f      	ldr	r2, [pc, #124]	; (80065c0 <USBD_LL_Init+0x90>)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a1d      	ldr	r2, [pc, #116]	; (80065c0 <USBD_LL_Init+0x90>)
 800654c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006550:	4b1b      	ldr	r3, [pc, #108]	; (80065c0 <USBD_LL_Init+0x90>)
 8006552:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006556:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8006558:	4b19      	ldr	r3, [pc, #100]	; (80065c0 <USBD_LL_Init+0x90>)
 800655a:	2206      	movs	r2, #6
 800655c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800655e:	4b18      	ldr	r3, [pc, #96]	; (80065c0 <USBD_LL_Init+0x90>)
 8006560:	2202      	movs	r2, #2
 8006562:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006564:	4b16      	ldr	r3, [pc, #88]	; (80065c0 <USBD_LL_Init+0x90>)
 8006566:	2200      	movs	r2, #0
 8006568:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800656a:	4b15      	ldr	r3, [pc, #84]	; (80065c0 <USBD_LL_Init+0x90>)
 800656c:	2200      	movs	r2, #0
 800656e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006570:	4b13      	ldr	r3, [pc, #76]	; (80065c0 <USBD_LL_Init+0x90>)
 8006572:	2200      	movs	r2, #0
 8006574:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8006576:	4b12      	ldr	r3, [pc, #72]	; (80065c0 <USBD_LL_Init+0x90>)
 8006578:	2200      	movs	r2, #0
 800657a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800657c:	4b10      	ldr	r3, [pc, #64]	; (80065c0 <USBD_LL_Init+0x90>)
 800657e:	2200      	movs	r2, #0
 8006580:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006582:	4b0f      	ldr	r3, [pc, #60]	; (80065c0 <USBD_LL_Init+0x90>)
 8006584:	2200      	movs	r2, #0
 8006586:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006588:	480d      	ldr	r0, [pc, #52]	; (80065c0 <USBD_LL_Init+0x90>)
 800658a:	f7fb fb75 	bl	8001c78 <HAL_PCD_Init>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d001      	beq.n	8006598 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8006594:	f7fa fd38 	bl	8001008 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006598:	2180      	movs	r1, #128	; 0x80
 800659a:	4809      	ldr	r0, [pc, #36]	; (80065c0 <USBD_LL_Init+0x90>)
 800659c:	f7fb fe95 	bl	80022ca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80065a0:	2240      	movs	r2, #64	; 0x40
 80065a2:	2100      	movs	r1, #0
 80065a4:	4806      	ldr	r0, [pc, #24]	; (80065c0 <USBD_LL_Init+0x90>)
 80065a6:	f7fb fe49 	bl	800223c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80065aa:	2280      	movs	r2, #128	; 0x80
 80065ac:	2101      	movs	r1, #1
 80065ae:	4804      	ldr	r0, [pc, #16]	; (80065c0 <USBD_LL_Init+0x90>)
 80065b0:	f7fb fe44 	bl	800223c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3708      	adds	r7, #8
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	2004f38c 	.word	0x2004f38c

080065c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065cc:	2300      	movs	r3, #0
 80065ce:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065d0:	2300      	movs	r3, #0
 80065d2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80065da:	4618      	mov	r0, r3
 80065dc:	f7fb fc70 	bl	8001ec0 <HAL_PCD_Start>
 80065e0:	4603      	mov	r3, r0
 80065e2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80065e4:	7bbb      	ldrb	r3, [r7, #14]
 80065e6:	2b03      	cmp	r3, #3
 80065e8:	d816      	bhi.n	8006618 <USBD_LL_Start+0x54>
 80065ea:	a201      	add	r2, pc, #4	; (adr r2, 80065f0 <USBD_LL_Start+0x2c>)
 80065ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f0:	08006601 	.word	0x08006601
 80065f4:	08006607 	.word	0x08006607
 80065f8:	0800660d 	.word	0x0800660d
 80065fc:	08006613 	.word	0x08006613
    case HAL_OK :
      usb_status = USBD_OK;
 8006600:	2300      	movs	r3, #0
 8006602:	73fb      	strb	r3, [r7, #15]
    break;
 8006604:	e00b      	b.n	800661e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006606:	2303      	movs	r3, #3
 8006608:	73fb      	strb	r3, [r7, #15]
    break;
 800660a:	e008      	b.n	800661e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800660c:	2301      	movs	r3, #1
 800660e:	73fb      	strb	r3, [r7, #15]
    break;
 8006610:	e005      	b.n	800661e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006612:	2303      	movs	r3, #3
 8006614:	73fb      	strb	r3, [r7, #15]
    break;
 8006616:	e002      	b.n	800661e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8006618:	2303      	movs	r3, #3
 800661a:	73fb      	strb	r3, [r7, #15]
    break;
 800661c:	bf00      	nop
  }
  return usb_status;
 800661e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006620:	4618      	mov	r0, r3
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	4608      	mov	r0, r1
 8006632:	4611      	mov	r1, r2
 8006634:	461a      	mov	r2, r3
 8006636:	4603      	mov	r3, r0
 8006638:	70fb      	strb	r3, [r7, #3]
 800663a:	460b      	mov	r3, r1
 800663c:	70bb      	strb	r3, [r7, #2]
 800663e:	4613      	mov	r3, r2
 8006640:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006642:	2300      	movs	r3, #0
 8006644:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006646:	2300      	movs	r3, #0
 8006648:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006650:	78bb      	ldrb	r3, [r7, #2]
 8006652:	883a      	ldrh	r2, [r7, #0]
 8006654:	78f9      	ldrb	r1, [r7, #3]
 8006656:	f7fb fc62 	bl	8001f1e <HAL_PCD_EP_Open>
 800665a:	4603      	mov	r3, r0
 800665c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800665e:	7bbb      	ldrb	r3, [r7, #14]
 8006660:	2b03      	cmp	r3, #3
 8006662:	d817      	bhi.n	8006694 <USBD_LL_OpenEP+0x6c>
 8006664:	a201      	add	r2, pc, #4	; (adr r2, 800666c <USBD_LL_OpenEP+0x44>)
 8006666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800666a:	bf00      	nop
 800666c:	0800667d 	.word	0x0800667d
 8006670:	08006683 	.word	0x08006683
 8006674:	08006689 	.word	0x08006689
 8006678:	0800668f 	.word	0x0800668f
    case HAL_OK :
      usb_status = USBD_OK;
 800667c:	2300      	movs	r3, #0
 800667e:	73fb      	strb	r3, [r7, #15]
    break;
 8006680:	e00b      	b.n	800669a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006682:	2303      	movs	r3, #3
 8006684:	73fb      	strb	r3, [r7, #15]
    break;
 8006686:	e008      	b.n	800669a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006688:	2301      	movs	r3, #1
 800668a:	73fb      	strb	r3, [r7, #15]
    break;
 800668c:	e005      	b.n	800669a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800668e:	2303      	movs	r3, #3
 8006690:	73fb      	strb	r3, [r7, #15]
    break;
 8006692:	e002      	b.n	800669a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8006694:	2303      	movs	r3, #3
 8006696:	73fb      	strb	r3, [r7, #15]
    break;
 8006698:	bf00      	nop
  }
  return usb_status;
 800669a:	7bfb      	ldrb	r3, [r7, #15]
}
 800669c:	4618      	mov	r0, r3
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	460b      	mov	r3, r1
 80066ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066b0:	2300      	movs	r3, #0
 80066b2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066b4:	2300      	movs	r3, #0
 80066b6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80066be:	78fa      	ldrb	r2, [r7, #3]
 80066c0:	4611      	mov	r1, r2
 80066c2:	4618      	mov	r0, r3
 80066c4:	f7fb fc93 	bl	8001fee <HAL_PCD_EP_Close>
 80066c8:	4603      	mov	r3, r0
 80066ca:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80066cc:	7bbb      	ldrb	r3, [r7, #14]
 80066ce:	2b03      	cmp	r3, #3
 80066d0:	d816      	bhi.n	8006700 <USBD_LL_CloseEP+0x5c>
 80066d2:	a201      	add	r2, pc, #4	; (adr r2, 80066d8 <USBD_LL_CloseEP+0x34>)
 80066d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d8:	080066e9 	.word	0x080066e9
 80066dc:	080066ef 	.word	0x080066ef
 80066e0:	080066f5 	.word	0x080066f5
 80066e4:	080066fb 	.word	0x080066fb
    case HAL_OK :
      usb_status = USBD_OK;
 80066e8:	2300      	movs	r3, #0
 80066ea:	73fb      	strb	r3, [r7, #15]
    break;
 80066ec:	e00b      	b.n	8006706 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80066ee:	2303      	movs	r3, #3
 80066f0:	73fb      	strb	r3, [r7, #15]
    break;
 80066f2:	e008      	b.n	8006706 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80066f4:	2301      	movs	r3, #1
 80066f6:	73fb      	strb	r3, [r7, #15]
    break;
 80066f8:	e005      	b.n	8006706 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80066fa:	2303      	movs	r3, #3
 80066fc:	73fb      	strb	r3, [r7, #15]
    break;
 80066fe:	e002      	b.n	8006706 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006700:	2303      	movs	r3, #3
 8006702:	73fb      	strb	r3, [r7, #15]
    break;
 8006704:	bf00      	nop
  }
  return usb_status;
 8006706:	7bfb      	ldrb	r3, [r7, #15]
}
 8006708:	4618      	mov	r0, r3
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	460b      	mov	r3, r1
 800671a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800671c:	2300      	movs	r3, #0
 800671e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006720:	2300      	movs	r3, #0
 8006722:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800672a:	78fa      	ldrb	r2, [r7, #3]
 800672c:	4611      	mov	r1, r2
 800672e:	4618      	mov	r0, r3
 8006730:	f7fb fd22 	bl	8002178 <HAL_PCD_EP_SetStall>
 8006734:	4603      	mov	r3, r0
 8006736:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006738:	7bbb      	ldrb	r3, [r7, #14]
 800673a:	2b03      	cmp	r3, #3
 800673c:	d816      	bhi.n	800676c <USBD_LL_StallEP+0x5c>
 800673e:	a201      	add	r2, pc, #4	; (adr r2, 8006744 <USBD_LL_StallEP+0x34>)
 8006740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006744:	08006755 	.word	0x08006755
 8006748:	0800675b 	.word	0x0800675b
 800674c:	08006761 	.word	0x08006761
 8006750:	08006767 	.word	0x08006767
    case HAL_OK :
      usb_status = USBD_OK;
 8006754:	2300      	movs	r3, #0
 8006756:	73fb      	strb	r3, [r7, #15]
    break;
 8006758:	e00b      	b.n	8006772 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800675a:	2303      	movs	r3, #3
 800675c:	73fb      	strb	r3, [r7, #15]
    break;
 800675e:	e008      	b.n	8006772 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006760:	2301      	movs	r3, #1
 8006762:	73fb      	strb	r3, [r7, #15]
    break;
 8006764:	e005      	b.n	8006772 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006766:	2303      	movs	r3, #3
 8006768:	73fb      	strb	r3, [r7, #15]
    break;
 800676a:	e002      	b.n	8006772 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800676c:	2303      	movs	r3, #3
 800676e:	73fb      	strb	r3, [r7, #15]
    break;
 8006770:	bf00      	nop
  }
  return usb_status;
 8006772:	7bfb      	ldrb	r3, [r7, #15]
}
 8006774:	4618      	mov	r0, r3
 8006776:	3710      	adds	r7, #16
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b086      	sub	sp, #24
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	607a      	str	r2, [r7, #4]
 8006786:	603b      	str	r3, [r7, #0]
 8006788:	460b      	mov	r3, r1
 800678a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800678c:	2300      	movs	r3, #0
 800678e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006790:	2300      	movs	r3, #0
 8006792:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800679a:	7af9      	ldrb	r1, [r7, #11]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	f7fb fcad 	bl	80020fe <HAL_PCD_EP_Transmit>
 80067a4:	4603      	mov	r3, r0
 80067a6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80067a8:	7dbb      	ldrb	r3, [r7, #22]
 80067aa:	2b03      	cmp	r3, #3
 80067ac:	d816      	bhi.n	80067dc <USBD_LL_Transmit+0x60>
 80067ae:	a201      	add	r2, pc, #4	; (adr r2, 80067b4 <USBD_LL_Transmit+0x38>)
 80067b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b4:	080067c5 	.word	0x080067c5
 80067b8:	080067cb 	.word	0x080067cb
 80067bc:	080067d1 	.word	0x080067d1
 80067c0:	080067d7 	.word	0x080067d7
    case HAL_OK :
      usb_status = USBD_OK;
 80067c4:	2300      	movs	r3, #0
 80067c6:	75fb      	strb	r3, [r7, #23]
    break;
 80067c8:	e00b      	b.n	80067e2 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80067ca:	2303      	movs	r3, #3
 80067cc:	75fb      	strb	r3, [r7, #23]
    break;
 80067ce:	e008      	b.n	80067e2 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80067d0:	2301      	movs	r3, #1
 80067d2:	75fb      	strb	r3, [r7, #23]
    break;
 80067d4:	e005      	b.n	80067e2 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80067d6:	2303      	movs	r3, #3
 80067d8:	75fb      	strb	r3, [r7, #23]
    break;
 80067da:	e002      	b.n	80067e2 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80067dc:	2303      	movs	r3, #3
 80067de:	75fb      	strb	r3, [r7, #23]
    break;
 80067e0:	bf00      	nop
  }
  return usb_status;
 80067e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3718      	adds	r7, #24
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b086      	sub	sp, #24
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	607a      	str	r2, [r7, #4]
 80067f6:	603b      	str	r3, [r7, #0]
 80067f8:	460b      	mov	r3, r1
 80067fa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067fc:	2300      	movs	r3, #0
 80067fe:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006800:	2300      	movs	r3, #0
 8006802:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800680a:	7af9      	ldrb	r1, [r7, #11]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	f7fb fc37 	bl	8002082 <HAL_PCD_EP_Receive>
 8006814:	4603      	mov	r3, r0
 8006816:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8006818:	7dbb      	ldrb	r3, [r7, #22]
 800681a:	2b03      	cmp	r3, #3
 800681c:	d816      	bhi.n	800684c <USBD_LL_PrepareReceive+0x60>
 800681e:	a201      	add	r2, pc, #4	; (adr r2, 8006824 <USBD_LL_PrepareReceive+0x38>)
 8006820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006824:	08006835 	.word	0x08006835
 8006828:	0800683b 	.word	0x0800683b
 800682c:	08006841 	.word	0x08006841
 8006830:	08006847 	.word	0x08006847
    case HAL_OK :
      usb_status = USBD_OK;
 8006834:	2300      	movs	r3, #0
 8006836:	75fb      	strb	r3, [r7, #23]
    break;
 8006838:	e00b      	b.n	8006852 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800683a:	2303      	movs	r3, #3
 800683c:	75fb      	strb	r3, [r7, #23]
    break;
 800683e:	e008      	b.n	8006852 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006840:	2301      	movs	r3, #1
 8006842:	75fb      	strb	r3, [r7, #23]
    break;
 8006844:	e005      	b.n	8006852 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006846:	2303      	movs	r3, #3
 8006848:	75fb      	strb	r3, [r7, #23]
    break;
 800684a:	e002      	b.n	8006852 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800684c:	2303      	movs	r3, #3
 800684e:	75fb      	strb	r3, [r7, #23]
    break;
 8006850:	bf00      	nop
  }
  return usb_status;
 8006852:	7dfb      	ldrb	r3, [r7, #23]
}
 8006854:	4618      	mov	r0, r3
 8006856:	3718      	adds	r7, #24
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <write_packet>:
static struct o_packet {
  uint8_t pw;
  uint8_t payload[_PACKET_PAYLOAD_IN_SIZE];
} o_packet;

static bool write_packet(void) {
 800685c:	b580      	push	{r7, lr}
 800685e:	af00      	add	r7, sp, #0
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 8006860:	2121      	movs	r1, #33	; 0x21
 8006862:	4803      	ldr	r0, [pc, #12]	; (8006870 <write_packet+0x14>)
 8006864:	f001 fa4a 	bl	8007cfc <ioRawWriteBuffer>
 8006868:	4603      	mov	r3, r0
}
 800686a:	4618      	mov	r0, r3
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	20000900 	.word	0x20000900

08006874 <pb_io_flush_ostream>:

void pb_io_flush_ostream(void)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	af00      	add	r7, sp, #0
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 8006878:	4b06      	ldr	r3, [pc, #24]	; (8006894 <pb_io_flush_ostream+0x20>)
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006880:	b2da      	uxtb	r2, r3
 8006882:	4b04      	ldr	r3, [pc, #16]	; (8006894 <pb_io_flush_ostream+0x20>)
 8006884:	701a      	strb	r2, [r3, #0]
  write_packet();
 8006886:	f7ff ffe9 	bl	800685c <write_packet>
  o_packet.pw = 0;
 800688a:	4b02      	ldr	r3, [pc, #8]	; (8006894 <pb_io_flush_ostream+0x20>)
 800688c:	2200      	movs	r2, #0
 800688e:	701a      	strb	r2, [r3, #0]
}
 8006890:	bf00      	nop
 8006892:	bd80      	pop	{r7, pc}
 8006894:	20000900 	.word	0x20000900

08006898 <write_callback>:

static bool write_callback(pb_ostream_t *stream, const uint8_t *buf,
    size_t count)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b086      	sub	sp, #24
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
  bool res = true;
 80068a4:	2301      	movs	r3, #1
 80068a6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pr = (uint8_t *)buf;
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	613b      	str	r3, [r7, #16]

  UNUSED(stream);

  while (count) {
 80068ac:	e025      	b.n	80068fa <write_callback+0x62>
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
      o_packet.payload[o_packet.pw] = *pr;
 80068ae:	4b17      	ldr	r3, [pc, #92]	; (800690c <write_callback+0x74>)
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	4619      	mov	r1, r3
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	781a      	ldrb	r2, [r3, #0]
 80068b8:	4b14      	ldr	r3, [pc, #80]	; (800690c <write_callback+0x74>)
 80068ba:	440b      	add	r3, r1
 80068bc:	705a      	strb	r2, [r3, #1]
      pr++;
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	3301      	adds	r3, #1
 80068c2:	613b      	str	r3, [r7, #16]
      count--;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	3b01      	subs	r3, #1
 80068c8:	607b      	str	r3, [r7, #4]
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 80068ca:	4b10      	ldr	r3, [pc, #64]	; (800690c <write_callback+0x74>)
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	3301      	adds	r3, #1
 80068d0:	b2da      	uxtb	r2, r3
 80068d2:	4b0e      	ldr	r3, [pc, #56]	; (800690c <write_callback+0x74>)
 80068d4:	701a      	strb	r2, [r3, #0]
 80068d6:	4b0d      	ldr	r3, [pc, #52]	; (800690c <write_callback+0x74>)
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	2b1f      	cmp	r3, #31
 80068dc:	d802      	bhi.n	80068e4 <write_callback+0x4c>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d1e4      	bne.n	80068ae <write_callback+0x16>
    }
    if (o_packet.pw == _PACKET_PAYLOAD_IN_SIZE) {
 80068e4:	4b09      	ldr	r3, [pc, #36]	; (800690c <write_callback+0x74>)
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	2b20      	cmp	r3, #32
 80068ea:	d106      	bne.n	80068fa <write_callback+0x62>
      res = write_packet();
 80068ec:	f7ff ffb6 	bl	800685c <write_packet>
 80068f0:	4603      	mov	r3, r0
 80068f2:	75fb      	strb	r3, [r7, #23]
      o_packet.pw = 0;
 80068f4:	4b05      	ldr	r3, [pc, #20]	; (800690c <write_callback+0x74>)
 80068f6:	2200      	movs	r2, #0
 80068f8:	701a      	strb	r2, [r3, #0]
  while (count) {
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d1ea      	bne.n	80068d6 <write_callback+0x3e>
    }
  }
  return res;
 8006900:	7dfb      	ldrb	r3, [r7, #23]
}
 8006902:	4618      	mov	r0, r3
 8006904:	3718      	adds	r7, #24
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	20000900 	.word	0x20000900

08006910 <read_packet>:
  uint8_t payload[_PACKET_PAYLOAD_OUT_SIZE];
} i_packet;

static int i_ridx = 0;

static bool read_packet(void) {
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 8006916:	2121      	movs	r1, #33	; 0x21
 8006918:	4806      	ldr	r0, [pc, #24]	; (8006934 <read_packet+0x24>)
 800691a:	f001 fa0b 	bl	8007d34 <ioRawReadBuffer>
 800691e:	4603      	mov	r3, r0
 8006920:	71fb      	strb	r3, [r7, #7]
      _PACKET_PAYLOAD_OUT_SIZE + 1);
  i_ridx = 0;
 8006922:	4b05      	ldr	r3, [pc, #20]	; (8006938 <read_packet+0x28>)
 8006924:	2200      	movs	r2, #0
 8006926:	601a      	str	r2, [r3, #0]
  return res;
 8006928:	79fb      	ldrb	r3, [r7, #7]
}
 800692a:	4618      	mov	r0, r3
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	20000924 	.word	0x20000924
 8006938:	20000948 	.word	0x20000948

0800693c <pb_io_flush_istream>:

void pb_io_flush_istream(void)
{
 800693c:	b480      	push	{r7}
 800693e:	af00      	add	r7, sp, #0
  i_packet.pr = 0xFF;
 8006940:	4b05      	ldr	r3, [pc, #20]	; (8006958 <pb_io_flush_istream+0x1c>)
 8006942:	22ff      	movs	r2, #255	; 0xff
 8006944:	701a      	strb	r2, [r3, #0]
  i_ridx = 0;
 8006946:	4b05      	ldr	r3, [pc, #20]	; (800695c <pb_io_flush_istream+0x20>)
 8006948:	2200      	movs	r2, #0
 800694a:	601a      	str	r2, [r3, #0]
}
 800694c:	bf00      	nop
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	20000924 	.word	0x20000924
 800695c:	20000948 	.word	0x20000948

08006960 <read_callback>:

static bool read_callback(pb_istream_t *stream, uint8_t *buf, size_t count)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b088      	sub	sp, #32
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	607a      	str	r2, [r7, #4]
  bool res = true;
 800696c:	2301      	movs	r3, #1
 800696e:	77fb      	strb	r3, [r7, #31]
  uint8_t *pw = (uint8_t *)buf;
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	61bb      	str	r3, [r7, #24]

  UNUSED(stream);

  if (count == 0)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d101      	bne.n	800697e <read_callback+0x1e>
    return true;
 800697a:	2301      	movs	r3, #1
 800697c:	e043      	b.n	8006a06 <read_callback+0xa6>

  if (i_packet.pr == 0xFF)
 800697e:	4b24      	ldr	r3, [pc, #144]	; (8006a10 <read_callback+0xb0>)
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	2bff      	cmp	r3, #255	; 0xff
 8006984:	d103      	bne.n	800698e <read_callback+0x2e>
    res = read_packet();
 8006986:	f7ff ffc3 	bl	8006910 <read_packet>
 800698a:	4603      	mov	r3, r0
 800698c:	77fb      	strb	r3, [r7, #31]

  if (res == false)
 800698e:	7ffb      	ldrb	r3, [r7, #31]
 8006990:	f083 0301 	eor.w	r3, r3, #1
 8006994:	b2db      	uxtb	r3, r3
 8006996:	2b00      	cmp	r3, #0
 8006998:	d031      	beq.n	80069fe <read_callback+0x9e>
    return res;
 800699a:	7ffb      	ldrb	r3, [r7, #31]
 800699c:	e033      	b.n	8006a06 <read_callback+0xa6>

  while (count) {
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
      *pw = i_packet.payload[i_ridx];
 800699e:	4b1d      	ldr	r3, [pc, #116]	; (8006a14 <read_callback+0xb4>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a1b      	ldr	r2, [pc, #108]	; (8006a10 <read_callback+0xb0>)
 80069a4:	4413      	add	r3, r2
 80069a6:	785a      	ldrb	r2, [r3, #1]
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	701a      	strb	r2, [r3, #0]
      pw++;
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	3301      	adds	r3, #1
 80069b0:	61bb      	str	r3, [r7, #24]
      count--;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	3b01      	subs	r3, #1
 80069b6:	607b      	str	r3, [r7, #4]
      i_ridx++;
 80069b8:	4b16      	ldr	r3, [pc, #88]	; (8006a14 <read_callback+0xb4>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	3301      	adds	r3, #1
 80069be:	4a15      	ldr	r2, [pc, #84]	; (8006a14 <read_callback+0xb4>)
 80069c0:	6013      	str	r3, [r2, #0]
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 80069c2:	4b13      	ldr	r3, [pc, #76]	; (8006a10 <read_callback+0xb0>)
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	3b01      	subs	r3, #1
 80069c8:	b2da      	uxtb	r2, r3
 80069ca:	4b11      	ldr	r3, [pc, #68]	; (8006a10 <read_callback+0xb0>)
 80069cc:	701a      	strb	r2, [r3, #0]
 80069ce:	4b10      	ldr	r3, [pc, #64]	; (8006a10 <read_callback+0xb0>)
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d002      	beq.n	80069dc <read_callback+0x7c>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1e0      	bne.n	800699e <read_callback+0x3e>
    }
    if (count && i_packet.pr == 0) {
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00d      	beq.n	80069fe <read_callback+0x9e>
 80069e2:	4b0b      	ldr	r3, [pc, #44]	; (8006a10 <read_callback+0xb0>)
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d109      	bne.n	80069fe <read_callback+0x9e>
      uint8_t sync = 0xAA;
 80069ea:	23aa      	movs	r3, #170	; 0xaa
 80069ec:	75fb      	strb	r3, [r7, #23]
      ioRawWriteBuffer(&sync, 1);
 80069ee:	f107 0317 	add.w	r3, r7, #23
 80069f2:	2101      	movs	r1, #1
 80069f4:	4618      	mov	r0, r3
 80069f6:	f001 f981 	bl	8007cfc <ioRawWriteBuffer>
      read_packet();
 80069fa:	f7ff ff89 	bl	8006910 <read_packet>
  while (count) {
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1e4      	bne.n	80069ce <read_callback+0x6e>
    }
  }

  return res;
 8006a04:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3720      	adds	r7, #32
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	20000924 	.word	0x20000924
 8006a14:	20000948 	.word	0x20000948

08006a18 <pb_io_ostream>:

pb_ostream_t pb_io_ostream(int fd)
{
 8006a18:	b4b0      	push	{r4, r5, r7}
 8006a1a:	b089      	sub	sp, #36	; 0x24
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  pb_ostream_t stream = {&write_callback, (void*)(intptr_t)fd, SIZE_MAX, 0};
 8006a22:	f107 030c 	add.w	r3, r7, #12
 8006a26:	2200      	movs	r2, #0
 8006a28:	601a      	str	r2, [r3, #0]
 8006a2a:	605a      	str	r2, [r3, #4]
 8006a2c:	609a      	str	r2, [r3, #8]
 8006a2e:	60da      	str	r2, [r3, #12]
 8006a30:	611a      	str	r2, [r3, #16]
 8006a32:	4b0a      	ldr	r3, [pc, #40]	; (8006a5c <pb_io_ostream+0x44>)
 8006a34:	60fb      	str	r3, [r7, #12]
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	613b      	str	r3, [r7, #16]
 8006a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a3e:	617b      	str	r3, [r7, #20]
  return stream;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	461d      	mov	r5, r3
 8006a44:	f107 040c 	add.w	r4, r7, #12
 8006a48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a4c:	6823      	ldr	r3, [r4, #0]
 8006a4e:	602b      	str	r3, [r5, #0]
}
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	3724      	adds	r7, #36	; 0x24
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bcb0      	pop	{r4, r5, r7}
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	08006899 	.word	0x08006899

08006a60 <pb_io_istream>:

pb_istream_t pb_io_istream(int fd)
{
 8006a60:	b490      	push	{r4, r7}
 8006a62:	b086      	sub	sp, #24
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  pb_istream_t stream = {&read_callback, (void*)(intptr_t)fd, SIZE_MAX};
 8006a6a:	f107 0308 	add.w	r3, r7, #8
 8006a6e:	2200      	movs	r2, #0
 8006a70:	601a      	str	r2, [r3, #0]
 8006a72:	605a      	str	r2, [r3, #4]
 8006a74:	609a      	str	r2, [r3, #8]
 8006a76:	60da      	str	r2, [r3, #12]
 8006a78:	4b09      	ldr	r3, [pc, #36]	; (8006aa0 <pb_io_istream+0x40>)
 8006a7a:	60bb      	str	r3, [r7, #8]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	60fb      	str	r3, [r7, #12]
 8006a80:	f04f 33ff 	mov.w	r3, #4294967295
 8006a84:	613b      	str	r3, [r7, #16]
  return stream;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	461c      	mov	r4, r3
 8006a8a:	f107 0308 	add.w	r3, r7, #8
 8006a8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	3718      	adds	r7, #24
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bc90      	pop	{r4, r7}
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	08006961 	.word	0x08006961

08006aa4 <pb_io_stream_init>:

int pb_io_stream_init(void)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	af00      	add	r7, sp, #0
  ioRawDisableLLWrite();
 8006aa8:	f001 f960 	bl	8007d6c <ioRawDisableLLWrite>
  return 0;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	bd80      	pop	{r7, pc}
	...

08006ab4 <aiPbMgrInit>:
  const aiPbCmdFunc *funcs;
  uint32_t  n_func;
} pbContextMgr;

void aiPbMgrInit(const aiPbCmdFunc *funcs)
{
 8006ab4:	b5b0      	push	{r4, r5, r7, lr}
 8006ab6:	b088      	sub	sp, #32
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6178      	str	r0, [r7, #20]
  const aiPbCmdFunc *cfunc;

  pb_io_stream_init();
 8006abc:	f7ff fff2 	bl	8006aa4 <pb_io_stream_init>

  pbContextMgr.input = pb_io_istream(0);
 8006ac0:	4c1a      	ldr	r4, [pc, #104]	; (8006b2c <aiPbMgrInit+0x78>)
 8006ac2:	463b      	mov	r3, r7
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7ff ffca 	bl	8006a60 <pb_io_istream>
 8006acc:	463b      	mov	r3, r7
 8006ace:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006ad0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  pbContextMgr.output = pb_io_ostream(0);
 8006ad4:	4c15      	ldr	r4, [pc, #84]	; (8006b2c <aiPbMgrInit+0x78>)
 8006ad6:	463b      	mov	r3, r7
 8006ad8:	2100      	movs	r1, #0
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7ff ff9c 	bl	8006a18 <pb_io_ostream>
 8006ae0:	3410      	adds	r4, #16
 8006ae2:	463d      	mov	r5, r7
 8006ae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ae8:	682b      	ldr	r3, [r5, #0]
 8006aea:	6023      	str	r3, [r4, #0]

  pbContextMgr.n_func = 0;
 8006aec:	4b0f      	ldr	r3, [pc, #60]	; (8006b2c <aiPbMgrInit+0x78>)
 8006aee:	2200      	movs	r2, #0
 8006af0:	629a      	str	r2, [r3, #40]	; 0x28
  pbContextMgr.funcs = NULL;
 8006af2:	4b0e      	ldr	r3, [pc, #56]	; (8006b2c <aiPbMgrInit+0x78>)
 8006af4:	2200      	movs	r2, #0
 8006af6:	625a      	str	r2, [r3, #36]	; 0x24

  if (funcs) {
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d011      	beq.n	8006b22 <aiPbMgrInit+0x6e>
    cfunc = funcs;
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	61fb      	str	r3, [r7, #28]
    while (cfunc->process) {
 8006b02:	e007      	b.n	8006b14 <aiPbMgrInit+0x60>
      pbContextMgr.n_func++;
 8006b04:	4b09      	ldr	r3, [pc, #36]	; (8006b2c <aiPbMgrInit+0x78>)
 8006b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b08:	3301      	adds	r3, #1
 8006b0a:	4a08      	ldr	r2, [pc, #32]	; (8006b2c <aiPbMgrInit+0x78>)
 8006b0c:	6293      	str	r3, [r2, #40]	; 0x28
      cfunc++;
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	330c      	adds	r3, #12
 8006b12:	61fb      	str	r3, [r7, #28]
    while (cfunc->process) {
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d1f3      	bne.n	8006b04 <aiPbMgrInit+0x50>
    }
    pbContextMgr.funcs = funcs;
 8006b1c:	4a03      	ldr	r2, [pc, #12]	; (8006b2c <aiPbMgrInit+0x78>)
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	6253      	str	r3, [r2, #36]	; 0x24
  }
}
 8006b22:	bf00      	nop
 8006b24:	3720      	adds	r7, #32
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bdb0      	pop	{r4, r5, r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	2000094c 	.word	0x2000094c

08006b30 <aiPbMgrWaitAndProcess>:

int aiPbMgrWaitAndProcess(void)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af02      	add	r7, sp, #8
  uint32_t idx;
  static reqMsg  req = reqMsg_init_zero;
  static respMsg resp = respMsg_init_default;
  const aiPbCmdFunc *cfunc;

  pb_io_flush_istream();
 8006b36:	f7ff ff01 	bl	800693c <pb_io_flush_istream>
  if (pb_decode_delimited(&pbContextMgr.input, reqMsg_fields, &req)) {
 8006b3a:	4a20      	ldr	r2, [pc, #128]	; (8006bbc <aiPbMgrWaitAndProcess+0x8c>)
 8006b3c:	4920      	ldr	r1, [pc, #128]	; (8006bc0 <aiPbMgrWaitAndProcess+0x90>)
 8006b3e:	4821      	ldr	r0, [pc, #132]	; (8006bc4 <aiPbMgrWaitAndProcess+0x94>)
 8006b40:	f004 f882 	bl	800ac48 <pb_decode_delimited>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d030      	beq.n	8006bac <aiPbMgrWaitAndProcess+0x7c>
    pb_io_flush_istream();
 8006b4a:	f7ff fef7 	bl	800693c <pb_io_flush_istream>
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 8006b4e:	2300      	movs	r3, #0
 8006b50:	607b      	str	r3, [r7, #4]
 8006b52:	e019      	b.n	8006b88 <aiPbMgrWaitAndProcess+0x58>
      cfunc = &pbContextMgr.funcs[idx];
 8006b54:	4b1b      	ldr	r3, [pc, #108]	; (8006bc4 <aiPbMgrWaitAndProcess+0x94>)
 8006b56:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	005b      	lsls	r3, r3, #1
 8006b5e:	4413      	add	r3, r2
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	440b      	add	r3, r1
 8006b64:	603b      	str	r3, [r7, #0]
      if (cfunc->cmd == req.cmd) {
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	781a      	ldrb	r2, [r3, #0]
 8006b6a:	4b14      	ldr	r3, [pc, #80]	; (8006bbc <aiPbMgrWaitAndProcess+0x8c>)
 8006b6c:	791b      	ldrb	r3, [r3, #4]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d107      	bne.n	8006b82 <aiPbMgrWaitAndProcess+0x52>
        cfunc->process(&req, &resp, cfunc->param);
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	683a      	ldr	r2, [r7, #0]
 8006b78:	6892      	ldr	r2, [r2, #8]
 8006b7a:	4913      	ldr	r1, [pc, #76]	; (8006bc8 <aiPbMgrWaitAndProcess+0x98>)
 8006b7c:	480f      	ldr	r0, [pc, #60]	; (8006bbc <aiPbMgrWaitAndProcess+0x8c>)
 8006b7e:	4798      	blx	r3
        break;
 8006b80:	e007      	b.n	8006b92 <aiPbMgrWaitAndProcess+0x62>
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	3301      	adds	r3, #1
 8006b86:	607b      	str	r3, [r7, #4]
 8006b88:	4b0e      	ldr	r3, [pc, #56]	; (8006bc4 <aiPbMgrWaitAndProcess+0x94>)
 8006b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d3e0      	bcc.n	8006b54 <aiPbMgrWaitAndProcess+0x24>
      }
    }
    if (idx == pbContextMgr.n_func) {
 8006b92:	4b0c      	ldr	r3, [pc, #48]	; (8006bc4 <aiPbMgrWaitAndProcess+0x94>)
 8006b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d107      	bne.n	8006bac <aiPbMgrWaitAndProcess+0x7c>
      aiPbMgrSendAck(&req, &resp, EnumState_S_ERROR,
 8006b9c:	2304      	movs	r3, #4
 8006b9e:	9300      	str	r3, [sp, #0]
 8006ba0:	2304      	movs	r3, #4
 8006ba2:	2204      	movs	r2, #4
 8006ba4:	4908      	ldr	r1, [pc, #32]	; (8006bc8 <aiPbMgrWaitAndProcess+0x98>)
 8006ba6:	4805      	ldr	r0, [pc, #20]	; (8006bbc <aiPbMgrWaitAndProcess+0x8c>)
 8006ba8:	f000 f82e 	bl	8006c08 <aiPbMgrSendAck>
          EnumError_E_INVALID_PARAM, EnumError_E_INVALID_PARAM);
    }
  }

  pb_io_flush_istream();
 8006bac:	f7ff fec6 	bl	800693c <pb_io_flush_istream>

  return 0;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3708      	adds	r7, #8
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	20000978 	.word	0x20000978
 8006bc0:	0801b4b4 	.word	0x0801b4b4
 8006bc4:	2000094c 	.word	0x2000094c
 8006bc8:	200009c8 	.word	0x200009c8

08006bcc <aiPbMgrSendResp>:

/*---------------------------------------------------------------------------*/

void aiPbMgrSendResp(const reqMsg *req, respMsg *resp,
    EnumState state)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	71fb      	strb	r3, [r7, #7]
  resp->reqid = req->reqid;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	601a      	str	r2, [r3, #0]
  resp->state = state;
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	79fa      	ldrb	r2, [r7, #7]
 8006be6:	711a      	strb	r2, [r3, #4]
  pb_encode(&pbContextMgr.output, respMsg_fields, resp);
 8006be8:	68ba      	ldr	r2, [r7, #8]
 8006bea:	4905      	ldr	r1, [pc, #20]	; (8006c00 <aiPbMgrSendResp+0x34>)
 8006bec:	4805      	ldr	r0, [pc, #20]	; (8006c04 <aiPbMgrSendResp+0x38>)
 8006bee:	f005 f875 	bl	800bcdc <pb_encode>
  pb_io_flush_ostream();
 8006bf2:	f7ff fe3f 	bl	8006874 <pb_io_flush_ostream>
}
 8006bf6:	bf00      	nop
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	0801b878 	.word	0x0801b878
 8006c04:	2000095c 	.word	0x2000095c

08006c08 <aiPbMgrSendAck>:

void aiPbMgrSendAck(const reqMsg *req, respMsg *resp,
    EnumState state, uint32_t param, EnumError error)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	603b      	str	r3, [r7, #0]
 8006c14:	4613      	mov	r3, r2
 8006c16:	71fb      	strb	r3, [r7, #7]
  resp->which_payload = respMsg_ack_tag;
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	220c      	movs	r2, #12
 8006c1c:	80da      	strh	r2, [r3, #6]
  resp->payload.ack.param = param;
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	683a      	ldr	r2, [r7, #0]
 8006c22:	609a      	str	r2, [r3, #8]
  resp->payload.ack.error = error;
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	7e3a      	ldrb	r2, [r7, #24]
 8006c28:	731a      	strb	r2, [r3, #12]
  aiPbMgrSendResp(req, resp, state);
 8006c2a:	79fb      	ldrb	r3, [r7, #7]
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	68b9      	ldr	r1, [r7, #8]
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f7ff ffcb 	bl	8006bcc <aiPbMgrSendResp>
}
 8006c36:	bf00      	nop
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
	...

08006c40 <aiPbMgrWaitAck>:

bool aiPbMgrWaitAck(void)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
  bool res;
  ackMsg ack = ackMsg_init_default;
 8006c46:	2300      	movs	r3, #0
 8006c48:	607b      	str	r3, [r7, #4]
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	723b      	strb	r3, [r7, #8]
  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 8006c4e:	1d3b      	adds	r3, r7, #4
 8006c50:	461a      	mov	r2, r3
 8006c52:	4906      	ldr	r1, [pc, #24]	; (8006c6c <aiPbMgrWaitAck+0x2c>)
 8006c54:	4806      	ldr	r0, [pc, #24]	; (8006c70 <aiPbMgrWaitAck+0x30>)
 8006c56:	f003 fff7 	bl	800ac48 <pb_decode_delimited>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	73fb      	strb	r3, [r7, #15]
  pb_io_flush_istream();
 8006c5e:	f7ff fe6d 	bl	800693c <pb_io_flush_istream>
  return res;
 8006c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3710      	adds	r7, #16
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	0801b7cc 	.word	0x0801b7cc
 8006c70:	2000094c 	.word	0x2000094c

08006c74 <aiPbAiBufferSize>:
  uint32_t err;
  void *msg;
};

uint32_t aiPbAiBufferSize(const ai_buffer *buffer)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  if (!buffer)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d101      	bne.n	8006c86 <aiPbAiBufferSize+0x12>
    return 0;
 8006c82:	2300      	movs	r3, #0
 8006c84:	e00d      	b.n	8006ca2 <aiPbAiBufferSize+0x2e>
  else
    return buffer->channels * buffer->height
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	88d2      	ldrh	r2, [r2, #6]
 8006c8e:	fb02 f303 	mul.w	r3, r2, r3
        * buffer->width * buffer->n_batches;
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	8912      	ldrh	r2, [r2, #8]
 8006c96:	fb02 f303 	mul.w	r3, r2, r3
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	8892      	ldrh	r2, [r2, #4]
 8006c9e:	fb02 f303 	mul.w	r3, r2, r3
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	370c      	adds	r7, #12
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr

08006cae <aiPbMsgFmtToAiFmt>:

static ai_buffer_format aiPbMsgFmtToAiFmt(const uint32_t msgFmt)
{
 8006cae:	b480      	push	{r7}
 8006cb0:	b083      	sub	sp, #12
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
  return (ai_buffer_format)msgFmt;
 8006cb6:	687b      	ldr	r3, [r7, #4]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <aiPbAiFmtToMsgFmt>:

static uint32_t aiPbAiFmtToMsgFmt(const ai_buffer_format aiFmt)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  return (uint32_t)aiFmt;
 8006ccc:	687b      	ldr	r3, [r7, #4]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	370c      	adds	r7, #12
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr

08006cda <aiPbBufferGetItemSize>:

static size_t aiPbBufferGetItemSize(ai_buffer_format format)
{
 8006cda:	b480      	push	{r7}
 8006cdc:	b083      	sub	sp, #12
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
  return (size_t)AI_BUFFER_BYTE_SIZE(1,format);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	11db      	asrs	r3, r3, #7
 8006ce6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cea:	3304      	adds	r3, #4
 8006cec:	10db      	asrs	r3, r3, #3
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	370c      	adds	r7, #12
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <aiPbBuffer_read_cb3>:

static bool aiPbBuffer_read_cb3(pb_istream_t *stream, const pb_field_t *field,
    void **arg)
{
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b08c      	sub	sp, #48	; 0x30
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	60f8      	str	r0, [r7, #12]
 8006d02:	60b9      	str	r1, [r7, #8]
 8006d04:	607a      	str	r2, [r7, #4]
  struct aiPbMgrBuffer *bm = (struct aiPbMgrBuffer *)*arg;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	627b      	str	r3, [r7, #36]	; 0x24
  ai_buffer_format format;
  size_t itsize;

  UNUSED(field);

  int maxr = bm->n_max;
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	62fb      	str	r3, [r7, #44]	; 0x2c
  msg = (aiBufferByteMsg *)bm->msg;
 8006d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	623b      	str	r3, [r7, #32]
  format = aiPbMsgFmtToAiFmt(msg->shape.format);
 8006d18:	6a3b      	ldr	r3, [r7, #32]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f7ff ffc6 	bl	8006cae <aiPbMsgFmtToAiFmt>
 8006d22:	61f8      	str	r0, [r7, #28]

  /* todo(jmd) - adding scale/zeropoint values */

      /* Check shape/format */
      bm->err = EnumError_E_NONE;
 8006d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d26:	2200      	movs	r2, #0
 8006d28:	60da      	str	r2, [r3, #12]
      if ((format == AI_BUFFER_FORMAT_NONE) || (format != bm->buffer->format)) {
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	2b40      	cmp	r3, #64	; 0x40
 8006d2e:	d005      	beq.n	8006d3c <aiPbBuffer_read_cb3+0x42>
 8006d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	69fa      	ldr	r2, [r7, #28]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d005      	beq.n	8006d48 <aiPbBuffer_read_cb3+0x4e>
        maxr = 0;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        bm->err = EnumError_E_INVALID_FORMAT;
 8006d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d42:	2202      	movs	r2, #2
 8006d44:	60da      	str	r2, [r3, #12]
 8006d46:	e020      	b.n	8006d8a <aiPbBuffer_read_cb3+0x90>
      } else if ((msg->shape.channels != bm->buffer->channels) ||
 8006d48:	6a3b      	ldr	r3, [r7, #32]
 8006d4a:	691a      	ldr	r2, [r3, #16]
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d114      	bne.n	8006d80 <aiPbBuffer_read_cb3+0x86>
          (msg->shape.height != bm->buffer->height) ||
 8006d56:	6a3b      	ldr	r3, [r7, #32]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d5c:	6812      	ldr	r2, [r2, #0]
 8006d5e:	88d2      	ldrh	r2, [r2, #6]
      } else if ((msg->shape.channels != bm->buffer->channels) ||
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d10d      	bne.n	8006d80 <aiPbBuffer_read_cb3+0x86>
          (msg->shape.width != bm->buffer->width) ||
 8006d64:	6a3b      	ldr	r3, [r7, #32]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d6a:	6812      	ldr	r2, [r2, #0]
 8006d6c:	8912      	ldrh	r2, [r2, #8]
          (msg->shape.height != bm->buffer->height) ||
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d106      	bne.n	8006d80 <aiPbBuffer_read_cb3+0x86>
          (msg->shape.n_batches != bm->buffer->n_batches)) {
 8006d72:	6a3b      	ldr	r3, [r7, #32]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d78:	6812      	ldr	r2, [r2, #0]
 8006d7a:	8892      	ldrh	r2, [r2, #4]
          (msg->shape.width != bm->buffer->width) ||
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d004      	beq.n	8006d8a <aiPbBuffer_read_cb3+0x90>
        maxr = 0;
 8006d80:	2300      	movs	r3, #0
 8006d82:	62fb      	str	r3, [r7, #44]	; 0x2c
        bm->err = EnumError_E_INVALID_SHAPE;
 8006d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d86:	2205      	movs	r2, #5
 8006d88:	60da      	str	r2, [r3, #12]
      }

      itsize = aiPbBufferGetItemSize(format);
 8006d8a:	69f8      	ldr	r0, [r7, #28]
 8006d8c:	f7ff ffa5 	bl	8006cda <aiPbBufferGetItemSize>
 8006d90:	61b8      	str	r0, [r7, #24]

      /* Read data */
      uint8_t *pw = (uint8_t *)bm->buffer->data;
 8006d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	62bb      	str	r3, [r7, #40]	; 0x28
      while (stream->bytes_left) {
 8006d9a:	e027      	b.n	8006dec <aiPbBuffer_read_cb3+0xf2>
        uint64_t number;
        if (!pb_read(stream, (pb_byte_t *)&number, itsize))
 8006d9c:	f107 0310 	add.w	r3, r7, #16
 8006da0:	69ba      	ldr	r2, [r7, #24]
 8006da2:	4619      	mov	r1, r3
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f002 ff27 	bl	8009bf8 <pb_read>
 8006daa:	4603      	mov	r3, r0
 8006dac:	f083 0301 	eor.w	r3, r3, #1
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d001      	beq.n	8006dba <aiPbBuffer_read_cb3+0xc0>
          return false;
 8006db6:	2300      	movs	r3, #0
 8006db8:	e02a      	b.n	8006e10 <aiPbBuffer_read_cb3+0x116>
        if (maxr > 0) {
 8006dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	dd10      	ble.n	8006de2 <aiPbBuffer_read_cb3+0xe8>
          if (pw) {
 8006dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00a      	beq.n	8006ddc <aiPbBuffer_read_cb3+0xe2>
            memcpy(pw, &number, itsize);
 8006dc6:	f107 0310 	add.w	r3, r7, #16
 8006dca:	69ba      	ldr	r2, [r7, #24]
 8006dcc:	4619      	mov	r1, r3
 8006dce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dd0:	f008 fafc 	bl	800f3cc <memcpy>
            pw += itsize;
 8006dd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	4413      	add	r3, r2
 8006dda:	62bb      	str	r3, [r7, #40]	; 0x28
          }
          maxr--;
 8006ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dde:	3b01      	subs	r3, #1
 8006de0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        bm->n_ops++;
 8006de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	1c5a      	adds	r2, r3, #1
 8006de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dea:	609a      	str	r2, [r3, #8]
      while (stream->bytes_left) {
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d1d3      	bne.n	8006d9c <aiPbBuffer_read_cb3+0xa2>
      }

      /* Check nb_op */
      if ((bm->err == EnumError_E_NONE) && (bm->n_ops != bm->n_max))
 8006df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d108      	bne.n	8006e0e <aiPbBuffer_read_cb3+0x114>
 8006dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfe:	689a      	ldr	r2, [r3, #8]
 8006e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d002      	beq.n	8006e0e <aiPbBuffer_read_cb3+0x114>
        bm->err = EnumError_E_INVALID_SIZE;
 8006e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	60da      	str	r2, [r3, #12]

      return true;
 8006e0e:	2301      	movs	r3, #1
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3730      	adds	r7, #48	; 0x30
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <aiPbBuffer_write_cb3>:

static bool aiPbBuffer_write_cb3(pb_ostream_t *stream, const pb_field_t *field,
    void * const *arg)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b08a      	sub	sp, #40	; 0x28
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
  struct aiPbMgrBuffer *bm = (struct aiPbMgrBuffer *)*arg;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	627b      	str	r3, [r7, #36]	; 0x24
  size_t itsize;

  int maxw = bm->n_max;
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	623b      	str	r3, [r7, #32]
  ai_buffer_format format;

  if ((maxw == 0) || (!bm->buffer))
 8006e30:	6a3b      	ldr	r3, [r7, #32]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d003      	beq.n	8006e3e <aiPbBuffer_write_cb3+0x26>
 8006e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d101      	bne.n	8006e42 <aiPbBuffer_write_cb3+0x2a>
    return true;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e02c      	b.n	8006e9c <aiPbBuffer_write_cb3+0x84>

  format = bm->buffer->format;
 8006e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	61fb      	str	r3, [r7, #28]

  itsize = aiPbBufferGetItemSize(format);
 8006e4a:	69f8      	ldr	r0, [r7, #28]
 8006e4c:	f7ff ff45 	bl	8006cda <aiPbBufferGetItemSize>
 8006e50:	61b8      	str	r0, [r7, #24]

  /* Write data */
  pb_byte_t *pr = (pb_byte_t *)bm->buffer->data;
 8006e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	617b      	str	r3, [r7, #20]

  if (!pb_encode_tag_for_field(stream, field))
 8006e5a:	68b9      	ldr	r1, [r7, #8]
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f005 f8ad 	bl	800bfbc <pb_encode_tag_for_field>
 8006e62:	4603      	mov	r3, r0
 8006e64:	f083 0301 	eor.w	r3, r3, #1
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d001      	beq.n	8006e72 <aiPbBuffer_write_cb3+0x5a>
    return false;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	e014      	b.n	8006e9c <aiPbBuffer_write_cb3+0x84>

  if (!pb_encode_string(stream, pr, itsize * maxw))
 8006e72:	6a3b      	ldr	r3, [r7, #32]
 8006e74:	69ba      	ldr	r2, [r7, #24]
 8006e76:	fb02 f303 	mul.w	r3, r2, r3
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	6979      	ldr	r1, [r7, #20]
 8006e7e:	68f8      	ldr	r0, [r7, #12]
 8006e80:	f005 f8e6 	bl	800c050 <pb_encode_string>
 8006e84:	4603      	mov	r3, r0
 8006e86:	f083 0301 	eor.w	r3, r3, #1
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d001      	beq.n	8006e94 <aiPbBuffer_write_cb3+0x7c>
    return false;
 8006e90:	2300      	movs	r3, #0
 8006e92:	e003      	b.n	8006e9c <aiPbBuffer_write_cb3+0x84>

  bm->n_ops = maxw;
 8006e94:	6a3a      	ldr	r2, [r7, #32]
 8006e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e98:	609a      	str	r2, [r3, #8]

  return true;
 8006e9a:	2301      	movs	r3, #1
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3728      	adds	r7, #40	; 0x28
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <aiPbMgrReceiveAiBuffer3>:

bool aiPbMgrReceiveAiBuffer3(const reqMsg *req, respMsg *resp,
    EnumState state, ai_buffer *buffer)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b096      	sub	sp, #88	; 0x58
 8006ea8:	af02      	add	r7, sp, #8
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	603b      	str	r3, [r7, #0]
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	71fb      	strb	r3, [r7, #7]
  aiBufferByteMsg msg;
  struct aiPbMgrBuffer hdlb;
  bool res = true;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  hdlb.n_ops = 0;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	61fb      	str	r3, [r7, #28]
  hdlb.buffer = buffer;
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	617b      	str	r3, [r7, #20]
  hdlb.err = EnumError_E_NONE;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	623b      	str	r3, [r7, #32]
  hdlb.n_max = aiPbAiBufferSize(buffer);
 8006ec6:	6838      	ldr	r0, [r7, #0]
 8006ec8:	f7ff fed4 	bl	8006c74 <aiPbAiBufferSize>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	61bb      	str	r3, [r7, #24]
  hdlb.msg = &msg;
 8006ed0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ed4:	627b      	str	r3, [r7, #36]	; 0x24

  msg.datas.funcs.decode = &aiPbBuffer_read_cb3;
 8006ed6:	4b1b      	ldr	r3, [pc, #108]	; (8006f44 <aiPbMgrReceiveAiBuffer3+0xa0>)
 8006ed8:	647b      	str	r3, [r7, #68]	; 0x44
  msg.datas.arg = &hdlb;
 8006eda:	f107 0314 	add.w	r3, r7, #20
 8006ede:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Waiting buffer message */
  pb_decode_delimited(&pbContextMgr.input, aiBufferByteMsg_fields, &msg);
 8006ee0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	4918      	ldr	r1, [pc, #96]	; (8006f48 <aiPbMgrReceiveAiBuffer3+0xa4>)
 8006ee8:	4818      	ldr	r0, [pc, #96]	; (8006f4c <aiPbMgrReceiveAiBuffer3+0xa8>)
 8006eea:	f003 fead 	bl	800ac48 <pb_decode_delimited>
  pb_io_flush_istream();
 8006eee:	f7ff fd25 	bl	800693c <pb_io_flush_istream>

  /* Send ACK and wait ACK (or send ACK only if error) */
  if (hdlb.err) {
 8006ef2:	6a3b      	ldr	r3, [r7, #32]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00d      	beq.n	8006f14 <aiPbMgrReceiveAiBuffer3+0x70>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR, hdlb.err,
 8006ef8:	6a3a      	ldr	r2, [r7, #32]
        (EnumError)hdlb.err);
 8006efa:	6a3b      	ldr	r3, [r7, #32]
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR, hdlb.err,
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	9300      	str	r3, [sp, #0]
 8006f00:	4613      	mov	r3, r2
 8006f02:	2204      	movs	r2, #4
 8006f04:	68b9      	ldr	r1, [r7, #8]
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	f7ff fe7e 	bl	8006c08 <aiPbMgrSendAck>
    res = false;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006f12:	e010      	b.n	8006f36 <aiPbMgrReceiveAiBuffer3+0x92>
  } else {
    aiPbMgrSendAck(req, resp, state, hdlb.n_ops, EnumError_E_NONE);
 8006f14:	69f9      	ldr	r1, [r7, #28]
 8006f16:	79fa      	ldrb	r2, [r7, #7]
 8006f18:	2300      	movs	r3, #0
 8006f1a:	9300      	str	r3, [sp, #0]
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	68b9      	ldr	r1, [r7, #8]
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f7ff fe71 	bl	8006c08 <aiPbMgrSendAck>
    if ((state == EnumState_S_WAITING) ||
 8006f26:	79fb      	ldrb	r3, [r7, #7]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d002      	beq.n	8006f32 <aiPbMgrReceiveAiBuffer3+0x8e>
 8006f2c:	79fb      	ldrb	r3, [r7, #7]
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d101      	bne.n	8006f36 <aiPbMgrReceiveAiBuffer3+0x92>
        (state == EnumState_S_PROCESSING))
      aiPbMgrWaitAck();
 8006f32:	f7ff fe85 	bl	8006c40 <aiPbMgrWaitAck>
  }

  return res;
 8006f36:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3750      	adds	r7, #80	; 0x50
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	08006cfb 	.word	0x08006cfb
 8006f48:	0801b720 	.word	0x0801b720
 8006f4c:	2000094c 	.word	0x2000094c

08006f50 <aiPbMgrSetMetaInfo>:

static void aiPbMgrSetMetaInfo(const ai_buffer_meta_info *meta_info, const int idx,
    aiBufferShapeMsg *shape)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
  shape->scale = 0.0f;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f04f 0200 	mov.w	r2, #0
 8006f62:	615a      	str	r2, [r3, #20]
  shape->zeropoint = 0;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	619a      	str	r2, [r3, #24]
  if (AI_BUFFER_META_INFO_INTQ(meta_info)) {
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f000 811e 	beq.w	80071ae <aiPbMgrSetMetaInfo+0x25e>
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f000 8117 	beq.w	80071ae <aiPbMgrSetMetaInfo+0x25e>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f000 8112 	beq.w	80071ae <aiPbMgrSetMetaInfo+0x25e>
    shape->scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(meta_info, idx);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d04f      	beq.n	8007030 <aiPbMgrSetMetaInfo+0xe0>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 0301 	and.w	r3, r3, #1
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d049      	beq.n	8007030 <aiPbMgrSetMetaInfo+0xe0>
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d045      	beq.n	8007030 <aiPbMgrSetMetaInfo+0xe0>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d03f      	beq.n	800702a <aiPbMgrSetMetaInfo+0xda>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 0301 	and.w	r3, r3, #1
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d039      	beq.n	800702a <aiPbMgrSetMetaInfo+0xda>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d035      	beq.n	800702a <aiPbMgrSetMetaInfo+0xda>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d008      	beq.n	8006fd6 <aiPbMgrSetMetaInfo+0x86>
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 0301 	and.w	r3, r3, #1
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d002      	beq.n	8006fd6 <aiPbMgrSetMetaInfo+0x86>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	e000      	b.n	8006fd8 <aiPbMgrSetMetaInfo+0x88>
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d025      	beq.n	800702a <aiPbMgrSetMetaInfo+0xda>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d008      	beq.n	8006ff6 <aiPbMgrSetMetaInfo+0xa6>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 0301 	and.w	r3, r3, #1
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d002      	beq.n	8006ff6 <aiPbMgrSetMetaInfo+0xa6>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	e000      	b.n	8006ff8 <aiPbMgrSetMetaInfo+0xa8>
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	885b      	ldrh	r3, [r3, #2]
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	4293      	cmp	r3, r2
 8007000:	da13      	bge.n	800702a <aiPbMgrSetMetaInfo+0xda>
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d008      	beq.n	800701a <aiPbMgrSetMetaInfo+0xca>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0301 	and.w	r3, r3, #1
 8007010:	2b00      	cmp	r3, #0
 8007012:	d002      	beq.n	800701a <aiPbMgrSetMetaInfo+0xca>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	e000      	b.n	800701c <aiPbMgrSetMetaInfo+0xcc>
 800701a:	2300      	movs	r3, #0
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	4413      	add	r3, r2
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	e004      	b.n	8007034 <aiPbMgrSetMetaInfo+0xe4>
 800702a:	f04f 0300 	mov.w	r3, #0
 800702e:	e001      	b.n	8007034 <aiPbMgrSetMetaInfo+0xe4>
 8007030:	f04f 0300 	mov.w	r3, #0
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	6153      	str	r3, [r2, #20]
    shape->zeropoint = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(meta_info, idx);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2b00      	cmp	r3, #0
 800703c:	f000 80b4 	beq.w	80071a8 <aiPbMgrSetMetaInfo+0x258>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0301 	and.w	r3, r3, #1
 8007048:	2b00      	cmp	r3, #0
 800704a:	f000 80ad 	beq.w	80071a8 <aiPbMgrSetMetaInfo+0x258>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	2b00      	cmp	r3, #0
 8007054:	f000 80a8 	beq.w	80071a8 <aiPbMgrSetMetaInfo+0x258>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d05f      	beq.n	800711e <aiPbMgrSetMetaInfo+0x1ce>
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 0301 	and.w	r3, r3, #1
 8007066:	2b00      	cmp	r3, #0
 8007068:	d059      	beq.n	800711e <aiPbMgrSetMetaInfo+0x1ce>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d055      	beq.n	800711e <aiPbMgrSetMetaInfo+0x1ce>
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d008      	beq.n	800708a <aiPbMgrSetMetaInfo+0x13a>
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 0301 	and.w	r3, r3, #1
 8007080:	2b00      	cmp	r3, #0
 8007082:	d002      	beq.n	800708a <aiPbMgrSetMetaInfo+0x13a>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	e000      	b.n	800708c <aiPbMgrSetMetaInfo+0x13c>
 800708a:	2300      	movs	r3, #0
 800708c:	881b      	ldrh	r3, [r3, #0]
 800708e:	f003 0302 	and.w	r3, r3, #2
 8007092:	2b00      	cmp	r3, #0
 8007094:	d043      	beq.n	800711e <aiPbMgrSetMetaInfo+0x1ce>
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d03e      	beq.n	800711a <aiPbMgrSetMetaInfo+0x1ca>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0301 	and.w	r3, r3, #1
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d038      	beq.n	800711a <aiPbMgrSetMetaInfo+0x1ca>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d034      	beq.n	800711a <aiPbMgrSetMetaInfo+0x1ca>
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d008      	beq.n	80070c8 <aiPbMgrSetMetaInfo+0x178>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d002      	beq.n	80070c8 <aiPbMgrSetMetaInfo+0x178>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	e000      	b.n	80070ca <aiPbMgrSetMetaInfo+0x17a>
 80070c8:	2300      	movs	r3, #0
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d024      	beq.n	800711a <aiPbMgrSetMetaInfo+0x1ca>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d008      	beq.n	80070e8 <aiPbMgrSetMetaInfo+0x198>
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 0301 	and.w	r3, r3, #1
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d002      	beq.n	80070e8 <aiPbMgrSetMetaInfo+0x198>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	e000      	b.n	80070ea <aiPbMgrSetMetaInfo+0x19a>
 80070e8:	2300      	movs	r3, #0
 80070ea:	885b      	ldrh	r3, [r3, #2]
 80070ec:	461a      	mov	r2, r3
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	4293      	cmp	r3, r2
 80070f2:	da12      	bge.n	800711a <aiPbMgrSetMetaInfo+0x1ca>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d008      	beq.n	800710c <aiPbMgrSetMetaInfo+0x1bc>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 0301 	and.w	r3, r3, #1
 8007102:	2b00      	cmp	r3, #0
 8007104:	d002      	beq.n	800710c <aiPbMgrSetMetaInfo+0x1bc>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	e000      	b.n	800710e <aiPbMgrSetMetaInfo+0x1be>
 800710c:	2300      	movs	r3, #0
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	685a      	ldr	r2, [r3, #4]
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	4413      	add	r3, r2
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	e047      	b.n	80071aa <aiPbMgrSetMetaInfo+0x25a>
 800711a:	2300      	movs	r3, #0
 800711c:	e045      	b.n	80071aa <aiPbMgrSetMetaInfo+0x25a>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d03f      	beq.n	80071a4 <aiPbMgrSetMetaInfo+0x254>
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 0301 	and.w	r3, r3, #1
 800712c:	2b00      	cmp	r3, #0
 800712e:	d039      	beq.n	80071a4 <aiPbMgrSetMetaInfo+0x254>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d035      	beq.n	80071a4 <aiPbMgrSetMetaInfo+0x254>
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d008      	beq.n	8007150 <aiPbMgrSetMetaInfo+0x200>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 0301 	and.w	r3, r3, #1
 8007146:	2b00      	cmp	r3, #0
 8007148:	d002      	beq.n	8007150 <aiPbMgrSetMetaInfo+0x200>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	e000      	b.n	8007152 <aiPbMgrSetMetaInfo+0x202>
 8007150:	2300      	movs	r3, #0
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d025      	beq.n	80071a4 <aiPbMgrSetMetaInfo+0x254>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d008      	beq.n	8007170 <aiPbMgrSetMetaInfo+0x220>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0301 	and.w	r3, r3, #1
 8007166:	2b00      	cmp	r3, #0
 8007168:	d002      	beq.n	8007170 <aiPbMgrSetMetaInfo+0x220>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	e000      	b.n	8007172 <aiPbMgrSetMetaInfo+0x222>
 8007170:	2300      	movs	r3, #0
 8007172:	885b      	ldrh	r3, [r3, #2]
 8007174:	461a      	mov	r2, r3
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	4293      	cmp	r3, r2
 800717a:	da13      	bge.n	80071a4 <aiPbMgrSetMetaInfo+0x254>
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d008      	beq.n	8007194 <aiPbMgrSetMetaInfo+0x244>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 0301 	and.w	r3, r3, #1
 800718a:	2b00      	cmp	r3, #0
 800718c:	d002      	beq.n	8007194 <aiPbMgrSetMetaInfo+0x244>
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	e000      	b.n	8007196 <aiPbMgrSetMetaInfo+0x246>
 8007194:	2300      	movs	r3, #0
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	685a      	ldr	r2, [r3, #4]
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	4413      	add	r3, r2
 800719e:	f993 3000 	ldrsb.w	r3, [r3]
 80071a2:	e002      	b.n	80071aa <aiPbMgrSetMetaInfo+0x25a>
 80071a4:	2300      	movs	r3, #0
 80071a6:	e000      	b.n	80071aa <aiPbMgrSetMetaInfo+0x25a>
 80071a8:	2300      	movs	r3, #0
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	6193      	str	r3, [r2, #24]
  }
}
 80071ae:	bf00      	nop
 80071b0:	3714      	adds	r7, #20
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
	...

080071bc <aiPbMgrSendAiBuffer4>:

bool aiPbMgrSendAiBuffer4(const reqMsg *req, respMsg *resp, EnumState state,
    uint32_t type, uint32_t id, ai_float dur_ms, const ai_buffer *buffer,
    ai_float scale, ai_i32 zero_point)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b08c      	sub	sp, #48	; 0x30
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6178      	str	r0, [r7, #20]
 80071c4:	6139      	str	r1, [r7, #16]
 80071c6:	60bb      	str	r3, [r7, #8]
 80071c8:	ed87 0a01 	vstr	s0, [r7, #4]
 80071cc:	edc7 0a00 	vstr	s1, [r7]
 80071d0:	4613      	mov	r3, r2
 80071d2:	73fb      	strb	r3, [r7, #15]
  struct aiPbMgrBuffer hdlb;
  const ai_buffer_meta_info *meta_info = AI_BUFFER_META_INFO(buffer);
 80071d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071d6:	695b      	ldr	r3, [r3, #20]
 80071d8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(AI_PB_FULL_IO) && (AI_PB_FULL_IO == 1)
  const int is_io = AI_BUFFER_FMT_FLAG_IS_IO & buffer->format;
#endif

  hdlb.n_ops = 0;
 80071da:	2300      	movs	r3, #0
 80071dc:	623b      	str	r3, [r7, #32]
  hdlb.buffer = (ai_buffer *)buffer;
 80071de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071e0:	61bb      	str	r3, [r7, #24]
  hdlb.err = EnumError_E_NONE;
 80071e2:	2300      	movs	r3, #0
 80071e4:	627b      	str	r3, [r7, #36]	; 0x24
  hdlb.n_max = aiPbAiBufferSize(buffer);
 80071e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80071e8:	f7ff fd44 	bl	8006c74 <aiPbAiBufferSize>
 80071ec:	4603      	mov	r3, r0
 80071ee:	61fb      	str	r3, [r7, #28]
  hdlb.msg = NULL;
 80071f0:	2300      	movs	r3, #0
 80071f2:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(AI_PB_FULL_IO) && (AI_PB_FULL_IO == 1)
  if ((type & PB_BUFFER_TYPE_SEND_WITHOUT_DATA) && (!is_io)) {
    hdlb.n_max  = 0;
  }
#else
  if (type & PB_BUFFER_TYPE_SEND_WITHOUT_DATA) {
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	da01      	bge.n	80071fe <aiPbMgrSendAiBuffer4+0x42>
    hdlb.n_max  = 0;
 80071fa:	2300      	movs	r3, #0
 80071fc:	61fb      	str	r3, [r7, #28]
  }
#endif
  type &= (~PB_BUFFER_TYPE_SEND_WITHOUT_DATA);
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007204:	60bb      	str	r3, [r7, #8]

  /* Fill Node sub-message */
  resp->which_payload = respMsg_node_tag;
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	220e      	movs	r2, #14
 800720a:	80da      	strh	r2, [r3, #6]
  resp->payload.node.type = type;
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	68ba      	ldr	r2, [r7, #8]
 8007210:	609a      	str	r2, [r3, #8]
  resp->payload.node.id = id;
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007216:	60da      	str	r2, [r3, #12]
  resp->payload.node.duration = dur_ms;
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	611a      	str	r2, [r3, #16]
  resp->payload.node.buffer.shape.format = aiPbAiFmtToMsgFmt(buffer->format);
 800721e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4618      	mov	r0, r3
 8007224:	f7ff fd4e 	bl	8006cc4 <aiPbAiFmtToMsgFmt>
 8007228:	4602      	mov	r2, r0
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	615a      	str	r2, [r3, #20]
  resp->payload.node.buffer.shape.n_batches = buffer->n_batches;
 800722e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007230:	889b      	ldrh	r3, [r3, #4]
 8007232:	461a      	mov	r2, r3
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	619a      	str	r2, [r3, #24]
  resp->payload.node.buffer.shape.height = buffer->height;
 8007238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800723a:	88db      	ldrh	r3, [r3, #6]
 800723c:	461a      	mov	r2, r3
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	61da      	str	r2, [r3, #28]
  resp->payload.node.buffer.shape.width = buffer->width;
 8007242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007244:	891b      	ldrh	r3, [r3, #8]
 8007246:	461a      	mov	r2, r3
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	621a      	str	r2, [r3, #32]
  resp->payload.node.buffer.shape.channels = buffer->channels;
 800724c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800724e:	68da      	ldr	r2, [r3, #12]
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	625a      	str	r2, [r3, #36]	; 0x24

  if (meta_info)
 8007254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007256:	2b00      	cmp	r3, #0
 8007258:	d007      	beq.n	800726a <aiPbMgrSendAiBuffer4+0xae>
    aiPbMgrSetMetaInfo(meta_info, 0, &resp->payload.node.buffer.shape);
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	3314      	adds	r3, #20
 800725e:	461a      	mov	r2, r3
 8007260:	2100      	movs	r1, #0
 8007262:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007264:	f7ff fe74 	bl	8006f50 <aiPbMgrSetMetaInfo>
 8007268:	e005      	b.n	8007276 <aiPbMgrSendAiBuffer4+0xba>
  else {
    resp->payload.node.buffer.shape.scale = scale;
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	683a      	ldr	r2, [r7, #0]
 800726e:	629a      	str	r2, [r3, #40]	; 0x28
    resp->payload.node.buffer.shape.zeropoint = zero_point;
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007274:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  resp->payload.node.buffer.datas.funcs.encode = &aiPbBuffer_write_cb3;
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	4a0b      	ldr	r2, [pc, #44]	; (80072a8 <aiPbMgrSendAiBuffer4+0xec>)
 800727a:	631a      	str	r2, [r3, #48]	; 0x30
  resp->payload.node.buffer.datas.arg = &hdlb;
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	f107 0218 	add.w	r2, r7, #24
 8007282:	635a      	str	r2, [r3, #52]	; 0x34

  /* Send msg */
  aiPbMgrSendResp(req, resp, state);
 8007284:	7bfb      	ldrb	r3, [r7, #15]
 8007286:	461a      	mov	r2, r3
 8007288:	6939      	ldr	r1, [r7, #16]
 800728a:	6978      	ldr	r0, [r7, #20]
 800728c:	f7ff fc9e 	bl	8006bcc <aiPbMgrSendResp>

  /* Waiting ACK */
  if (state == EnumState_S_PROCESSING)
 8007290:	7bfb      	ldrb	r3, [r7, #15]
 8007292:	2b02      	cmp	r3, #2
 8007294:	d103      	bne.n	800729e <aiPbMgrSendAiBuffer4+0xe2>
    return aiPbMgrWaitAck();
 8007296:	f7ff fcd3 	bl	8006c40 <aiPbMgrWaitAck>
 800729a:	4603      	mov	r3, r0
 800729c:	e000      	b.n	80072a0 <aiPbMgrSendAiBuffer4+0xe4>
  else
    return true;
 800729e:	2301      	movs	r3, #1
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3730      	adds	r7, #48	; 0x30
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	08006e19 	.word	0x08006e19

080072ac <aiPbCmdSync>:

/*---------------------------------------------------------------------------*/

void aiPbCmdSync(const reqMsg *req, respMsg *resp, void *param)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
  resp->which_payload = respMsg_sync_tag;
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	220a      	movs	r2, #10
 80072bc:	80da      	strh	r2, [r3, #6]
  resp->payload.sync.version =
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	f240 2201 	movw	r2, #513	; 0x201
 80072c4:	609a      	str	r2, [r3, #8]
      EnumVersion_P_VERSION_MAJOR << 8 |
      EnumVersion_P_VERSION_MINOR;

  resp->payload.sync.capability = EnumCapability_CAP_FIXED_POINT;
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	2202      	movs	r2, #2
 80072ca:	60da      	str	r2, [r3, #12]

#if defined(AI_PB_TEST) && (AI_PB_TEST == 1)
  resp->payload.sync.capability |= EnumCapability_CAP_SELF_TEST;
#endif

  if (param)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d005      	beq.n	80072de <aiPbCmdSync+0x32>
    resp->payload.sync.capability |= (uint32_t)param;
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	68da      	ldr	r2, [r3, #12]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	431a      	orrs	r2, r3
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	60da      	str	r2, [r3, #12]

  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 80072de:	2200      	movs	r2, #0
 80072e0:	68b9      	ldr	r1, [r7, #8]
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	f7ff fc72 	bl	8006bcc <aiPbMgrSendResp>
}
 80072e8:	bf00      	nop
 80072ea:	3710      	adds	r7, #16
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <aiPbCmdSysInfo>:

void aiPbCmdSysInfo(const reqMsg *req, respMsg *resp, void *param)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]
  UNUSED(param);
  resp->which_payload = respMsg_sinfo_tag;
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	220b      	movs	r2, #11
 8007300:	80da      	strh	r2, [r3, #6]
  resp->payload.sinfo.devid = HAL_GetDEVID();
 8007302:	f7fa f931 	bl	8001568 <HAL_GetDEVID>
 8007306:	4602      	mov	r2, r0
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	609a      	str	r2, [r3, #8]
#ifdef STM32MP1
  resp->payload.sinfo.sclock = HAL_RCC_GetSystemCoreClockFreq();
  resp->payload.sinfo.hclock = HAL_RCC_GetHCLK3Freq();
#else
  resp->payload.sinfo.sclock = HAL_RCC_GetSysClockFreq();
 800730c:	f7fb fe38 	bl	8002f80 <HAL_RCC_GetSysClockFreq>
 8007310:	4602      	mov	r2, r0
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	60da      	str	r2, [r3, #12]
  resp->payload.sinfo.hclock = HAL_RCC_GetHCLKFreq();
 8007316:	f7fb febd 	bl	8003094 <HAL_RCC_GetHCLKFreq>
 800731a:	4602      	mov	r2, r0
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	611a      	str	r2, [r3, #16]
#endif
  resp->payload.sinfo.cache = getFlashCacheConf();
 8007320:	f001 f834 	bl	800838c <getFlashCacheConf>
 8007324:	4602      	mov	r2, r0
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	615a      	str	r2, [r3, #20]

  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 800732a:	2200      	movs	r2, #0
 800732c:	68b9      	ldr	r1, [r7, #8]
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f7ff fc4c 	bl	8006bcc <aiPbMgrSendResp>
}
 8007334:	bf00      	nop
 8007336:	3710      	adds	r7, #16
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <init_aibuffer_msg>:


static void init_aibuffer_msg(const ai_buffer *aibuffer, aiBufferShapeMsg *msg)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  if ((!aibuffer) || (!msg))
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d026      	beq.n	800739a <init_aibuffer_msg+0x5e>
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d023      	beq.n	800739a <init_aibuffer_msg+0x5e>
    return;

  const ai_buffer_meta_info *meta_info = AI_BUFFER_META_INFO(aibuffer);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	60fb      	str	r3, [r7, #12]

  msg->format = aiPbAiFmtToMsgFmt(aibuffer->format);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4618      	mov	r0, r3
 800735e:	f7ff fcb1 	bl	8006cc4 <aiPbAiFmtToMsgFmt>
 8007362:	4602      	mov	r2, r0
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	601a      	str	r2, [r3, #0]
  msg->channels = aibuffer->channels;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	68da      	ldr	r2, [r3, #12]
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	611a      	str	r2, [r3, #16]
  msg->height = aibuffer->height;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	88db      	ldrh	r3, [r3, #6]
 8007374:	461a      	mov	r2, r3
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	609a      	str	r2, [r3, #8]
  msg->width = aibuffer->width;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	891b      	ldrh	r3, [r3, #8]
 800737e:	461a      	mov	r2, r3
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	60da      	str	r2, [r3, #12]
  msg->n_batches = aibuffer->n_batches;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	889b      	ldrh	r3, [r3, #4]
 8007388:	461a      	mov	r2, r3
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	605a      	str	r2, [r3, #4]
  aiPbMgrSetMetaInfo(meta_info, 0, msg);
 800738e:	683a      	ldr	r2, [r7, #0]
 8007390:	2100      	movs	r1, #0
 8007392:	68f8      	ldr	r0, [r7, #12]
 8007394:	f7ff fddc 	bl	8006f50 <aiPbMgrSetMetaInfo>
 8007398:	e000      	b.n	800739c <init_aibuffer_msg+0x60>
    return;
 800739a:	bf00      	nop
}
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
	...

080073a4 <nn_shape_w_cb>:

static bool nn_shape_w_cb(pb_ostream_t *stream, const pb_field_t *field,
    const ai_buffer *aibuffer, int maxw)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b08c      	sub	sp, #48	; 0x30
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	607a      	str	r2, [r7, #4]
 80073b0:	603b      	str	r3, [r7, #0]
  aiBufferShapeMsg msg;

  for (int i = 0; i < maxw; i++) {
 80073b2:	2300      	movs	r3, #0
 80073b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073b6:	e02b      	b.n	8007410 <nn_shape_w_cb+0x6c>
    if (!pb_encode_tag_for_field(stream, field))
 80073b8:	68b9      	ldr	r1, [r7, #8]
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f004 fdfe 	bl	800bfbc <pb_encode_tag_for_field>
 80073c0:	4603      	mov	r3, r0
 80073c2:	f083 0301 	eor.w	r3, r3, #1
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d001      	beq.n	80073d0 <nn_shape_w_cb+0x2c>
      return false;
 80073cc:	2300      	movs	r3, #0
 80073ce:	e024      	b.n	800741a <nn_shape_w_cb+0x76>

    init_aibuffer_msg(&aibuffer[i], &msg);
 80073d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073d2:	4613      	mov	r3, r2
 80073d4:	005b      	lsls	r3, r3, #1
 80073d6:	4413      	add	r3, r2
 80073d8:	00db      	lsls	r3, r3, #3
 80073da:	461a      	mov	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4413      	add	r3, r2
 80073e0:	f107 0210 	add.w	r2, r7, #16
 80073e4:	4611      	mov	r1, r2
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7ff ffa8 	bl	800733c <init_aibuffer_msg>

    if (!pb_encode_submessage(stream, aiBufferShapeMsg_fields, &msg))
 80073ec:	f107 0310 	add.w	r3, r7, #16
 80073f0:	461a      	mov	r2, r3
 80073f2:	490c      	ldr	r1, [pc, #48]	; (8007424 <nn_shape_w_cb+0x80>)
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	f004 fe4b 	bl	800c090 <pb_encode_submessage>
 80073fa:	4603      	mov	r3, r0
 80073fc:	f083 0301 	eor.w	r3, r3, #1
 8007400:	b2db      	uxtb	r3, r3
 8007402:	2b00      	cmp	r3, #0
 8007404:	d001      	beq.n	800740a <nn_shape_w_cb+0x66>
      return false;
 8007406:	2300      	movs	r3, #0
 8007408:	e007      	b.n	800741a <nn_shape_w_cb+0x76>
  for (int i = 0; i < maxw; i++) {
 800740a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740c:	3301      	adds	r3, #1
 800740e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007410:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	429a      	cmp	r2, r3
 8007416:	dbcf      	blt.n	80073b8 <nn_shape_w_cb+0x14>
  }
  return true;
 8007418:	2301      	movs	r3, #1
}
 800741a:	4618      	mov	r0, r3
 800741c:	3730      	adds	r7, #48	; 0x30
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	0801b56c 	.word	0x0801b56c

08007428 <nn_inputs_w_cb>:

static bool nn_inputs_w_cb(pb_ostream_t *stream, const pb_field_t *field,
    void * const *arg)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b086      	sub	sp, #24
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	607a      	str	r2, [r7, #4]
  ai_network_report *report = (ai_network_report *)*arg;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	617b      	str	r3, [r7, #20]

  if (!report)
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d101      	bne.n	8007444 <nn_inputs_w_cb+0x1c>
    return true;
 8007440:	2301      	movs	r3, #1
 8007442:	e008      	b.n	8007456 <nn_inputs_w_cb+0x2e>

  return nn_shape_w_cb(stream, field, &report->inputs[0], report->n_inputs);
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800744c:	68b9      	ldr	r1, [r7, #8]
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	f7ff ffa8 	bl	80073a4 <nn_shape_w_cb>
 8007454:	4603      	mov	r3, r0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3718      	adds	r7, #24
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <nn_outputs_w_cb>:

static bool nn_outputs_w_cb(pb_ostream_t *stream, const pb_field_t *field,
    void * const *arg)
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b086      	sub	sp, #24
 8007462:	af00      	add	r7, sp, #0
 8007464:	60f8      	str	r0, [r7, #12]
 8007466:	60b9      	str	r1, [r7, #8]
 8007468:	607a      	str	r2, [r7, #4]
  ai_network_report *report = (ai_network_report *)*arg;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	617b      	str	r3, [r7, #20]

  if (!report)
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d101      	bne.n	800747a <nn_outputs_w_cb+0x1c>
    return true;
 8007476:	2301      	movs	r3, #1
 8007478:	e008      	b.n	800748c <nn_outputs_w_cb+0x2e>

  return nn_shape_w_cb(stream, field, &report->outputs[0], report->n_outputs);
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007482:	68b9      	ldr	r1, [r7, #8]
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f7ff ff8d 	bl	80073a4 <nn_shape_w_cb>
 800748a:	4603      	mov	r3, r0
}
 800748c:	4618      	mov	r0, r3
 800748e:	3718      	adds	r7, #24
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <aiPbStrCopy>:

void aiPbStrCopy(const char *src, char *dst, uint32_t max)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b088      	sub	sp, #32
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	607a      	str	r2, [r7, #4]
  const char undef[] = "UNDEFINED";
 80074a0:	4a19      	ldr	r2, [pc, #100]	; (8007508 <aiPbStrCopy+0x74>)
 80074a2:	f107 0310 	add.w	r3, r7, #16
 80074a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80074a8:	c303      	stmia	r3!, {r0, r1}
 80074aa:	801a      	strh	r2, [r3, #0]
  size_t l = strlen(src);
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f7f8 fea7 	bl	8000200 <strlen>
 80074b2:	61f8      	str	r0, [r7, #28]

  if (l > max)
 80074b4:	69fa      	ldr	r2, [r7, #28]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d902      	bls.n	80074c2 <aiPbStrCopy+0x2e>
    l = max-1;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	3b01      	subs	r3, #1
 80074c0:	61fb      	str	r3, [r7, #28]

  if (!dst)
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d01b      	beq.n	8007500 <aiPbStrCopy+0x6c>
    return;

  if (src && l)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00a      	beq.n	80074e4 <aiPbStrCopy+0x50>
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d007      	beq.n	80074e4 <aiPbStrCopy+0x50>
    memcpy(dst, src, l+1);
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	3301      	adds	r3, #1
 80074d8:	461a      	mov	r2, r3
 80074da:	68f9      	ldr	r1, [r7, #12]
 80074dc:	68b8      	ldr	r0, [r7, #8]
 80074de:	f007 ff75 	bl	800f3cc <memcpy>
 80074e2:	e00e      	b.n	8007502 <aiPbStrCopy+0x6e>
  else
    memcpy(dst, undef, strlen(undef)+1);
 80074e4:	f107 0310 	add.w	r3, r7, #16
 80074e8:	4618      	mov	r0, r3
 80074ea:	f7f8 fe89 	bl	8000200 <strlen>
 80074ee:	4603      	mov	r3, r0
 80074f0:	1c5a      	adds	r2, r3, #1
 80074f2:	f107 0310 	add.w	r3, r7, #16
 80074f6:	4619      	mov	r1, r3
 80074f8:	68b8      	ldr	r0, [r7, #8]
 80074fa:	f007 ff67 	bl	800f3cc <memcpy>
 80074fe:	e000      	b.n	8007502 <aiPbStrCopy+0x6e>
    return;
 8007500:	bf00      	nop
}
 8007502:	3720      	adds	r7, #32
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}
 8007508:	080105e4 	.word	0x080105e4

0800750c <aiPbVersionToUint32>:

uint32_t aiPbVersionToUint32(const ai_platform_version *ver)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  if (!ver)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d101      	bne.n	800751e <aiPbVersionToUint32+0x12>
    return 0;
 800751a:	2300      	movs	r3, #0
 800751c:	e00d      	b.n	800753a <aiPbVersionToUint32+0x2e>

  return ver->major << 24 | ver->minor << 16
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	061a      	lsls	r2, r3, #24
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	785b      	ldrb	r3, [r3, #1]
 8007528:	041b      	lsls	r3, r3, #16
 800752a:	431a      	orrs	r2, r3
      | ver->micro << 8 | ver->reserved;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	789b      	ldrb	r3, [r3, #2]
 8007530:	021b      	lsls	r3, r3, #8
 8007532:	4313      	orrs	r3, r2
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	78d2      	ldrb	r2, [r2, #3]
 8007538:	4313      	orrs	r3, r2
}
 800753a:	4618      	mov	r0, r3
 800753c:	370c      	adds	r7, #12
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
	...

08007548 <aiPbMgrSendNNInfo>:

void aiPbMgrSendNNInfo(const reqMsg *req, respMsg *resp,
    EnumState state, const ai_network_report *nn)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	603b      	str	r3, [r7, #0]
 8007554:	4613      	mov	r3, r2
 8007556:	71fb      	strb	r3, [r7, #7]
  resp->which_payload = respMsg_ninfo_tag;
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	2214      	movs	r2, #20
 800755c:	80da      	strh	r2, [r3, #6]

  aiPbStrCopy(nn->model_name,
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	6818      	ldr	r0, [r3, #0]
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	3308      	adds	r3, #8
 8007566:	2240      	movs	r2, #64	; 0x40
 8007568:	4619      	mov	r1, r3
 800756a:	f7ff ff93 	bl	8007494 <aiPbStrCopy>
      &resp->payload.ninfo.model_name[0],
      sizeof(resp->payload.ninfo.model_name));
  aiPbStrCopy(nn->model_signature,
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	6858      	ldr	r0, [r3, #4]
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	3348      	adds	r3, #72	; 0x48
 8007576:	2240      	movs	r2, #64	; 0x40
 8007578:	4619      	mov	r1, r3
 800757a:	f7ff ff8b 	bl	8007494 <aiPbStrCopy>
      &resp->payload.ninfo.model_signature[0],
      sizeof(resp->payload.ninfo.model_signature));
  aiPbStrCopy(nn->model_datetime,
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	6898      	ldr	r0, [r3, #8]
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	3388      	adds	r3, #136	; 0x88
 8007586:	2240      	movs	r2, #64	; 0x40
 8007588:	4619      	mov	r1, r3
 800758a:	f7ff ff83 	bl	8007494 <aiPbStrCopy>
      &resp->payload.ninfo.model_datetime[0],
      sizeof(resp->payload.ninfo.model_datetime));
  aiPbStrCopy(nn->compile_datetime,
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	68d8      	ldr	r0, [r3, #12]
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	33c8      	adds	r3, #200	; 0xc8
 8007596:	2240      	movs	r2, #64	; 0x40
 8007598:	4619      	mov	r1, r3
 800759a:	f7ff ff7b 	bl	8007494 <aiPbStrCopy>
      &resp->payload.ninfo.compile_datetime[0],
      sizeof(resp->payload.ninfo.compile_datetime));
  aiPbStrCopy(nn->runtime_revision,
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	6918      	ldr	r0, [r3, #16]
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80075a8:	2240      	movs	r2, #64	; 0x40
 80075aa:	4619      	mov	r1, r3
 80075ac:	f7ff ff72 	bl	8007494 <aiPbStrCopy>
      &resp->payload.ninfo.runtime_revision[0],
      sizeof(resp->payload.ninfo.runtime_revision));
  aiPbStrCopy(nn->tool_revision,
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	6998      	ldr	r0, [r3, #24]
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 80075ba:	2240      	movs	r2, #64	; 0x40
 80075bc:	4619      	mov	r1, r3
 80075be:	f7ff ff69 	bl	8007494 <aiPbStrCopy>
      &resp->payload.ninfo.tool_revision[0],
      sizeof(resp->payload.ninfo.tool_revision));

  resp->payload.ninfo.n_inputs = nn->n_inputs;
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80075c6:	461a      	mov	r2, r3
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
  resp->payload.ninfo.n_outputs = nn->n_outputs;
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80075d2:	461a      	mov	r2, r3
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
  resp->payload.ninfo.n_nodes = nn->n_nodes;
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  resp->payload.ninfo.n_macc = nn->n_macc;
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

  resp->payload.ninfo.signature = nn->signature;
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  resp->payload.ninfo.api_version =
      aiPbVersionToUint32(&nn->api_version);
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	3324      	adds	r3, #36	; 0x24
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7ff ff85 	bl	800750c <aiPbVersionToUint32>
 8007602:	4602      	mov	r2, r0
  resp->payload.ninfo.api_version =
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
  resp->payload.ninfo.interface_api_version =
      aiPbVersionToUint32(&nn->interface_api_version);
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	3328      	adds	r3, #40	; 0x28
 800760e:	4618      	mov	r0, r3
 8007610:	f7ff ff7c 	bl	800750c <aiPbVersionToUint32>
 8007614:	4602      	mov	r2, r0
  resp->payload.ninfo.interface_api_version =
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
  resp->payload.ninfo.runtime_version =
      aiPbVersionToUint32(&nn->runtime_version);
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	3314      	adds	r3, #20
 8007620:	4618      	mov	r0, r3
 8007622:	f7ff ff73 	bl	800750c <aiPbVersionToUint32>
 8007626:	4602      	mov	r2, r0
  resp->payload.ninfo.runtime_version =
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  resp->payload.ninfo.tool_version =
      aiPbVersionToUint32(&nn->tool_version);
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	331c      	adds	r3, #28
 8007632:	4618      	mov	r0, r3
 8007634:	f7ff ff6a 	bl	800750c <aiPbVersionToUint32>
 8007638:	4602      	mov	r2, r0
  resp->payload.ninfo.tool_version =
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
  resp->payload.ninfo.tool_api_version =
      aiPbVersionToUint32(&nn->tool_api_version);
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	3320      	adds	r3, #32
 8007644:	4618      	mov	r0, r3
 8007646:	f7ff ff61 	bl	800750c <aiPbVersionToUint32>
 800764a:	4602      	mov	r2, r0
  resp->payload.ninfo.tool_api_version =
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190

  init_aibuffer_msg(&nn->activations, &resp->payload.ninfo.activations);
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800765e:	4619      	mov	r1, r3
 8007660:	4610      	mov	r0, r2
 8007662:	f7ff fe6b 	bl	800733c <init_aibuffer_msg>
  init_aibuffer_msg(&nn->params, &resp->payload.ninfo.weights);
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8007672:	4619      	mov	r1, r3
 8007674:	4610      	mov	r0, r2
 8007676:	f7ff fe61 	bl	800733c <init_aibuffer_msg>

  resp->payload.ninfo.inputs.funcs.encode = nn_inputs_w_cb;
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	4a0c      	ldr	r2, [pc, #48]	; (80076b0 <aiPbMgrSendNNInfo+0x168>)
 800767e:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  resp->payload.ninfo.inputs.arg = (void *)nn;
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	683a      	ldr	r2, [r7, #0]
 8007686:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0

  resp->payload.ninfo.outputs.funcs.encode = nn_outputs_w_cb;
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	4a09      	ldr	r2, [pc, #36]	; (80076b4 <aiPbMgrSendNNInfo+0x16c>)
 800768e:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  resp->payload.ninfo.outputs.arg = (void *)nn;
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	683a      	ldr	r2, [r7, #0]
 8007696:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8

  aiPbMgrSendResp(req, resp, state);
 800769a:	79fb      	ldrb	r3, [r7, #7]
 800769c:	461a      	mov	r2, r3
 800769e:	68b9      	ldr	r1, [r7, #8]
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f7ff fa93 	bl	8006bcc <aiPbMgrSendResp>
}
 80076a6:	bf00      	nop
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	08007429 	.word	0x08007429
 80076b4:	0800745f 	.word	0x0800745f

080076b8 <aiPlatformVersion>:
#include <aiTestHelper.h>

#include <ai_platform_interface.h>

void aiPlatformVersion(void)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af04      	add	r7, sp, #16
  printf("\r\nAI platform (API %d.%d.%d - RUNTIME %d.%d.%d)\r\n",
 80076be:	2300      	movs	r3, #0
 80076c0:	9302      	str	r3, [sp, #8]
 80076c2:	2302      	movs	r3, #2
 80076c4:	9301      	str	r3, [sp, #4]
 80076c6:	2305      	movs	r3, #5
 80076c8:	9300      	str	r3, [sp, #0]
 80076ca:	2300      	movs	r3, #0
 80076cc:	2201      	movs	r2, #1
 80076ce:	2101      	movs	r1, #1
 80076d0:	4802      	ldr	r0, [pc, #8]	; (80076dc <aiPlatformVersion+0x24>)
 80076d2:	f007 ff37 	bl	800f544 <iprintf>
      AI_PLATFORM_API_MINOR,
      AI_PLATFORM_API_MICRO,
      AI_PLATFORM_RUNTIME_MAJOR,
      AI_PLATFORM_RUNTIME_MINOR,
      AI_PLATFORM_RUNTIME_MICRO);
}
 80076d6:	bf00      	nop
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	080105f0 	.word	0x080105f0

080076e0 <aiLogErr>:
{
  return buffer->height * buffer->width * buffer->channels;
}

void aiLogErr(const ai_error err, const char *fct)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
  if (fct)
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d009      	beq.n	8007704 <aiLogErr+0x24>
    printf("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 80076f0:	793b      	ldrb	r3, [r7, #4]
    printf("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80076f2:	461a      	mov	r2, r3
        err.type, err.code);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80076fa:	6839      	ldr	r1, [r7, #0]
 80076fc:	4808      	ldr	r0, [pc, #32]	; (8007720 <aiLogErr+0x40>)
 80076fe:	f007 ff21 	bl	800f544 <iprintf>
  else
    printf("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
}
 8007702:	e008      	b.n	8007716 <aiLogErr+0x36>
    printf("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8007704:	793b      	ldrb	r3, [r7, #4]
 8007706:	4619      	mov	r1, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800770e:	461a      	mov	r2, r3
 8007710:	4804      	ldr	r0, [pc, #16]	; (8007724 <aiLogErr+0x44>)
 8007712:	f007 ff17 	bl	800f544 <iprintf>
}
 8007716:	bf00      	nop
 8007718:	3708      	adds	r7, #8
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	08010624 	.word	0x08010624
 8007724:	08010654 	.word	0x08010654

08007728 <aiPrintLayoutBuffer>:


void aiPrintLayoutBuffer(const char *msg, int idx,
    const ai_buffer* buffer)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b08a      	sub	sp, #40	; 0x28
 800772c:	af02      	add	r7, sp, #8
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	607a      	str	r2, [r7, #4]
  uint32_t type_id = AI_BUFFER_FMT_GET_TYPE(buffer->format);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	145b      	asrs	r3, r3, #17
 800773a:	f003 030f 	and.w	r3, r3, #15
 800773e:	61fb      	str	r3, [r7, #28]
  printf("%s[%d] ",msg, idx);
 8007740:	68ba      	ldr	r2, [r7, #8]
 8007742:	68f9      	ldr	r1, [r7, #12]
 8007744:	4897      	ldr	r0, [pc, #604]	; (80079a4 <aiPrintLayoutBuffer+0x27c>)
 8007746:	f007 fefd 	bl	800f544 <iprintf>
  if (type_id == AI_BUFFER_FMT_TYPE_Q) {
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	2b02      	cmp	r3, #2
 800774e:	f040 818d 	bne.w	8007a6c <aiPrintLayoutBuffer+0x344>
    printf(" %s%d,",
        AI_BUFFER_FMT_GET_SIGN(buffer->format)?"s":"u",
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    printf(" %s%d,",
 800775a:	2b00      	cmp	r3, #0
 800775c:	d001      	beq.n	8007762 <aiPrintLayoutBuffer+0x3a>
 800775e:	4992      	ldr	r1, [pc, #584]	; (80079a8 <aiPrintLayoutBuffer+0x280>)
 8007760:	e000      	b.n	8007764 <aiPrintLayoutBuffer+0x3c>
 8007762:	4992      	ldr	r1, [pc, #584]	; (80079ac <aiPrintLayoutBuffer+0x284>)
            (int)AI_BUFFER_FMT_GET_BITS(buffer->format));
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	11db      	asrs	r3, r3, #7
    printf(" %s%d,",
 800776a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800776e:	461a      	mov	r2, r3
 8007770:	488f      	ldr	r0, [pc, #572]	; (80079b0 <aiPrintLayoutBuffer+0x288>)
 8007772:	f007 fee7 	bl	800f544 <iprintf>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	695b      	ldr	r3, [r3, #20]
 800777a:	2b00      	cmp	r3, #0
 800777c:	f000 8158 	beq.w	8007a30 <aiPrintLayoutBuffer+0x308>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	695b      	ldr	r3, [r3, #20]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 0301 	and.w	r3, r3, #1
 800778a:	2b00      	cmp	r3, #0
 800778c:	f000 8150 	beq.w	8007a30 <aiPrintLayoutBuffer+0x308>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	695b      	ldr	r3, [r3, #20]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	2b00      	cmp	r3, #0
 8007798:	f000 814a 	beq.w	8007a30 <aiPrintLayoutBuffer+0x308>
      ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, 0);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	695b      	ldr	r3, [r3, #20]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d058      	beq.n	8007856 <aiPrintLayoutBuffer+0x12e>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	695b      	ldr	r3, [r3, #20]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 0301 	and.w	r3, r3, #1
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d051      	beq.n	8007856 <aiPrintLayoutBuffer+0x12e>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	695b      	ldr	r3, [r3, #20]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d04c      	beq.n	8007856 <aiPrintLayoutBuffer+0x12e>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	695b      	ldr	r3, [r3, #20]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d045      	beq.n	8007850 <aiPrintLayoutBuffer+0x128>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	695b      	ldr	r3, [r3, #20]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 0301 	and.w	r3, r3, #1
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d03e      	beq.n	8007850 <aiPrintLayoutBuffer+0x128>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	695b      	ldr	r3, [r3, #20]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d039      	beq.n	8007850 <aiPrintLayoutBuffer+0x128>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	695b      	ldr	r3, [r3, #20]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00a      	beq.n	80077fa <aiPrintLayoutBuffer+0xd2>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	695b      	ldr	r3, [r3, #20]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 0301 	and.w	r3, r3, #1
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d003      	beq.n	80077fa <aiPrintLayoutBuffer+0xd2>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	695b      	ldr	r3, [r3, #20]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	e000      	b.n	80077fc <aiPrintLayoutBuffer+0xd4>
 80077fa:	2300      	movs	r3, #0
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d026      	beq.n	8007850 <aiPrintLayoutBuffer+0x128>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	695b      	ldr	r3, [r3, #20]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00a      	beq.n	8007820 <aiPrintLayoutBuffer+0xf8>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	695b      	ldr	r3, [r3, #20]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 0301 	and.w	r3, r3, #1
 8007814:	2b00      	cmp	r3, #0
 8007816:	d003      	beq.n	8007820 <aiPrintLayoutBuffer+0xf8>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	695b      	ldr	r3, [r3, #20]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	e000      	b.n	8007822 <aiPrintLayoutBuffer+0xfa>
 8007820:	2300      	movs	r3, #0
 8007822:	885b      	ldrh	r3, [r3, #2]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d013      	beq.n	8007850 <aiPrintLayoutBuffer+0x128>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	695b      	ldr	r3, [r3, #20]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00a      	beq.n	8007846 <aiPrintLayoutBuffer+0x11e>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	695b      	ldr	r3, [r3, #20]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 0301 	and.w	r3, r3, #1
 800783a:	2b00      	cmp	r3, #0
 800783c:	d003      	beq.n	8007846 <aiPrintLayoutBuffer+0x11e>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	695b      	ldr	r3, [r3, #20]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	e000      	b.n	8007848 <aiPrintLayoutBuffer+0x120>
 8007846:	2300      	movs	r3, #0
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	e004      	b.n	800785a <aiPrintLayoutBuffer+0x132>
 8007850:	f04f 0300 	mov.w	r3, #0
 8007854:	e001      	b.n	800785a <aiPrintLayoutBuffer+0x132>
 8007856:	f04f 0300 	mov.w	r3, #0
 800785a:	61bb      	str	r3, [r7, #24]
      int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, 0);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	695b      	ldr	r3, [r3, #20]
 8007860:	2b00      	cmp	r3, #0
 8007862:	f000 80d6 	beq.w	8007a12 <aiPrintLayoutBuffer+0x2ea>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	695b      	ldr	r3, [r3, #20]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 0301 	and.w	r3, r3, #1
 8007870:	2b00      	cmp	r3, #0
 8007872:	f000 80ce 	beq.w	8007a12 <aiPrintLayoutBuffer+0x2ea>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	695b      	ldr	r3, [r3, #20]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	2b00      	cmp	r3, #0
 800787e:	f000 80c8 	beq.w	8007a12 <aiPrintLayoutBuffer+0x2ea>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d06c      	beq.n	8007964 <aiPrintLayoutBuffer+0x23c>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	695b      	ldr	r3, [r3, #20]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 0301 	and.w	r3, r3, #1
 8007894:	2b00      	cmp	r3, #0
 8007896:	d065      	beq.n	8007964 <aiPrintLayoutBuffer+0x23c>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	695b      	ldr	r3, [r3, #20]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d060      	beq.n	8007964 <aiPrintLayoutBuffer+0x23c>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	695b      	ldr	r3, [r3, #20]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00a      	beq.n	80078c0 <aiPrintLayoutBuffer+0x198>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	695b      	ldr	r3, [r3, #20]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 0301 	and.w	r3, r3, #1
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d003      	beq.n	80078c0 <aiPrintLayoutBuffer+0x198>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	695b      	ldr	r3, [r3, #20]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	e000      	b.n	80078c2 <aiPrintLayoutBuffer+0x19a>
 80078c0:	2300      	movs	r3, #0
 80078c2:	881b      	ldrh	r3, [r3, #0]
 80078c4:	f003 0302 	and.w	r3, r3, #2
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d04b      	beq.n	8007964 <aiPrintLayoutBuffer+0x23c>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	695b      	ldr	r3, [r3, #20]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d045      	beq.n	8007960 <aiPrintLayoutBuffer+0x238>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	695b      	ldr	r3, [r3, #20]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f003 0301 	and.w	r3, r3, #1
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d03e      	beq.n	8007960 <aiPrintLayoutBuffer+0x238>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	695b      	ldr	r3, [r3, #20]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d039      	beq.n	8007960 <aiPrintLayoutBuffer+0x238>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	695b      	ldr	r3, [r3, #20]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d00a      	beq.n	800790a <aiPrintLayoutBuffer+0x1e2>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	695b      	ldr	r3, [r3, #20]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f003 0301 	and.w	r3, r3, #1
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d003      	beq.n	800790a <aiPrintLayoutBuffer+0x1e2>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	695b      	ldr	r3, [r3, #20]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	e000      	b.n	800790c <aiPrintLayoutBuffer+0x1e4>
 800790a:	2300      	movs	r3, #0
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d026      	beq.n	8007960 <aiPrintLayoutBuffer+0x238>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	695b      	ldr	r3, [r3, #20]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00a      	beq.n	8007930 <aiPrintLayoutBuffer+0x208>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	695b      	ldr	r3, [r3, #20]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f003 0301 	and.w	r3, r3, #1
 8007924:	2b00      	cmp	r3, #0
 8007926:	d003      	beq.n	8007930 <aiPrintLayoutBuffer+0x208>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	695b      	ldr	r3, [r3, #20]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	e000      	b.n	8007932 <aiPrintLayoutBuffer+0x20a>
 8007930:	2300      	movs	r3, #0
 8007932:	885b      	ldrh	r3, [r3, #2]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d013      	beq.n	8007960 <aiPrintLayoutBuffer+0x238>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	695b      	ldr	r3, [r3, #20]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00a      	beq.n	8007956 <aiPrintLayoutBuffer+0x22e>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	695b      	ldr	r3, [r3, #20]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 0301 	and.w	r3, r3, #1
 800794a:	2b00      	cmp	r3, #0
 800794c:	d003      	beq.n	8007956 <aiPrintLayoutBuffer+0x22e>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	e000      	b.n	8007958 <aiPrintLayoutBuffer+0x230>
 8007956:	2300      	movs	r3, #0
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	e057      	b.n	8007a10 <aiPrintLayoutBuffer+0x2e8>
 8007960:	2300      	movs	r3, #0
 8007962:	e055      	b.n	8007a10 <aiPrintLayoutBuffer+0x2e8>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	695b      	ldr	r3, [r3, #20]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d04f      	beq.n	8007a0c <aiPrintLayoutBuffer+0x2e4>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	695b      	ldr	r3, [r3, #20]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f003 0301 	and.w	r3, r3, #1
 8007976:	2b00      	cmp	r3, #0
 8007978:	d048      	beq.n	8007a0c <aiPrintLayoutBuffer+0x2e4>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	695b      	ldr	r3, [r3, #20]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d043      	beq.n	8007a0c <aiPrintLayoutBuffer+0x2e4>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	695b      	ldr	r3, [r3, #20]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d013      	beq.n	80079b4 <aiPrintLayoutBuffer+0x28c>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	695b      	ldr	r3, [r3, #20]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f003 0301 	and.w	r3, r3, #1
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00c      	beq.n	80079b4 <aiPrintLayoutBuffer+0x28c>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	695b      	ldr	r3, [r3, #20]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	e009      	b.n	80079b6 <aiPrintLayoutBuffer+0x28e>
 80079a2:	bf00      	nop
 80079a4:	0801067c 	.word	0x0801067c
 80079a8:	08010684 	.word	0x08010684
 80079ac:	08010688 	.word	0x08010688
 80079b0:	0801068c 	.word	0x0801068c
 80079b4:	2300      	movs	r3, #0
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d027      	beq.n	8007a0c <aiPrintLayoutBuffer+0x2e4>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	695b      	ldr	r3, [r3, #20]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d00a      	beq.n	80079da <aiPrintLayoutBuffer+0x2b2>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	695b      	ldr	r3, [r3, #20]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f003 0301 	and.w	r3, r3, #1
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d003      	beq.n	80079da <aiPrintLayoutBuffer+0x2b2>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	695b      	ldr	r3, [r3, #20]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	e000      	b.n	80079dc <aiPrintLayoutBuffer+0x2b4>
 80079da:	2300      	movs	r3, #0
 80079dc:	885b      	ldrh	r3, [r3, #2]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d014      	beq.n	8007a0c <aiPrintLayoutBuffer+0x2e4>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	695b      	ldr	r3, [r3, #20]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00a      	beq.n	8007a00 <aiPrintLayoutBuffer+0x2d8>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	695b      	ldr	r3, [r3, #20]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f003 0301 	and.w	r3, r3, #1
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d003      	beq.n	8007a00 <aiPrintLayoutBuffer+0x2d8>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	695b      	ldr	r3, [r3, #20]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	e000      	b.n	8007a02 <aiPrintLayoutBuffer+0x2da>
 8007a00:	2300      	movs	r3, #0
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	f993 3000 	ldrsb.w	r3, [r3]
 8007a0a:	e001      	b.n	8007a10 <aiPrintLayoutBuffer+0x2e8>
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	e001      	b.n	8007a14 <aiPrintLayoutBuffer+0x2ec>
 8007a10:	e000      	b.n	8007a14 <aiPrintLayoutBuffer+0x2ec>
 8007a12:	2300      	movs	r3, #0
 8007a14:	617b      	str	r3, [r7, #20]
      printf(" scale=%f, zero=%d,", scale, zero_point);
 8007a16:	69b8      	ldr	r0, [r7, #24]
 8007a18:	f7f8 fdae 	bl	8000578 <__aeabi_f2d>
 8007a1c:	460a      	mov	r2, r1
 8007a1e:	4601      	mov	r1, r0
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	9300      	str	r3, [sp, #0]
 8007a24:	4613      	mov	r3, r2
 8007a26:	460a      	mov	r2, r1
 8007a28:	4833      	ldr	r0, [pc, #204]	; (8007af8 <aiPrintLayoutBuffer+0x3d0>)
 8007a2a:	f007 fd8b 	bl	800f544 <iprintf>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 8007a2e:	e02d      	b.n	8007a8c <aiPrintLayoutBuffer+0x364>
    } else {
      printf("Q%d.%d,",
          (int)AI_BUFFER_FMT_GET_BITS(buffer->format)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	11db      	asrs	r3, r3, #7
 8007a36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
          - ((int)AI_BUFFER_FMT_GET_FBITS(buffer->format) +
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a44:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
              (int)AI_BUFFER_FMT_GET_SIGN(buffer->format)),
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	15db      	asrs	r3, r3, #23
 8007a4e:	f003 0301 	and.w	r3, r3, #1
          - ((int)AI_BUFFER_FMT_GET_FBITS(buffer->format) +
 8007a52:	440b      	add	r3, r1
      printf("Q%d.%d,",
 8007a54:	1ad1      	subs	r1, r2, r3
              AI_BUFFER_FMT_GET_FBITS(buffer->format));
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      printf("Q%d.%d,",
 8007a60:	3b40      	subs	r3, #64	; 0x40
 8007a62:	461a      	mov	r2, r3
 8007a64:	4825      	ldr	r0, [pc, #148]	; (8007afc <aiPrintLayoutBuffer+0x3d4>)
 8007a66:	f007 fd6d 	bl	800f544 <iprintf>
 8007a6a:	e00f      	b.n	8007a8c <aiPrintLayoutBuffer+0x364>
    }
  }
  else if (type_id == AI_BUFFER_FMT_TYPE_FLOAT)
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d109      	bne.n	8007a86 <aiPrintLayoutBuffer+0x35e>
    printf(" float%d,",
        (int)AI_BUFFER_FMT_GET_BITS(buffer->format));
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	11db      	asrs	r3, r3, #7
    printf(" float%d,",
 8007a78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	4820      	ldr	r0, [pc, #128]	; (8007b00 <aiPrintLayoutBuffer+0x3d8>)
 8007a80:	f007 fd60 	bl	800f544 <iprintf>
 8007a84:	e002      	b.n	8007a8c <aiPrintLayoutBuffer+0x364>
  else
    printf("NONE");
 8007a86:	481f      	ldr	r0, [pc, #124]	; (8007b04 <aiPrintLayoutBuffer+0x3dc>)
 8007a88:	f007 fd5c 	bl	800f544 <iprintf>
  printf(" %d bytes, shape=(%d,%d,%d)",
      (int)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer), buffer->format),
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	891b      	ldrh	r3, [r3, #8]
 8007a90:	461a      	mov	r2, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	88db      	ldrh	r3, [r3, #6]
 8007a96:	fb03 f302 	mul.w	r3, r3, r2
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	fb03 f302 	mul.w	r3, r3, r2
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	6812      	ldr	r2, [r2, #0]
 8007aa8:	11d2      	asrs	r2, r2, #7
 8007aaa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007aae:	fb02 f303 	mul.w	r3, r2, r3
 8007ab2:	3304      	adds	r3, #4
 8007ab4:	08db      	lsrs	r3, r3, #3
  printf(" %d bytes, shape=(%d,%d,%d)",
 8007ab6:	4619      	mov	r1, r3
      buffer->height, buffer->width, (int)buffer->channels);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	88db      	ldrh	r3, [r3, #6]
  printf(" %d bytes, shape=(%d,%d,%d)",
 8007abc:	461a      	mov	r2, r3
      buffer->height, buffer->width, (int)buffer->channels);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	891b      	ldrh	r3, [r3, #8]
  printf(" %d bytes, shape=(%d,%d,%d)",
 8007ac2:	4618      	mov	r0, r3
      buffer->height, buffer->width, (int)buffer->channels);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	68db      	ldr	r3, [r3, #12]
  printf(" %d bytes, shape=(%d,%d,%d)",
 8007ac8:	9300      	str	r3, [sp, #0]
 8007aca:	4603      	mov	r3, r0
 8007acc:	480e      	ldr	r0, [pc, #56]	; (8007b08 <aiPrintLayoutBuffer+0x3e0>)
 8007ace:	f007 fd39 	bl	800f544 <iprintf>
  if (buffer->data)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d006      	beq.n	8007ae8 <aiPrintLayoutBuffer+0x3c0>
    printf(" (@0x%08x)\r\n", (int)buffer->data);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	4619      	mov	r1, r3
 8007ae0:	480a      	ldr	r0, [pc, #40]	; (8007b0c <aiPrintLayoutBuffer+0x3e4>)
 8007ae2:	f007 fd2f 	bl	800f544 <iprintf>
  else
    printf(" (USER domain)\r\n");
}
 8007ae6:	e002      	b.n	8007aee <aiPrintLayoutBuffer+0x3c6>
    printf(" (USER domain)\r\n");
 8007ae8:	4809      	ldr	r0, [pc, #36]	; (8007b10 <aiPrintLayoutBuffer+0x3e8>)
 8007aea:	f007 fd9f 	bl	800f62c <puts>
}
 8007aee:	bf00      	nop
 8007af0:	3720      	adds	r7, #32
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	08010694 	.word	0x08010694
 8007afc:	080106a8 	.word	0x080106a8
 8007b00:	080106b0 	.word	0x080106b0
 8007b04:	080106bc 	.word	0x080106bc
 8007b08:	080106c4 	.word	0x080106c4
 8007b0c:	080106e0 	.word	0x080106e0
 8007b10:	080106f0 	.word	0x080106f0

08007b14 <aiPrintNetworkInfo>:

void aiPrintNetworkInfo(const ai_network_report* report)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  int i;
  printf("Network informations...\r\n");
 8007b1c:	485b      	ldr	r0, [pc, #364]	; (8007c8c <aiPrintNetworkInfo+0x178>)
 8007b1e:	f007 fd85 	bl	800f62c <puts>
  printf(" model name         : %s\r\n", report->model_name);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4619      	mov	r1, r3
 8007b28:	4859      	ldr	r0, [pc, #356]	; (8007c90 <aiPrintNetworkInfo+0x17c>)
 8007b2a:	f007 fd0b 	bl	800f544 <iprintf>
  printf(" model signature    : %s\r\n", report->model_signature);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	4619      	mov	r1, r3
 8007b34:	4857      	ldr	r0, [pc, #348]	; (8007c94 <aiPrintNetworkInfo+0x180>)
 8007b36:	f007 fd05 	bl	800f544 <iprintf>
  printf(" model datetime     : %s\r\n", report->model_datetime);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	4619      	mov	r1, r3
 8007b40:	4855      	ldr	r0, [pc, #340]	; (8007c98 <aiPrintNetworkInfo+0x184>)
 8007b42:	f007 fcff 	bl	800f544 <iprintf>
  printf(" compile datetime   : %s\r\n", report->compile_datetime);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	4853      	ldr	r0, [pc, #332]	; (8007c9c <aiPrintNetworkInfo+0x188>)
 8007b4e:	f007 fcf9 	bl	800f544 <iprintf>
  printf(" runtime version    : %d.%d.%d\r\n",
      report->runtime_version.major,
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	7d1b      	ldrb	r3, [r3, #20]
  printf(" runtime version    : %d.%d.%d\r\n",
 8007b56:	4619      	mov	r1, r3
      report->runtime_version.minor,
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	7d5b      	ldrb	r3, [r3, #21]
  printf(" runtime version    : %d.%d.%d\r\n",
 8007b5c:	461a      	mov	r2, r3
      report->runtime_version.micro);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	7d9b      	ldrb	r3, [r3, #22]
  printf(" runtime version    : %d.%d.%d\r\n",
 8007b62:	484f      	ldr	r0, [pc, #316]	; (8007ca0 <aiPrintNetworkInfo+0x18c>)
 8007b64:	f007 fcee 	bl	800f544 <iprintf>
  if (report->tool_revision[0])
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	699b      	ldr	r3, [r3, #24]
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00c      	beq.n	8007b8c <aiPrintNetworkInfo+0x78>
    printf(" Tool revision      : %s\r\n", (report->tool_revision[0])?report->tool_revision:"");
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	699b      	ldr	r3, [r3, #24]
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d002      	beq.n	8007b82 <aiPrintNetworkInfo+0x6e>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	699b      	ldr	r3, [r3, #24]
 8007b80:	e000      	b.n	8007b84 <aiPrintNetworkInfo+0x70>
 8007b82:	4b48      	ldr	r3, [pc, #288]	; (8007ca4 <aiPrintNetworkInfo+0x190>)
 8007b84:	4619      	mov	r1, r3
 8007b86:	4848      	ldr	r0, [pc, #288]	; (8007ca8 <aiPrintNetworkInfo+0x194>)
 8007b88:	f007 fcdc 	bl	800f544 <iprintf>
  printf(" tools version      : %d.%d.%d\r\n",
      report->tool_version.major,
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	7f1b      	ldrb	r3, [r3, #28]
  printf(" tools version      : %d.%d.%d\r\n",
 8007b90:	4619      	mov	r1, r3
      report->tool_version.minor,
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	7f5b      	ldrb	r3, [r3, #29]
  printf(" tools version      : %d.%d.%d\r\n",
 8007b96:	461a      	mov	r2, r3
      report->tool_version.micro);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	7f9b      	ldrb	r3, [r3, #30]
  printf(" tools version      : %d.%d.%d\r\n",
 8007b9c:	4843      	ldr	r0, [pc, #268]	; (8007cac <aiPrintNetworkInfo+0x198>)
 8007b9e:	f007 fcd1 	bl	800f544 <iprintf>
  printf(" complexity         : %d MACC\r\n", (int)report->n_macc);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	4841      	ldr	r0, [pc, #260]	; (8007cb0 <aiPrintNetworkInfo+0x19c>)
 8007baa:	f007 fccb 	bl	800f544 <iprintf>
  printf(" c-nodes            : %d\r\n", (int)report->n_nodes);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	483f      	ldr	r0, [pc, #252]	; (8007cb4 <aiPrintNetworkInfo+0x1a0>)
 8007bb6:	f007 fcc5 	bl	800f544 <iprintf>
  printf(" activations        : %d bytes (0x%08x)\r\n",
      (int)AI_BUFFER_SIZE(&report->activations), (int)report->activations.data);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8007bc8:	fb03 f302 	mul.w	r3, r3, r2
 8007bcc:	461a      	mov	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bd2:	fb03 f302 	mul.w	r3, r3, r2
  printf(" activations        : %d bytes (0x%08x)\r\n",
 8007bd6:	4619      	mov	r1, r3
      (int)AI_BUFFER_SIZE(&report->activations), (int)report->activations.data);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  printf(" activations        : %d bytes (0x%08x)\r\n",
 8007bdc:	461a      	mov	r2, r3
 8007bde:	4836      	ldr	r0, [pc, #216]	; (8007cb8 <aiPrintNetworkInfo+0x1a4>)
 8007be0:	f007 fcb0 	bl	800f544 <iprintf>
  printf(" weights            : %d bytes (0x%08x)\r\n",
      (int)AI_BUFFER_SIZE(&report->params), (int)report->params.data);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007bea:	461a      	mov	r2, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007bf2:	fb03 f302 	mul.w	r3, r3, r2
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bfc:	fb03 f302 	mul.w	r3, r3, r2
  printf(" weights            : %d bytes (0x%08x)\r\n",
 8007c00:	4619      	mov	r1, r3
      (int)AI_BUFFER_SIZE(&report->params), (int)report->params.data);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  printf(" weights            : %d bytes (0x%08x)\r\n",
 8007c06:	461a      	mov	r2, r3
 8007c08:	482c      	ldr	r0, [pc, #176]	; (8007cbc <aiPrintNetworkInfo+0x1a8>)
 8007c0a:	f007 fc9b 	bl	800f544 <iprintf>
  printf(" inputs/outputs     : %u/%u\r\n", report->n_inputs,
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8007c12:	4619      	mov	r1, r3
      report->n_outputs);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
  printf(" inputs/outputs     : %u/%u\r\n", report->n_inputs,
 8007c18:	461a      	mov	r2, r3
 8007c1a:	4829      	ldr	r0, [pc, #164]	; (8007cc0 <aiPrintNetworkInfo+0x1ac>)
 8007c1c:	f007 fc92 	bl	800f544 <iprintf>
  for (i=0; i<report->n_inputs; i++)
 8007c20:	2300      	movs	r3, #0
 8007c22:	60fb      	str	r3, [r7, #12]
 8007c24:	e00f      	b.n	8007c46 <aiPrintNetworkInfo+0x132>
    aiPrintLayoutBuffer("  I", i, &report->inputs[i]);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007c2a:	68fa      	ldr	r2, [r7, #12]
 8007c2c:	4613      	mov	r3, r2
 8007c2e:	005b      	lsls	r3, r3, #1
 8007c30:	4413      	add	r3, r2
 8007c32:	00db      	lsls	r3, r3, #3
 8007c34:	440b      	add	r3, r1
 8007c36:	461a      	mov	r2, r3
 8007c38:	68f9      	ldr	r1, [r7, #12]
 8007c3a:	4822      	ldr	r0, [pc, #136]	; (8007cc4 <aiPrintNetworkInfo+0x1b0>)
 8007c3c:	f7ff fd74 	bl	8007728 <aiPrintLayoutBuffer>
  for (i=0; i<report->n_inputs; i++)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	3301      	adds	r3, #1
 8007c44:	60fb      	str	r3, [r7, #12]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	dbe9      	blt.n	8007c26 <aiPrintNetworkInfo+0x112>
  for (i=0; i<report->n_outputs; i++)
 8007c52:	2300      	movs	r3, #0
 8007c54:	60fb      	str	r3, [r7, #12]
 8007c56:	e00f      	b.n	8007c78 <aiPrintNetworkInfo+0x164>
    aiPrintLayoutBuffer("  O", i, &report->outputs[i]);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	4613      	mov	r3, r2
 8007c60:	005b      	lsls	r3, r3, #1
 8007c62:	4413      	add	r3, r2
 8007c64:	00db      	lsls	r3, r3, #3
 8007c66:	440b      	add	r3, r1
 8007c68:	461a      	mov	r2, r3
 8007c6a:	68f9      	ldr	r1, [r7, #12]
 8007c6c:	4816      	ldr	r0, [pc, #88]	; (8007cc8 <aiPrintNetworkInfo+0x1b4>)
 8007c6e:	f7ff fd5b 	bl	8007728 <aiPrintLayoutBuffer>
  for (i=0; i<report->n_outputs; i++)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	3301      	adds	r3, #1
 8007c76:	60fb      	str	r3, [r7, #12]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	4293      	cmp	r3, r2
 8007c82:	dbe9      	blt.n	8007c58 <aiPrintNetworkInfo+0x144>
}
 8007c84:	bf00      	nop
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	08010700 	.word	0x08010700
 8007c90:	0801071c 	.word	0x0801071c
 8007c94:	08010738 	.word	0x08010738
 8007c98:	08010754 	.word	0x08010754
 8007c9c:	08010770 	.word	0x08010770
 8007ca0:	0801078c 	.word	0x0801078c
 8007ca4:	080107b0 	.word	0x080107b0
 8007ca8:	080107b4 	.word	0x080107b4
 8007cac:	080107d0 	.word	0x080107d0
 8007cb0:	080107f4 	.word	0x080107f4
 8007cb4:	08010814 	.word	0x08010814
 8007cb8:	08010830 	.word	0x08010830
 8007cbc:	0801085c 	.word	0x0801085c
 8007cc0:	08010888 	.word	0x08010888
 8007cc4:	080108a8 	.word	0x080108a8
 8007cc8:	080108ac 	.word	0x080108ac

08007ccc <dwtReset>:
  int us;
};

void dwtIpInit(void);

__STATIC_INLINE void dwtReset(void) {
 8007ccc:	b480      	push	{r7}
 8007cce:	af00      	add	r7, sp, #0
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 8007cd0:	4b03      	ldr	r3, [pc, #12]	; (8007ce0 <dwtReset+0x14>)
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	605a      	str	r2, [r3, #4]
}
 8007cd6:	bf00      	nop
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr
 8007ce0:	e0001000 	.word	0xe0001000

08007ce4 <dwtGetCycles>:

__STATIC_INLINE  uint32_t dwtGetCycles(void) {
 8007ce4:	b480      	push	{r7}
 8007ce6:	af00      	add	r7, sp, #0
  return DWT->CYCCNT;
 8007ce8:	4b03      	ldr	r3, [pc, #12]	; (8007cf8 <dwtGetCycles+0x14>)
 8007cea:	685b      	ldr	r3, [r3, #4]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	e0001000 	.word	0xe0001000

08007cfc <ioRawWriteBuffer>:

  return (status == HAL_OK ? 1 : 0);
}

bool ioRawWriteBuffer(uint8_t *buff, int count)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;

  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	b29a      	uxth	r2, r3
 8007d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d0e:	6879      	ldr	r1, [r7, #4]
 8007d10:	4807      	ldr	r0, [pc, #28]	; (8007d30 <ioRawWriteBuffer+0x34>)
 8007d12:	f7fc f821 	bl	8003d58 <HAL_UART_Transmit>
 8007d16:	4603      	mov	r3, r0
 8007d18:	73fb      	strb	r3, [r7, #15]

  return (status == HAL_OK);
 8007d1a:	7bfb      	ldrb	r3, [r7, #15]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	bf0c      	ite	eq
 8007d20:	2301      	moveq	r3, #1
 8007d22:	2300      	movne	r3, #0
 8007d24:	b2db      	uxtb	r3, r3
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	2004eda0 	.word	0x2004eda0

08007d34 <ioRawReadBuffer>:

bool ioRawReadBuffer(uint8_t *buff, int count)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;

  status = HAL_UART_Receive(&UartHandle, buff, count, HAL_MAX_DELAY);
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	f04f 33ff 	mov.w	r3, #4294967295
 8007d46:	6879      	ldr	r1, [r7, #4]
 8007d48:	4807      	ldr	r0, [pc, #28]	; (8007d68 <ioRawReadBuffer+0x34>)
 8007d4a:	f7fc f89c 	bl	8003e86 <HAL_UART_Receive>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	73fb      	strb	r3, [r7, #15]

  return (status == HAL_OK);
 8007d52:	7bfb      	ldrb	r3, [r7, #15]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	bf0c      	ite	eq
 8007d58:	2301      	moveq	r3, #1
 8007d5a:	2300      	movne	r3, #0
 8007d5c:	b2db      	uxtb	r3, r3
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	2004eda0 	.word	0x2004eda0

08007d6c <ioRawDisableLLWrite>:

void ioRawDisableLLWrite(void)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	af00      	add	r7, sp, #0
  _ioWriteAllowed = false;
 8007d70:	4b03      	ldr	r3, [pc, #12]	; (8007d80 <ioRawDisableLLWrite+0x14>)
 8007d72:	2200      	movs	r2, #0
 8007d74:	701a      	strb	r2, [r3, #0]
}
 8007d76:	bf00      	nop
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr
 8007d80:	20000152 	.word	0x20000152

08007d84 <_write>:
#if defined(__GNUC__) && !defined(__ARMCC_VERSION)

int _write(int fd, const void *buff, int count);

int _write(int fd, const void *buff, int count)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b086      	sub	sp, #24
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;

  if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	da0d      	bge.n	8007db2 <_write+0x2e>
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d00a      	beq.n	8007db2 <_write+0x2e>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2b02      	cmp	r3, #2
 8007da0:	d007      	beq.n	8007db2 <_write+0x2e>
    errno = EBADF;
 8007da2:	f007 fad9 	bl	800f358 <__errno>
 8007da6:	4602      	mov	r2, r0
 8007da8:	2309      	movs	r3, #9
 8007daa:	6013      	str	r3, [r2, #0]
    return -1;
 8007dac:	f04f 33ff 	mov.w	r3, #4294967295
 8007db0:	e016      	b.n	8007de0 <_write+0x5c>
  }

  if (_ioWriteAllowed)
 8007db2:	4b0d      	ldr	r3, [pc, #52]	; (8007de8 <_write+0x64>)
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00a      	beq.n	8007dd0 <_write+0x4c>
    status = HAL_UART_Transmit(&UartHandle, (uint8_t *)buff, count,
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	b29a      	uxth	r2, r3
 8007dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8007dc2:	68b9      	ldr	r1, [r7, #8]
 8007dc4:	4809      	ldr	r0, [pc, #36]	; (8007dec <_write+0x68>)
 8007dc6:	f7fb ffc7 	bl	8003d58 <HAL_UART_Transmit>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	75fb      	strb	r3, [r7, #23]
 8007dce:	e001      	b.n	8007dd4 <_write+0x50>
        HAL_MAX_DELAY);
  else
    status = HAL_OK;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	75fb      	strb	r3, [r7, #23]

  return (status == HAL_OK ? count : 0);
 8007dd4:	7dfb      	ldrb	r3, [r7, #23]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d101      	bne.n	8007dde <_write+0x5a>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	e000      	b.n	8007de0 <_write+0x5c>
 8007dde:	2300      	movs	r3, #0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3718      	adds	r7, #24
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	20000152 	.word	0x20000152
 8007dec:	2004eda0 	.word	0x2004eda0

08007df0 <crcIpInit>:
 */

struct cyclesCount cyclesCount;

__STATIC_INLINE void crcIpInit(void)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
  /* By default the CRC IP clock is enabled */
  __HAL_RCC_CRC_CLK_ENABLE();
#elif defined(STM32MP1)
  __HAL_RCC_CRC2_CLK_ENABLE();
#else
  if (!__HAL_RCC_CRC_IS_CLK_ENABLED())
 8007df6:	4b0c      	ldr	r3, [pc, #48]	; (8007e28 <crcIpInit+0x38>)
 8007df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d102      	bne.n	8007e08 <crcIpInit+0x18>
    printf("W: CRC IP clock is NOT enabled\r\n");
 8007e02:	480a      	ldr	r0, [pc, #40]	; (8007e2c <crcIpInit+0x3c>)
 8007e04:	f007 fc12 	bl	800f62c <puts>

  /* By default the CRC IP clock is enabled */
  __HAL_RCC_CRC_CLK_ENABLE();
 8007e08:	4b07      	ldr	r3, [pc, #28]	; (8007e28 <crcIpInit+0x38>)
 8007e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e0c:	4a06      	ldr	r2, [pc, #24]	; (8007e28 <crcIpInit+0x38>)
 8007e0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007e12:	6493      	str	r3, [r2, #72]	; 0x48
 8007e14:	4b04      	ldr	r3, [pc, #16]	; (8007e28 <crcIpInit+0x38>)
 8007e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e1c:	607b      	str	r3, [r7, #4]
 8007e1e:	687b      	ldr	r3, [r7, #4]
#endif
}
 8007e20:	bf00      	nop
 8007e22:	3708      	adds	r7, #8
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	40021000 	.word	0x40021000
 8007e2c:	08010918 	.word	0x08010918

08007e30 <dwtIpInit>:

void dwtIpInit(void)
{
 8007e30:	b480      	push	{r7}
 8007e32:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8007e34:	4b0a      	ldr	r3, [pc, #40]	; (8007e60 <dwtIpInit+0x30>)
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	4a09      	ldr	r2, [pc, #36]	; (8007e60 <dwtIpInit+0x30>)
 8007e3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e3e:	60d3      	str	r3, [r2, #12]

#ifdef STM32F7
  DWT->LAR = 0xC5ACCE55;
#endif

  DWT->CYCCNT = 0;
 8007e40:	4b08      	ldr	r3, [pc, #32]	; (8007e64 <dwtIpInit+0x34>)
 8007e42:	2200      	movs	r2, #0
 8007e44:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk | DWT_CTRL_CPIEVTENA_Msk;
 8007e46:	4b07      	ldr	r3, [pc, #28]	; (8007e64 <dwtIpInit+0x34>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a06      	ldr	r2, [pc, #24]	; (8007e64 <dwtIpInit+0x34>)
 8007e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e50:	f043 0301 	orr.w	r3, r3, #1
 8007e54:	6013      	str	r3, [r2, #0]

}
 8007e56:	bf00      	nop
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr
 8007e60:	e000edf0 	.word	0xe000edf0
 8007e64:	e0001000 	.word	0xe0001000

08007e68 <systemCoreClock>:

uint32_t systemCoreClock(void)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	af00      	add	r7, sp, #0
#if defined(STM32MP1)
  return HAL_RCC_GetSystemCoreClockFreq();
#elif !defined(STM32H7)
  return HAL_RCC_GetHCLKFreq();
 8007e6c:	f7fb f912 	bl	8003094 <HAL_RCC_GetHCLKFreq>
 8007e70:	4603      	mov	r3, r0
#else
  return HAL_RCC_GetSysClockFreq();
#endif
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <dwtCyclesToTime>:

int dwtCyclesToTime(uint64_t clks, struct dwtTime *t)
{
 8007e76:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e7a:	b08d      	sub	sp, #52	; 0x34
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8007e82:	607a      	str	r2, [r7, #4]
  if (!t)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d102      	bne.n	8007e90 <dwtCyclesToTime+0x1a>
    return -1;
 8007e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e8e:	e120      	b.n	80080d2 <dwtCyclesToTime+0x25c>
  uint32_t fcpu = systemCoreClock();
 8007e90:	f7ff ffea 	bl	8007e68 <systemCoreClock>
 8007e94:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint64_t s  = clks / fcpu;
 8007e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e98:	f04f 0400 	mov.w	r4, #0
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	4623      	mov	r3, r4
 8007ea0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007ea4:	f7f8 fd1e 	bl	80008e4 <__aeabi_uldivmod>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	460c      	mov	r4, r1
 8007eac:	e9c7 3408 	strd	r3, r4, [r7, #32]
  uint64_t ms = (clks * 1000) / fcpu;
 8007eb0:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8007eb4:	462b      	mov	r3, r5
 8007eb6:	4634      	mov	r4, r6
 8007eb8:	f04f 0100 	mov.w	r1, #0
 8007ebc:	f04f 0200 	mov.w	r2, #0
 8007ec0:	0162      	lsls	r2, r4, #5
 8007ec2:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8007ec6:	0159      	lsls	r1, r3, #5
 8007ec8:	460b      	mov	r3, r1
 8007eca:	4614      	mov	r4, r2
 8007ecc:	1b5b      	subs	r3, r3, r5
 8007ece:	eb64 0406 	sbc.w	r4, r4, r6
 8007ed2:	f04f 0100 	mov.w	r1, #0
 8007ed6:	f04f 0200 	mov.w	r2, #0
 8007eda:	00a2      	lsls	r2, r4, #2
 8007edc:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8007ee0:	0099      	lsls	r1, r3, #2
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	4614      	mov	r4, r2
 8007ee6:	195b      	adds	r3, r3, r5
 8007ee8:	eb44 0406 	adc.w	r4, r4, r6
 8007eec:	f04f 0100 	mov.w	r1, #0
 8007ef0:	f04f 0200 	mov.w	r2, #0
 8007ef4:	00e2      	lsls	r2, r4, #3
 8007ef6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007efa:	00d9      	lsls	r1, r3, #3
 8007efc:	460b      	mov	r3, r1
 8007efe:	4614      	mov	r4, r2
 8007f00:	4618      	mov	r0, r3
 8007f02:	4621      	mov	r1, r4
 8007f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f06:	f04f 0400 	mov.w	r4, #0
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	4623      	mov	r3, r4
 8007f0e:	f7f8 fce9 	bl	80008e4 <__aeabi_uldivmod>
 8007f12:	4603      	mov	r3, r0
 8007f14:	460c      	mov	r4, r1
 8007f16:	e9c7 3406 	strd	r3, r4, [r7, #24]
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8007f1a:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8007f1e:	462b      	mov	r3, r5
 8007f20:	4634      	mov	r4, r6
 8007f22:	f04f 0100 	mov.w	r1, #0
 8007f26:	f04f 0200 	mov.w	r2, #0
 8007f2a:	0162      	lsls	r2, r4, #5
 8007f2c:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8007f30:	0159      	lsls	r1, r3, #5
 8007f32:	460b      	mov	r3, r1
 8007f34:	4614      	mov	r4, r2
 8007f36:	1b5b      	subs	r3, r3, r5
 8007f38:	eb64 0406 	sbc.w	r4, r4, r6
 8007f3c:	f04f 0100 	mov.w	r1, #0
 8007f40:	f04f 0200 	mov.w	r2, #0
 8007f44:	0262      	lsls	r2, r4, #9
 8007f46:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007f4a:	0259      	lsls	r1, r3, #9
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	4614      	mov	r4, r2
 8007f50:	195b      	adds	r3, r3, r5
 8007f52:	eb44 0406 	adc.w	r4, r4, r6
 8007f56:	f04f 0100 	mov.w	r1, #0
 8007f5a:	f04f 0200 	mov.w	r2, #0
 8007f5e:	01a2      	lsls	r2, r4, #6
 8007f60:	ea42 6293 	orr.w	r2, r2, r3, lsr #26
 8007f64:	0199      	lsls	r1, r3, #6
 8007f66:	1ac9      	subs	r1, r1, r3
 8007f68:	eb62 0204 	sbc.w	r2, r2, r4
 8007f6c:	194b      	adds	r3, r1, r5
 8007f6e:	eb42 0406 	adc.w	r4, r2, r6
 8007f72:	4618      	mov	r0, r3
 8007f74:	4621      	mov	r1, r4
 8007f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f78:	f04f 0400 	mov.w	r4, #0
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	4623      	mov	r3, r4
 8007f80:	f7f8 fcb0 	bl	80008e4 <__aeabi_uldivmod>
 8007f84:	4603      	mov	r3, r0
 8007f86:	460c      	mov	r4, r1
 8007f88:	e9c7 3404 	strd	r3, r4, [r7, #16]
  ms -= (s * 1000);
 8007f8c:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 8007f90:	462b      	mov	r3, r5
 8007f92:	4634      	mov	r4, r6
 8007f94:	f04f 0100 	mov.w	r1, #0
 8007f98:	f04f 0200 	mov.w	r2, #0
 8007f9c:	0162      	lsls	r2, r4, #5
 8007f9e:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8007fa2:	0159      	lsls	r1, r3, #5
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	4614      	mov	r4, r2
 8007fa8:	1b5b      	subs	r3, r3, r5
 8007faa:	eb64 0406 	sbc.w	r4, r4, r6
 8007fae:	f04f 0100 	mov.w	r1, #0
 8007fb2:	f04f 0200 	mov.w	r2, #0
 8007fb6:	00a2      	lsls	r2, r4, #2
 8007fb8:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8007fbc:	0099      	lsls	r1, r3, #2
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	4614      	mov	r4, r2
 8007fc2:	195b      	adds	r3, r3, r5
 8007fc4:	eb44 0406 	adc.w	r4, r4, r6
 8007fc8:	f04f 0100 	mov.w	r1, #0
 8007fcc:	f04f 0200 	mov.w	r2, #0
 8007fd0:	00e2      	lsls	r2, r4, #3
 8007fd2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007fd6:	00d9      	lsls	r1, r3, #3
 8007fd8:	460b      	mov	r3, r1
 8007fda:	4614      	mov	r4, r2
 8007fdc:	4619      	mov	r1, r3
 8007fde:	4622      	mov	r2, r4
 8007fe0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8007fe4:	1a5b      	subs	r3, r3, r1
 8007fe6:	eb64 0402 	sbc.w	r4, r4, r2
 8007fea:	461d      	mov	r5, r3
 8007fec:	4626      	mov	r6, r4
 8007fee:	e9c7 5606 	strd	r5, r6, [r7, #24]
  us -= (ms * 1000 + s * 1000000);
 8007ff2:	e9d7 5606 	ldrd	r5, r6, [r7, #24]
 8007ff6:	462b      	mov	r3, r5
 8007ff8:	4634      	mov	r4, r6
 8007ffa:	f04f 0100 	mov.w	r1, #0
 8007ffe:	f04f 0200 	mov.w	r2, #0
 8008002:	0162      	lsls	r2, r4, #5
 8008004:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8008008:	0159      	lsls	r1, r3, #5
 800800a:	460b      	mov	r3, r1
 800800c:	4614      	mov	r4, r2
 800800e:	1b5b      	subs	r3, r3, r5
 8008010:	eb64 0406 	sbc.w	r4, r4, r6
 8008014:	f04f 0100 	mov.w	r1, #0
 8008018:	f04f 0200 	mov.w	r2, #0
 800801c:	00a2      	lsls	r2, r4, #2
 800801e:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8008022:	0099      	lsls	r1, r3, #2
 8008024:	460b      	mov	r3, r1
 8008026:	4614      	mov	r4, r2
 8008028:	195b      	adds	r3, r3, r5
 800802a:	eb44 0406 	adc.w	r4, r4, r6
 800802e:	f04f 0100 	mov.w	r1, #0
 8008032:	f04f 0200 	mov.w	r2, #0
 8008036:	00e2      	lsls	r2, r4, #3
 8008038:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800803c:	00d9      	lsls	r1, r3, #3
 800803e:	460b      	mov	r3, r1
 8008040:	4614      	mov	r4, r2
 8008042:	4698      	mov	r8, r3
 8008044:	46a1      	mov	r9, r4
 8008046:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 800804a:	462b      	mov	r3, r5
 800804c:	4634      	mov	r4, r6
 800804e:	f04f 0100 	mov.w	r1, #0
 8008052:	f04f 0200 	mov.w	r2, #0
 8008056:	0162      	lsls	r2, r4, #5
 8008058:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 800805c:	0159      	lsls	r1, r3, #5
 800805e:	460b      	mov	r3, r1
 8008060:	4614      	mov	r4, r2
 8008062:	1b5b      	subs	r3, r3, r5
 8008064:	eb64 0406 	sbc.w	r4, r4, r6
 8008068:	f04f 0100 	mov.w	r1, #0
 800806c:	f04f 0200 	mov.w	r2, #0
 8008070:	0262      	lsls	r2, r4, #9
 8008072:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8008076:	0259      	lsls	r1, r3, #9
 8008078:	460b      	mov	r3, r1
 800807a:	4614      	mov	r4, r2
 800807c:	195b      	adds	r3, r3, r5
 800807e:	eb44 0406 	adc.w	r4, r4, r6
 8008082:	f04f 0100 	mov.w	r1, #0
 8008086:	f04f 0200 	mov.w	r2, #0
 800808a:	01a2      	lsls	r2, r4, #6
 800808c:	ea42 6293 	orr.w	r2, r2, r3, lsr #26
 8008090:	0199      	lsls	r1, r3, #6
 8008092:	1ac9      	subs	r1, r1, r3
 8008094:	eb62 0204 	sbc.w	r2, r2, r4
 8008098:	194b      	adds	r3, r1, r5
 800809a:	eb42 0406 	adc.w	r4, r2, r6
 800809e:	eb13 0508 	adds.w	r5, r3, r8
 80080a2:	eb44 0609 	adc.w	r6, r4, r9
 80080a6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80080aa:	460b      	mov	r3, r1
 80080ac:	4614      	mov	r4, r2
 80080ae:	1b5b      	subs	r3, r3, r5
 80080b0:	eb64 0406 	sbc.w	r4, r4, r6
 80080b4:	e9c7 3404 	strd	r3, r4, [r7, #16]
  t->fcpu = fcpu;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080bc:	601a      	str	r2, [r3, #0]
  t->s = s;
 80080be:	6a3a      	ldr	r2, [r7, #32]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	605a      	str	r2, [r3, #4]
  t->ms = ms;
 80080c4:	69ba      	ldr	r2, [r7, #24]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	609a      	str	r2, [r3, #8]
  t->us = us;
 80080ca:	693a      	ldr	r2, [r7, #16]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	60da      	str	r2, [r3, #12]
  return 0;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3734      	adds	r7, #52	; 0x34
 80080d6:	46bd      	mov	sp, r7
 80080d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080080dc <dwtCyclesToFloatMs>:

float dwtCyclesToFloatMs(uint64_t clks)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	e9c7 0100 	strd	r0, r1, [r7]
  float res;
  float fcpu = (float)systemCoreClock();
 80080e6:	f7ff febf 	bl	8007e68 <systemCoreClock>
 80080ea:	ee07 0a90 	vmov	s15, r0
 80080ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080f2:	edc7 7a03 	vstr	s15, [r7, #12]
  res = ((float)clks * (float)1000.0) / fcpu;
 80080f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080fa:	f7f8 fbad 	bl	8000858 <__aeabi_ul2f>
 80080fe:	ee07 0a10 	vmov	s14, r0
 8008102:	eddf 7a09 	vldr	s15, [pc, #36]	; 8008128 <dwtCyclesToFloatMs+0x4c>
 8008106:	ee67 6a27 	vmul.f32	s13, s14, s15
 800810a:	ed97 7a03 	vldr	s14, [r7, #12]
 800810e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008112:	edc7 7a02 	vstr	s15, [r7, #8]
  return res;
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	ee07 3a90 	vmov	s15, r3
}
 800811c:	eeb0 0a67 	vmov.f32	s0, s15
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	447a0000 	.word	0x447a0000

0800812c <devIdToStr>:

__STATIC_INLINE const char *devIdToStr(uint16_t dev_id)
{
 800812c:	b480      	push	{r7}
 800812e:	b085      	sub	sp, #20
 8008130:	af00      	add	r7, sp, #0
 8008132:	4603      	mov	r3, r0
 8008134:	80fb      	strh	r3, [r7, #6]
  /* DEV_ID field from DBGMCU register */
  const char *str;
  switch (dev_id) {
 8008136:	88fb      	ldrh	r3, [r7, #6]
 8008138:	f2a3 4315 	subw	r3, r3, #1045	; 0x415
 800813c:	2b5d      	cmp	r3, #93	; 0x5d
 800813e:	f200 80e9 	bhi.w	8008314 <devIdToStr+0x1e8>
 8008142:	a201      	add	r2, pc, #4	; (adr r2, 8008148 <devIdToStr+0x1c>)
 8008144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008148:	080082f1 	.word	0x080082f1
 800814c:	08008315 	.word	0x08008315
 8008150:	08008315 	.word	0x08008315
 8008154:	08008315 	.word	0x08008315
 8008158:	08008315 	.word	0x08008315
 800815c:	08008315 	.word	0x08008315
 8008160:	08008315 	.word	0x08008315
 8008164:	08008315 	.word	0x08008315
 8008168:	08008315 	.word	0x08008315
 800816c:	08008315 	.word	0x08008315
 8008170:	08008315 	.word	0x08008315
 8008174:	08008315 	.word	0x08008315
 8008178:	08008315 	.word	0x08008315
 800817c:	080082c1 	.word	0x080082c1
 8008180:	080082d9 	.word	0x080082d9
 8008184:	08008315 	.word	0x08008315
 8008188:	08008315 	.word	0x08008315
 800818c:	08008315 	.word	0x08008315
 8008190:	08008315 	.word	0x08008315
 8008194:	08008315 	.word	0x08008315
 8008198:	08008315 	.word	0x08008315
 800819c:	08008315 	.word	0x08008315
 80081a0:	08008315 	.word	0x08008315
 80081a4:	08008315 	.word	0x08008315
 80081a8:	08008315 	.word	0x08008315
 80081ac:	08008315 	.word	0x08008315
 80081b0:	08008315 	.word	0x08008315
 80081b4:	08008315 	.word	0x08008315
 80081b8:	080082d3 	.word	0x080082d3
 80081bc:	08008315 	.word	0x08008315
 80081c0:	080082df 	.word	0x080082df
 80081c4:	08008315 	.word	0x08008315
 80081c8:	080082e5 	.word	0x080082e5
 80081cc:	08008315 	.word	0x08008315
 80081d0:	08008315 	.word	0x08008315
 80081d4:	080082c7 	.word	0x080082c7
 80081d8:	08008315 	.word	0x08008315
 80081dc:	08008315 	.word	0x08008315
 80081e0:	08008315 	.word	0x08008315
 80081e4:	08008315 	.word	0x08008315
 80081e8:	08008315 	.word	0x08008315
 80081ec:	08008315 	.word	0x08008315
 80081f0:	08008315 	.word	0x08008315
 80081f4:	08008315 	.word	0x08008315
 80081f8:	08008315 	.word	0x08008315
 80081fc:	08008315 	.word	0x08008315
 8008200:	08008315 	.word	0x08008315
 8008204:	08008315 	.word	0x08008315
 8008208:	08008315 	.word	0x08008315
 800820c:	080082cd 	.word	0x080082cd
 8008210:	08008315 	.word	0x08008315
 8008214:	08008315 	.word	0x08008315
 8008218:	08008303 	.word	0x08008303
 800821c:	08008315 	.word	0x08008315
 8008220:	08008315 	.word	0x08008315
 8008224:	08008315 	.word	0x08008315
 8008228:	08008315 	.word	0x08008315
 800822c:	08008315 	.word	0x08008315
 8008230:	08008315 	.word	0x08008315
 8008234:	08008309 	.word	0x08008309
 8008238:	0800830f 	.word	0x0800830f
 800823c:	08008315 	.word	0x08008315
 8008240:	08008315 	.word	0x08008315
 8008244:	08008315 	.word	0x08008315
 8008248:	08008315 	.word	0x08008315
 800824c:	08008315 	.word	0x08008315
 8008250:	08008315 	.word	0x08008315
 8008254:	08008315 	.word	0x08008315
 8008258:	08008315 	.word	0x08008315
 800825c:	08008315 	.word	0x08008315
 8008260:	08008315 	.word	0x08008315
 8008264:	08008315 	.word	0x08008315
 8008268:	08008315 	.word	0x08008315
 800826c:	08008315 	.word	0x08008315
 8008270:	08008315 	.word	0x08008315
 8008274:	08008315 	.word	0x08008315
 8008278:	08008315 	.word	0x08008315
 800827c:	080082eb 	.word	0x080082eb
 8008280:	08008315 	.word	0x08008315
 8008284:	08008315 	.word	0x08008315
 8008288:	08008315 	.word	0x08008315
 800828c:	08008315 	.word	0x08008315
 8008290:	08008315 	.word	0x08008315
 8008294:	08008315 	.word	0x08008315
 8008298:	08008315 	.word	0x08008315
 800829c:	08008315 	.word	0x08008315
 80082a0:	08008315 	.word	0x08008315
 80082a4:	08008315 	.word	0x08008315
 80082a8:	08008315 	.word	0x08008315
 80082ac:	08008315 	.word	0x08008315
 80082b0:	08008315 	.word	0x08008315
 80082b4:	080082f7 	.word	0x080082f7
 80082b8:	08008315 	.word	0x08008315
 80082bc:	080082fd 	.word	0x080082fd
  case 0x422: str = "STM32F303xB/C"; break;
 80082c0:	4b19      	ldr	r3, [pc, #100]	; (8008328 <devIdToStr+0x1fc>)
 80082c2:	60fb      	str	r3, [r7, #12]
 80082c4:	e028      	b.n	8008318 <devIdToStr+0x1ec>
  case 0x438: str = "STM32F303x6/8"; break;
 80082c6:	4b19      	ldr	r3, [pc, #100]	; (800832c <devIdToStr+0x200>)
 80082c8:	60fb      	str	r3, [r7, #12]
 80082ca:	e025      	b.n	8008318 <devIdToStr+0x1ec>
  case 0x446: str = "STM32F303xD/E"; break;
 80082cc:	4b18      	ldr	r3, [pc, #96]	; (8008330 <devIdToStr+0x204>)
 80082ce:	60fb      	str	r3, [r7, #12]
 80082d0:	e022      	b.n	8008318 <devIdToStr+0x1ec>
  case 0x431: str = "STM32F411xC/E"; break;
 80082d2:	4b18      	ldr	r3, [pc, #96]	; (8008334 <devIdToStr+0x208>)
 80082d4:	60fb      	str	r3, [r7, #12]
 80082d6:	e01f      	b.n	8008318 <devIdToStr+0x1ec>
  case 0x423: str = "STM32F401xB/C"; break;
 80082d8:	4b17      	ldr	r3, [pc, #92]	; (8008338 <devIdToStr+0x20c>)
 80082da:	60fb      	str	r3, [r7, #12]
 80082dc:	e01c      	b.n	8008318 <devIdToStr+0x1ec>
  case 0x433: str = "STM32F401xD/E"; break;
 80082de:	4b17      	ldr	r3, [pc, #92]	; (800833c <devIdToStr+0x210>)
 80082e0:	60fb      	str	r3, [r7, #12]
 80082e2:	e019      	b.n	8008318 <devIdToStr+0x1ec>
  case 0x435: str = "STM32L43xxx"; break;
 80082e4:	4b16      	ldr	r3, [pc, #88]	; (8008340 <devIdToStr+0x214>)
 80082e6:	60fb      	str	r3, [r7, #12]
 80082e8:	e016      	b.n	8008318 <devIdToStr+0x1ec>
  case 0x462: str = "STM32L45xxx"; break;
 80082ea:	4b16      	ldr	r3, [pc, #88]	; (8008344 <devIdToStr+0x218>)
 80082ec:	60fb      	str	r3, [r7, #12]
 80082ee:	e013      	b.n	8008318 <devIdToStr+0x1ec>
  case 0x415: str = "STM32L4x6xx"; break;
 80082f0:	4b15      	ldr	r3, [pc, #84]	; (8008348 <devIdToStr+0x21c>)
 80082f2:	60fb      	str	r3, [r7, #12]
 80082f4:	e010      	b.n	8008318 <devIdToStr+0x1ec>
  case 0x470: str = "STM32L4Rxxx"; break;
 80082f6:	4b15      	ldr	r3, [pc, #84]	; (800834c <devIdToStr+0x220>)
 80082f8:	60fb      	str	r3, [r7, #12]
 80082fa:	e00d      	b.n	8008318 <devIdToStr+0x1ec>
  case 0x472: str = "STM32L5[5,6]2xx"; break;
 80082fc:	4b14      	ldr	r3, [pc, #80]	; (8008350 <devIdToStr+0x224>)
 80082fe:	60fb      	str	r3, [r7, #12]
 8008300:	e00a      	b.n	8008318 <devIdToStr+0x1ec>
  case 0x449: str = "STM32F74xxx"; break;
 8008302:	4b14      	ldr	r3, [pc, #80]	; (8008354 <devIdToStr+0x228>)
 8008304:	60fb      	str	r3, [r7, #12]
 8008306:	e007      	b.n	8008318 <devIdToStr+0x1ec>
  case 0x450: str = "STM32H743/53/50xx and STM32H745/55/47/57xx"; break; /* see RM0433 & RM0399 */
 8008308:	4b13      	ldr	r3, [pc, #76]	; (8008358 <devIdToStr+0x22c>)
 800830a:	60fb      	str	r3, [r7, #12]
 800830c:	e004      	b.n	8008318 <devIdToStr+0x1ec>
  case 0x451: str = "STM32F7[6,7]xxx"; break; /* see RM0410 */
 800830e:	4b13      	ldr	r3, [pc, #76]	; (800835c <devIdToStr+0x230>)
 8008310:	60fb      	str	r3, [r7, #12]
 8008312:	e001      	b.n	8008318 <devIdToStr+0x1ec>
  default:    str = "UNKNOWN";
 8008314:	4b12      	ldr	r3, [pc, #72]	; (8008360 <devIdToStr+0x234>)
 8008316:	60fb      	str	r3, [r7, #12]
  }
  return str;
 8008318:	68fb      	ldr	r3, [r7, #12]
}
 800831a:	4618      	mov	r0, r3
 800831c:	3714      	adds	r7, #20
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr
 8008326:	bf00      	nop
 8008328:	08010938 	.word	0x08010938
 800832c:	08010948 	.word	0x08010948
 8008330:	08010958 	.word	0x08010958
 8008334:	08010968 	.word	0x08010968
 8008338:	08010978 	.word	0x08010978
 800833c:	08010988 	.word	0x08010988
 8008340:	08010998 	.word	0x08010998
 8008344:	080109a4 	.word	0x080109a4
 8008348:	080109b0 	.word	0x080109b0
 800834c:	080109bc 	.word	0x080109bc
 8008350:	080109c8 	.word	0x080109c8
 8008354:	080109d8 	.word	0x080109d8
 8008358:	080109e4 	.word	0x080109e4
 800835c:	08010a10 	.word	0x08010a10
 8008360:	08010a20 	.word	0x08010a20

08008364 <bitToStr>:

#if !defined(STM32F3) && !defined(STM32MP1)
__STATIC_INLINE const char* bitToStr(uint32_t val)
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  if (val)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d001      	beq.n	8008376 <bitToStr+0x12>
    return "True";
 8008372:	4b04      	ldr	r3, [pc, #16]	; (8008384 <bitToStr+0x20>)
 8008374:	e000      	b.n	8008378 <bitToStr+0x14>
  else
    return "False";
 8008376:	4b04      	ldr	r3, [pc, #16]	; (8008388 <bitToStr+0x24>)
}
 8008378:	4618      	mov	r0, r3
 800837a:	370c      	adds	r7, #12
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr
 8008384:	08010a28 	.word	0x08010a28
 8008388:	08010a30 	.word	0x08010a30

0800838c <getFlashCacheConf>:
#endif

static uint32_t mconf;

uint32_t getFlashCacheConf(void)
{
 800838c:	b480      	push	{r7}
 800838e:	af00      	add	r7, sp, #0
  return mconf;
 8008390:	4b03      	ldr	r3, [pc, #12]	; (80083a0 <getFlashCacheConf+0x14>)
 8008392:	681b      	ldr	r3, [r3, #0]
}
 8008394:	4618      	mov	r0, r3
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop
 80083a0:	20000bc0 	.word	0x20000bc0

080083a4 <systemSettingLog>:

void systemSettingLog(void)
{
 80083a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083a6:	b08b      	sub	sp, #44	; 0x2c
 80083a8:	af02      	add	r7, sp, #8
  struct dwtTime t;
  uint32_t st;

#if !defined(STM32F3) && !defined(STM32L5)
  uint32_t acr = FLASH->ACR ;
 80083aa:	4b5c      	ldr	r3, [pc, #368]	; (800851c <systemSettingLog+0x178>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	61fb      	str	r3, [r7, #28]
  /* Display ARM Complier version */

#if defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  printf("Compiled with MDK-ARM Keil (Arm Compiler 6) %d\r\n", __ARMCC_VERSION);
#elif defined(__GNUC__)
  printf("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 80083b0:	2301      	movs	r3, #1
 80083b2:	2203      	movs	r2, #3
 80083b4:	2107      	movs	r1, #7
 80083b6:	485a      	ldr	r0, [pc, #360]	; (8008520 <systemSettingLog+0x17c>)
 80083b8:	f007 f8c4 	bl	800f544 <iprintf>
#endif


  /* Display Device configuration */

  printf("STM32 Runtime configuration...\r\n");
 80083bc:	4859      	ldr	r0, [pc, #356]	; (8008524 <systemSettingLog+0x180>)
 80083be:	f007 f935 	bl	800f62c <puts>

  printf(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
      (int)HAL_GetDEVID(),
 80083c2:	f7f9 f8d1 	bl	8001568 <HAL_GetDEVID>
 80083c6:	4603      	mov	r3, r0
  printf(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 80083c8:	461c      	mov	r4, r3
      devIdToStr(HAL_GetDEVID()),
 80083ca:	f7f9 f8cd 	bl	8001568 <HAL_GetDEVID>
 80083ce:	4603      	mov	r3, r0
  printf(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7ff feaa 	bl	800812c <devIdToStr>
 80083d8:	4605      	mov	r5, r0
      (int)HAL_GetREVID()
 80083da:	f7f9 f8b7 	bl	800154c <HAL_GetREVID>
 80083de:	4603      	mov	r3, r0
  printf(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 80083e0:	462a      	mov	r2, r5
 80083e2:	4621      	mov	r1, r4
 80083e4:	4850      	ldr	r0, [pc, #320]	; (8008528 <systemSettingLog+0x184>)
 80083e6:	f007 f8ad 	bl	800f544 <iprintf>
  );

  printf(" Core Arch.   : M%d - %s %s\r\n",
 80083ea:	4b50      	ldr	r3, [pc, #320]	; (800852c <systemSettingLog+0x188>)
 80083ec:	4a50      	ldr	r2, [pc, #320]	; (8008530 <systemSettingLog+0x18c>)
 80083ee:	2104      	movs	r1, #4
 80083f0:	4850      	ldr	r0, [pc, #320]	; (8008534 <systemSettingLog+0x190>)
 80083f2:	f007 f8a7 	bl	800f544 <iprintf>
          ""
#endif
  );

#if (__FPU_PRESENT == 1) && __FPU_USED
  mconf = (1 << 16);  /* FPU present and used */
 80083f6:	4b50      	ldr	r3, [pc, #320]	; (8008538 <systemSettingLog+0x194>)
 80083f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80083fc:	601a      	str	r2, [r3, #0]
#endif

  printf(" HAL version  : 0x%08x\r\n", (int)HAL_GetHalVersion());
 80083fe:	f7f9 f89b 	bl	8001538 <HAL_GetHalVersion>
 8008402:	4603      	mov	r3, r0
 8008404:	4619      	mov	r1, r3
 8008406:	484d      	ldr	r0, [pc, #308]	; (800853c <systemSettingLog+0x198>)
 8008408:	f007 f89c 	bl	800f544 <iprintf>

  val = systemCoreClock()/1000000;
 800840c:	f7ff fd2c 	bl	8007e68 <systemCoreClock>
 8008410:	4602      	mov	r2, r0
 8008412:	4b4b      	ldr	r3, [pc, #300]	; (8008540 <systemSettingLog+0x19c>)
 8008414:	fba3 2302 	umull	r2, r3, r3, r2
 8008418:	0c9b      	lsrs	r3, r3, #18
 800841a:	61bb      	str	r3, [r7, #24]

#if !defined(STM32H7)
  printf(" system clock : %u MHz\r\n", (int)val);
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	4619      	mov	r1, r3
 8008420:	4848      	ldr	r0, [pc, #288]	; (8008544 <systemSettingLog+0x1a0>)
 8008422:	f007 f88f 	bl	800f544 <iprintf>
      bitToStr(val & SCB_CCR_IC_Msk),
      bitToStr(val & SCB_CCR_DC_Msk));
#endif
#else
#if !defined(STM32F3) && !defined(STM32L5) && !defined(STM32MP1)
  mconf |= (1 << 24);  /* F4/L4 conf. */
 8008426:	4b44      	ldr	r3, [pc, #272]	; (8008538 <systemSettingLog+0x194>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800842e:	4a42      	ldr	r2, [pc, #264]	; (8008538 <systemSettingLog+0x194>)
 8008430:	6013      	str	r3, [r2, #0]
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8008432:	69fb      	ldr	r3, [r7, #28]
 8008434:	f003 020f 	and.w	r2, r3, #15
 8008438:	4b3f      	ldr	r3, [pc, #252]	; (8008538 <systemSettingLog+0x194>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4313      	orrs	r3, r2
 800843e:	4a3e      	ldr	r2, [pc, #248]	; (8008538 <systemSettingLog+0x194>)
 8008440:	6013      	str	r3, [r2, #0]
  if ((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos)
 8008442:	69fb      	ldr	r3, [r7, #28]
 8008444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008448:	2b00      	cmp	r3, #0
 800844a:	d005      	beq.n	8008458 <systemSettingLog+0xb4>
    mconf |= (1 << 8);
 800844c:	4b3a      	ldr	r3, [pc, #232]	; (8008538 <systemSettingLog+0x194>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008454:	4a38      	ldr	r2, [pc, #224]	; (8008538 <systemSettingLog+0x194>)
 8008456:	6013      	str	r3, [r2, #0]
  if ((acr & FLASH_ACR_ICEN_Msk) >> FLASH_ACR_ICEN_Pos)
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800845e:	2b00      	cmp	r3, #0
 8008460:	d005      	beq.n	800846e <systemSettingLog+0xca>
    mconf |= (1 << 9);
 8008462:	4b35      	ldr	r3, [pc, #212]	; (8008538 <systemSettingLog+0x194>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800846a:	4a33      	ldr	r2, [pc, #204]	; (8008538 <systemSettingLog+0x194>)
 800846c:	6013      	str	r3, [r2, #0]
  if ((acr & FLASH_ACR_DCEN_Msk) >> FLASH_ACR_DCEN_Pos)
 800846e:	69fb      	ldr	r3, [r7, #28]
 8008470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008474:	2b00      	cmp	r3, #0
 8008476:	d005      	beq.n	8008484 <systemSettingLog+0xe0>
    mconf |= (1 << 10);
 8008478:	4b2f      	ldr	r3, [pc, #188]	; (8008538 <systemSettingLog+0x194>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008480:	4a2d      	ldr	r2, [pc, #180]	; (8008538 <systemSettingLog+0x194>)
 8008482:	6013      	str	r3, [r2, #0]
  printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 8008484:	69fc      	ldr	r4, [r7, #28]
      (int)acr,
      bitToStr((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos),
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	0a1b      	lsrs	r3, r3, #8
  printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 800848a:	f003 0301 	and.w	r3, r3, #1
 800848e:	4618      	mov	r0, r3
 8008490:	f7ff ff68 	bl	8008364 <bitToStr>
 8008494:	4605      	mov	r5, r0
      bitToStr((acr & FLASH_ACR_ICEN_Msk) >> FLASH_ACR_ICEN_Pos),
 8008496:	69fb      	ldr	r3, [r7, #28]
 8008498:	0a5b      	lsrs	r3, r3, #9
  printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 800849a:	f003 0301 	and.w	r3, r3, #1
 800849e:	4618      	mov	r0, r3
 80084a0:	f7ff ff60 	bl	8008364 <bitToStr>
 80084a4:	4606      	mov	r6, r0
      bitToStr((acr & FLASH_ACR_DCEN_Msk) >> FLASH_ACR_DCEN_Pos),
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	0a9b      	lsrs	r3, r3, #10
  printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 80084aa:	f003 0301 	and.w	r3, r3, #1
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7ff ff58 	bl	8008364 <bitToStr>
 80084b4:	4602      	mov	r2, r0
      (int)((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos));
 80084b6:	69fb      	ldr	r3, [r7, #28]
  printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 80084b8:	f003 030f 	and.w	r3, r3, #15
 80084bc:	9301      	str	r3, [sp, #4]
 80084be:	9200      	str	r2, [sp, #0]
 80084c0:	4633      	mov	r3, r6
 80084c2:	462a      	mov	r2, r5
 80084c4:	4621      	mov	r1, r4
 80084c6:	4820      	ldr	r0, [pc, #128]	; (8008548 <systemSettingLog+0x1a4>)
 80084c8:	f007 f83c 	bl	800f544 <iprintf>
  printf(" ICACHE       : %s\r\n", bitToStr(READ_BIT(ICACHE->CR, ICACHE_CR_EN)));
#endif
#endif

  /* Init CRC and DWT */
  crcIpInit();
 80084cc:	f7ff fc90 	bl	8007df0 <crcIpInit>
  dwtIpInit();
 80084d0:	f7ff fcae 	bl	8007e30 <dwtIpInit>

  /* Display HAL tick Calibration */
  dwtReset();
 80084d4:	f7ff fbfa 	bl	8007ccc <dwtReset>
  HAL_Delay(100);
 80084d8:	2064      	movs	r0, #100	; 0x64
 80084da:	f7f9 f80b 	bl	80014f4 <HAL_Delay>
  st = dwtGetCycles();
 80084de:	f7ff fc01 	bl	8007ce4 <dwtGetCycles>
 80084e2:	6178      	str	r0, [r7, #20]
  dwtCyclesToTime(st/100, &t);
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	4a19      	ldr	r2, [pc, #100]	; (800854c <systemSettingLog+0x1a8>)
 80084e8:	fba2 2303 	umull	r2, r3, r2, r3
 80084ec:	095b      	lsrs	r3, r3, #5
 80084ee:	f04f 0400 	mov.w	r4, #0
 80084f2:	1d3a      	adds	r2, r7, #4
 80084f4:	4618      	mov	r0, r3
 80084f6:	4621      	mov	r1, r4
 80084f8:	f7ff fcbd 	bl	8007e76 <dwtCyclesToTime>

  printf(" Calibration  : HAL_Delay(1)=%d.%03d ms\r\n",
      t.s * 100 + t.ms, t.us);
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	2264      	movs	r2, #100	; 0x64
 8008500:	fb02 f203 	mul.w	r2, r2, r3
 8008504:	68fb      	ldr	r3, [r7, #12]
  printf(" Calibration  : HAL_Delay(1)=%d.%03d ms\r\n",
 8008506:	4413      	add	r3, r2
 8008508:	693a      	ldr	r2, [r7, #16]
 800850a:	4619      	mov	r1, r3
 800850c:	4810      	ldr	r0, [pc, #64]	; (8008550 <systemSettingLog+0x1ac>)
 800850e:	f007 f819 	bl	800f544 <iprintf>
}
 8008512:	bf00      	nop
 8008514:	3724      	adds	r7, #36	; 0x24
 8008516:	46bd      	mov	sp, r7
 8008518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800851a:	bf00      	nop
 800851c:	40022000 	.word	0x40022000
 8008520:	08010a38 	.word	0x08010a38
 8008524:	08010a58 	.word	0x08010a58
 8008528:	08010a78 	.word	0x08010a78
 800852c:	08010aac 	.word	0x08010aac
 8008530:	08010ab8 	.word	0x08010ab8
 8008534:	08010ac4 	.word	0x08010ac4
 8008538:	20000bc0 	.word	0x20000bc0
 800853c:	08010ae4 	.word	0x08010ae4
 8008540:	431bde83 	.word	0x431bde83
 8008544:	08010b00 	.word	0x08010b00
 8008548:	08010b1c 	.word	0x08010b1c
 800854c:	51eb851f 	.word	0x51eb851f
 8008550:	08010b60 	.word	0x08010b60

08008554 <dwtReset>:
__STATIC_INLINE void dwtReset(void) {
 8008554:	b480      	push	{r7}
 8008556:	af00      	add	r7, sp, #0
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 8008558:	4b03      	ldr	r3, [pc, #12]	; (8008568 <dwtReset+0x14>)
 800855a:	2200      	movs	r2, #0
 800855c:	605a      	str	r2, [r3, #4]
}
 800855e:	bf00      	nop
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr
 8008568:	e0001000 	.word	0xe0001000

0800856c <dwtGetCycles>:
__STATIC_INLINE  uint32_t dwtGetCycles(void) {
 800856c:	b480      	push	{r7}
 800856e:	af00      	add	r7, sp, #0
  return DWT->CYCCNT;
 8008570:	4b03      	ldr	r3, [pc, #12]	; (8008580 <dwtGetCycles+0x14>)
 8008572:	685b      	ldr	r3, [r3, #4]
}
 8008574:	4618      	mov	r0, r3
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	e0001000 	.word	0xe0001000

08008584 <disableInts>:
 * System services
 * -----------------------------------------------------------------------------
 */

__STATIC_INLINE uint32_t disableInts(void)
{
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800858a:	f3ef 8310 	mrs	r3, PRIMASK
 800858e:	603b      	str	r3, [r7, #0]
  return(result);
 8008590:	683b      	ldr	r3, [r7, #0]
  uint32_t state;

  state = __get_PRIMASK();
 8008592:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8008594:	b672      	cpsid	i
  __disable_irq();

  return state;
 8008596:	687b      	ldr	r3, [r7, #4]
}
 8008598:	4618      	mov	r0, r3
 800859a:	370c      	adds	r7, #12
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr

080085a4 <restoreInts>:

__STATIC_INLINE void restoreInts(uint32_t state)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f383 8810 	msr	PRIMASK, r3
  __set_PRIMASK(state);
}
 80085b6:	bf00      	nop
 80085b8:	3714      	adds	r7, #20
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr

080085c2 <aiOnExecNode_cb>:
 */

#ifdef HAS_OBSERVER
static ai_u32 aiOnExecNode_cb(const ai_handle cookie,
    const ai_u32 flags,
    const ai_observer_node *node) {
 80085c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085c4:	b099      	sub	sp, #100	; 0x64
 80085c6:	af04      	add	r7, sp, #16
 80085c8:	60f8      	str	r0, [r7, #12]
 80085ca:	60b9      	str	r1, [r7, #8]
 80085cc:	607a      	str	r2, [r7, #4]

  struct ai_network_exec_ctx *ctx = (struct ai_network_exec_ctx*)cookie;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	647b      	str	r3, [r7, #68]	; 0x44
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 80085d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085d6:	643b      	str	r3, [r7, #64]	; 0x40

  volatile uint64_t ts = dwtGetCycles(); /* time stamp to mark the entry */
 80085d8:	f7ff ffc8 	bl	800856c <dwtGetCycles>
 80085dc:	4603      	mov	r3, r0
 80085de:	f04f 0400 	mov.w	r4, #0
 80085e2:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

  if (flags & AI_OBSERVER_PRE_EVT) {
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	f003 0302 	and.w	r3, r3, #2
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d010      	beq.n	8008612 <aiOnExecNode_cb+0x50>
    obs_ctx->n_cb_in++;
 80085f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	1c5a      	adds	r2, r3, #1
 80085f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085f8:	605a      	str	r2, [r3, #4]
    if (flags & AI_OBSERVER_FIRST_EVT)
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008600:	2b00      	cmp	r3, #0
 8008602:	f000 8114 	beq.w	800882e <aiOnExecNode_cb+0x26c>
      obs_ctx->tnodes = ts;
 8008606:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800860a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800860c:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8008610:	e10d      	b.n	800882e <aiOnExecNode_cb+0x26c>
  } else if (flags & AI_OBSERVER_POST_EVT) {
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	f003 0304 	and.w	r3, r3, #4
 8008618:	2b00      	cmp	r3, #0
 800861a:	f000 8108 	beq.w	800882e <aiOnExecNode_cb+0x26c>
    uint32_t type;
    ai_tensor_list *tl;

    dwtReset();
 800861e:	f7ff ff99 	bl	8008554 <dwtReset>
    /* "ts" here indicates the execution time of the
     * operator because the dwt cycle CPU counter has been
     * reset by the entry cb.
     */
    obs_ctx->tnodes += ts;
 8008622:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008628:	e9d3 5608 	ldrd	r5, r6, [r3, #32]
 800862c:	186b      	adds	r3, r5, r1
 800862e:	eb46 0402 	adc.w	r4, r6, r2
 8008632:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008634:	e9c2 3408 	strd	r3, r4, [r2, #32]
    obs_ctx->n_cb_out++;
 8008638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	1c5a      	adds	r2, r3, #1
 800863e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008640:	609a      	str	r2, [r3, #8]

    if (flags & AI_OBSERVER_LAST_EVT)
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008648:	2b00      	cmp	r3, #0
 800864a:	d002      	beq.n	8008652 <aiOnExecNode_cb+0x90>
      type = EnumLayerType_LAYER_TYPE_INTERNAL_LAST;
 800864c:	2302      	movs	r3, #2
 800864e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008650:	e001      	b.n	8008656 <aiOnExecNode_cb+0x94>
    else
      type = EnumLayerType_LAYER_TYPE_INTERNAL;
 8008652:	2301      	movs	r3, #1
 8008654:	64fb      	str	r3, [r7, #76]	; 0x4c

    type = type << 16;
 8008656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008658:	041b      	lsls	r3, r3, #16
 800865a:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (obs_ctx->no_data)
 800865c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800865e:	7d1b      	ldrb	r3, [r3, #20]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d003      	beq.n	800866c <aiOnExecNode_cb+0xaa>
      type |= PB_BUFFER_TYPE_SEND_WITHOUT_DATA;
 8008664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008666:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800866a:	64fb      	str	r3, [r7, #76]	; 0x4c
    type |= (node->type & (ai_u16)0x7FFF);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	885b      	ldrh	r3, [r3, #2]
 8008670:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008674:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008676:	4313      	orrs	r3, r2
 8008678:	64fb      	str	r3, [r7, #76]	; 0x4c

    tl = GET_TENSOR_LIST_OUT(node->tensors);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	68db      	ldr	r3, [r3, #12]
 800867e:	881b      	ldrh	r3, [r3, #0]
 8008680:	2b01      	cmp	r3, #1
 8008682:	d904      	bls.n	800868e <aiOnExecNode_cb+0xcc>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	68db      	ldr	r3, [r3, #12]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	330c      	adds	r3, #12
 800868c:	e000      	b.n	8008690 <aiOnExecNode_cb+0xce>
 800868e:	2300      	movs	r3, #0
 8008690:	63fb      	str	r3, [r7, #60]	; 0x3c
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 8008692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008694:	2b00      	cmp	r3, #0
 8008696:	d00d      	beq.n	80086b4 <aiOnExecNode_cb+0xf2>
 8008698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800869a:	881b      	ldrh	r3, [r3, #0]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d009      	beq.n	80086b4 <aiOnExecNode_cb+0xf2>
 80086a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d003      	beq.n	80086b0 <aiOnExecNode_cb+0xee>
 80086a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	e002      	b.n	80086b6 <aiOnExecNode_cb+0xf4>
 80086b0:	2300      	movs	r3, #0
 80086b2:	e000      	b.n	80086b6 <aiOnExecNode_cb+0xf4>
 80086b4:	2300      	movs	r3, #0
 80086b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80086b8:	2300      	movs	r3, #0
 80086ba:	637b      	str	r3, [r7, #52]	; 0x34
 80086bc:	bf00      	nop
 80086be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	f000 809f 	beq.w	8008804 <aiOnExecNode_cb+0x242>
 80086c6:	e099      	b.n	80087fc <aiOnExecNode_cb+0x23a>
      ai_buffer buffer;
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 80086c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d00f      	beq.n	80086f0 <aiOnExecNode_cb+0x12e>
 80086d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00a      	beq.n	80086f0 <aiOnExecNode_cb+0x12e>
 80086da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	885b      	ldrh	r3, [r3, #2]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d005      	beq.n	80086f0 <aiOnExecNode_cb+0x12e>
 80086e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	e001      	b.n	80086f4 <aiOnExecNode_cb+0x132>
 80086f0:	f04f 0300 	mov.w	r3, #0
 80086f4:	633b      	str	r3, [r7, #48]	; 0x30
      ai_i32 zero_point = 0;
 80086f6:	2300      	movs	r3, #0
 80086f8:	64bb      	str	r3, [r7, #72]	; 0x48

      if (AI_TENSOR_FMT_GET_SIGN(t))
 80086fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fc:	699b      	ldr	r3, [r3, #24]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008704:	2b00      	cmp	r3, #0
 8008706:	d017      	beq.n	8008738 <aiOnExecNode_cb+0x176>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 8008708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d010      	beq.n	8008732 <aiOnExecNode_cb+0x170>
 8008710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00b      	beq.n	8008732 <aiOnExecNode_cb+0x170>
 800871a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	885b      	ldrh	r3, [r3, #2]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d006      	beq.n	8008732 <aiOnExecNode_cb+0x170>
 8008724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	f993 3000 	ldrsb.w	r3, [r3]
 8008730:	e000      	b.n	8008734 <aiOnExecNode_cb+0x172>
 8008732:	2300      	movs	r3, #0
 8008734:	64bb      	str	r3, [r7, #72]	; 0x48
 8008736:	e015      	b.n	8008764 <aiOnExecNode_cb+0x1a2>
      else
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_U8(t, 0);
 8008738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d00f      	beq.n	8008760 <aiOnExecNode_cb+0x19e>
 8008740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d00a      	beq.n	8008760 <aiOnExecNode_cb+0x19e>
 800874a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	885b      	ldrh	r3, [r3, #2]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d005      	beq.n	8008760 <aiOnExecNode_cb+0x19e>
 8008754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	e000      	b.n	8008762 <aiOnExecNode_cb+0x1a0>
 8008760:	2300      	movs	r3, #0
 8008762:	64bb      	str	r3, [r7, #72]	; 0x48

      buffer.format = AI_TENSOR_GET_FMT(t);
 8008764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008766:	699b      	ldr	r3, [r3, #24]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	613b      	str	r3, [r7, #16]
      buffer.n_batches = 1;
 800876c:	2301      	movs	r3, #1
 800876e:	82bb      	strh	r3, [r7, #20]
      buffer.data = AI_TENSOR_ARRAY_GET_DATA_ADDR(t);
 8008770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008772:	699b      	ldr	r3, [r3, #24]
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	623b      	str	r3, [r7, #32]
      buffer.height = AI_SHAPE_H(AI_TENSOR_SHAPE(t));
 8008778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	330c      	adds	r3, #12
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	b29b      	uxth	r3, r3
 8008782:	82fb      	strh	r3, [r7, #22]
      buffer.width = AI_SHAPE_W(AI_TENSOR_SHAPE(t));
 8008784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	3308      	adds	r3, #8
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	b29b      	uxth	r3, r3
 800878e:	833b      	strh	r3, [r7, #24]
      buffer.channels = AI_SHAPE_CH(AI_TENSOR_SHAPE(t));
 8008790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	61fb      	str	r3, [r7, #28]
      buffer.meta_info = NULL;
 8008798:	2300      	movs	r3, #0
 800879a:	627b      	str	r3, [r7, #36]	; 0x24

      aiPbMgrSendAiBuffer4(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 800879c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800879e:	68dd      	ldr	r5, [r3, #12]
 80087a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087a2:	691e      	ldr	r6, [r3, #16]
          type,
          node->id,
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	889b      	ldrh	r3, [r3, #4]
      aiPbMgrSendAiBuffer4(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 80087a8:	603b      	str	r3, [r7, #0]
 80087aa:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80087ae:	4618      	mov	r0, r3
 80087b0:	4621      	mov	r1, r4
 80087b2:	f7ff fc93 	bl	80080dc <dwtCyclesToFloatMs>
 80087b6:	eef0 7a40 	vmov.f32	s15, s0
 80087ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087bc:	9302      	str	r3, [sp, #8]
 80087be:	f107 0310 	add.w	r3, r7, #16
 80087c2:	9301      	str	r3, [sp, #4]
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	9300      	str	r3, [sp, #0]
 80087c8:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 80087cc:	eeb0 0a67 	vmov.f32	s0, s15
 80087d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087d2:	2202      	movs	r2, #2
 80087d4:	4631      	mov	r1, r6
 80087d6:	4628      	mov	r0, r5
 80087d8:	f7fe fcf0 	bl	80071bc <aiPbMgrSendAiBuffer4>
          dwtCyclesToFloatMs(ts),
          &buffer,
          scale, zero_point);

      obs_ctx->tcom += dwtGetCycles();
 80087dc:	f7ff fec6 	bl	800856c <dwtGetCycles>
 80087e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087e2:	e9d3 1206 	ldrd	r1, r2, [r3, #24]
 80087e6:	4605      	mov	r5, r0
 80087e8:	f04f 0600 	mov.w	r6, #0
 80087ec:	186b      	adds	r3, r5, r1
 80087ee:	eb46 0402 	adc.w	r4, r6, r2
 80087f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087f4:	e9c2 3406 	strd	r3, r4, [r2, #24]
      break; /* currently (X-CUBE-AI 5.x) only one output tensor is available by operator */
 80087f8:	bf00      	nop
 80087fa:	e018      	b.n	800882e <aiOnExecNode_cb+0x26c>
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 80087fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087fe:	881b      	ldrh	r3, [r3, #0]
 8008800:	461a      	mov	r2, r3
 8008802:	e000      	b.n	8008806 <aiOnExecNode_cb+0x244>
 8008804:	2200      	movs	r2, #0
 8008806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008808:	429a      	cmp	r2, r3
 800880a:	d910      	bls.n	800882e <aiOnExecNode_cb+0x26c>
 800880c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d006      	beq.n	8008822 <aiOnExecNode_cb+0x260>
 8008814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008816:	685a      	ldr	r2, [r3, #4]
 8008818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	4413      	add	r3, r2
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	e000      	b.n	8008824 <aiOnExecNode_cb+0x262>
 8008822:	2300      	movs	r3, #0
 8008824:	63bb      	str	r3, [r7, #56]	; 0x38
 8008826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008828:	2b00      	cmp	r3, #0
 800882a:	f47f af4d 	bne.w	80086c8 <aiOnExecNode_cb+0x106>
    }
  }
  dwtReset();
 800882e:	f7ff fe91 	bl	8008554 <dwtReset>
  return 0;
 8008832:	2300      	movs	r3, #0
}
 8008834:	4618      	mov	r0, r3
 8008836:	3754      	adds	r7, #84	; 0x54
 8008838:	46bd      	mov	sp, r7
 800883a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800883c <aiObserverAdjustInferenceTime>:
#endif


static uint64_t aiObserverAdjustInferenceTime(struct ai_network_exec_ctx *ctx,
    uint64_t tend)
{
 800883c:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8008840:	b087      	sub	sp, #28
 8008842:	af00      	add	r7, sp, #0
 8008844:	60f8      	str	r0, [r7, #12]
 8008846:	e9c7 2300 	strd	r2, r3, [r7]
   * tnodes = nn.init + nn.l0 + nn.l1 ...
   * tcom   = tl0 + tl1 + ...
   * tend   = nn.done
   *
   */
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800884e:	617b      	str	r3, [r7, #20]
  tend = obs_ctx->tcom + obs_ctx->tnodes + tend;
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	e9d3 1206 	ldrd	r1, r2, [r3, #24]
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800885c:	eb13 0b01 	adds.w	fp, r3, r1
 8008860:	eb44 0c02 	adc.w	ip, r4, r2
 8008864:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008868:	eb1b 0301 	adds.w	r3, fp, r1
 800886c:	eb4c 0402 	adc.w	r4, ip, r2
 8008870:	e9c7 3400 	strd	r3, r4, [r7]
#endif
  return tend;
 8008874:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8008878:	4618      	mov	r0, r3
 800887a:	4621      	mov	r1, r4
 800887c:	371c      	adds	r7, #28
 800887e:	46bd      	mov	sp, r7
 8008880:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8008884:	4770      	bx	lr

08008886 <aiObserverSendReport>:

static void aiObserverSendReport(const reqMsg *req, respMsg *resp,
    EnumState state, struct ai_network_exec_ctx *ctx,
    const ai_float dur_ms)
{
 8008886:	b580      	push	{r7, lr}
 8008888:	b088      	sub	sp, #32
 800888a:	af00      	add	r7, sp, #0
 800888c:	6178      	str	r0, [r7, #20]
 800888e:	6139      	str	r1, [r7, #16]
 8008890:	60bb      	str	r3, [r7, #8]
 8008892:	ed87 0a01 	vstr	s0, [r7, #4]
 8008896:	4613      	mov	r3, r2
 8008898:	73fb      	strb	r3, [r7, #15]
#ifdef HAS_OBSERVER
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800889e:	61fb      	str	r3, [r7, #28]

  if (obs_ctx->is_enabled == false)
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	f083 0301 	eor.w	r3, r3, #1
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d11b      	bne.n	80088e6 <aiObserverSendReport+0x60>
    return;

  resp->which_payload = respMsg_report_tag;
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	2215      	movs	r2, #21
 80088b2:	80da      	strh	r2, [r3, #6]
  resp->payload.report.id = 0;
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	2200      	movs	r2, #0
 80088b8:	609a      	str	r2, [r3, #8]
  resp->payload.report.elapsed_ms = dur_ms;
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	619a      	str	r2, [r3, #24]
  resp->payload.report.n_nodes = ctx->report.n_nodes;
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	615a      	str	r2, [r3, #20]
  resp->payload.report.signature = 0;
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	2200      	movs	r2, #0
 80088cc:	60da      	str	r2, [r3, #12]
  resp->payload.report.num_inferences = 1;
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	2201      	movs	r2, #1
 80088d2:	611a      	str	r2, [r3, #16]
  aiPbMgrSendResp(req, resp, state);
 80088d4:	7bfb      	ldrb	r3, [r7, #15]
 80088d6:	461a      	mov	r2, r3
 80088d8:	6939      	ldr	r1, [r7, #16]
 80088da:	6978      	ldr	r0, [r7, #20]
 80088dc:	f7fe f976 	bl	8006bcc <aiPbMgrSendResp>
  aiPbMgrWaitAck();
 80088e0:	f7fe f9ae 	bl	8006c40 <aiPbMgrWaitAck>
 80088e4:	e000      	b.n	80088e8 <aiObserverSendReport+0x62>
    return;
 80088e6:	bf00      	nop
#endif
}
 80088e8:	3720      	adds	r7, #32
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
	...

080088f0 <aiObserverConfig>:

static int aiObserverConfig(struct ai_network_exec_ctx *ctx,
    const reqMsg *req)
{
 80088f0:	b490      	push	{r4, r7}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
#ifdef HAS_OBSERVER
  net_obs_ctx.no_data = false;
 80088fa:	4b1c      	ldr	r3, [pc, #112]	; (800896c <aiObserverConfig+0x7c>)
 80088fc:	2200      	movs	r2, #0
 80088fe:	751a      	strb	r2, [r3, #20]
  net_obs_ctx.is_enabled = false;
 8008900:	4b1a      	ldr	r3, [pc, #104]	; (800896c <aiObserverConfig+0x7c>)
 8008902:	2200      	movs	r2, #0
 8008904:	701a      	strb	r2, [r3, #0]
  if ((req->param & EnumRunParam_P_RUN_MODE_INSPECTOR) ==
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	f003 0301 	and.w	r3, r3, #1
 800890e:	2b00      	cmp	r3, #0
 8008910:	d002      	beq.n	8008918 <aiObserverConfig+0x28>
      EnumRunParam_P_RUN_MODE_INSPECTOR)
    net_obs_ctx.is_enabled = true;
 8008912:	4b16      	ldr	r3, [pc, #88]	; (800896c <aiObserverConfig+0x7c>)
 8008914:	2201      	movs	r2, #1
 8008916:	701a      	strb	r2, [r3, #0]

  if ((req->param & EnumRunParam_P_RUN_MODE_INSPECTOR_WITHOUT_DATA) ==
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	689b      	ldr	r3, [r3, #8]
 800891c:	f003 0302 	and.w	r3, r3, #2
 8008920:	2b00      	cmp	r3, #0
 8008922:	d005      	beq.n	8008930 <aiObserverConfig+0x40>
      EnumRunParam_P_RUN_MODE_INSPECTOR_WITHOUT_DATA) {
    net_obs_ctx.is_enabled = true;
 8008924:	4b11      	ldr	r3, [pc, #68]	; (800896c <aiObserverConfig+0x7c>)
 8008926:	2201      	movs	r2, #1
 8008928:	701a      	strb	r2, [r3, #0]
    net_obs_ctx.no_data = true;
 800892a:	4b10      	ldr	r3, [pc, #64]	; (800896c <aiObserverConfig+0x7c>)
 800892c:	2201      	movs	r2, #1
 800892e:	751a      	strb	r2, [r3, #20]
  }

  net_obs_ctx.tcom = 0ULL;
 8008930:	4a0e      	ldr	r2, [pc, #56]	; (800896c <aiObserverConfig+0x7c>)
 8008932:	f04f 0300 	mov.w	r3, #0
 8008936:	f04f 0400 	mov.w	r4, #0
 800893a:	e9c2 3406 	strd	r3, r4, [r2, #24]
  net_obs_ctx.tnodes = 0ULL;
 800893e:	4a0b      	ldr	r2, [pc, #44]	; (800896c <aiObserverConfig+0x7c>)
 8008940:	f04f 0300 	mov.w	r3, #0
 8008944:	f04f 0400 	mov.w	r4, #0
 8008948:	e9c2 3408 	strd	r3, r4, [r2, #32]
  net_obs_ctx.n_cb_in  = 0;
 800894c:	4b07      	ldr	r3, [pc, #28]	; (800896c <aiObserverConfig+0x7c>)
 800894e:	2200      	movs	r2, #0
 8008950:	605a      	str	r2, [r3, #4]
  net_obs_ctx.n_cb_out = 0;
 8008952:	4b06      	ldr	r3, [pc, #24]	; (800896c <aiObserverConfig+0x7c>)
 8008954:	2200      	movs	r2, #0
 8008956:	609a      	str	r2, [r3, #8]

  ctx->obs_ctx = &net_obs_ctx;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4a04      	ldr	r2, [pc, #16]	; (800896c <aiObserverConfig+0x7c>)
 800895c:	679a      	str	r2, [r3, #120]	; 0x78
#endif
return 0;
 800895e:	2300      	movs	r3, #0
}
 8008960:	4618      	mov	r0, r3
 8008962:	3708      	adds	r7, #8
 8008964:	46bd      	mov	sp, r7
 8008966:	bc90      	pop	{r4, r7}
 8008968:	4770      	bx	lr
 800896a:	bf00      	nop
 800896c:	2004f7a0 	.word	0x2004f7a0

08008970 <aiObserverBind>:

static int aiObserverBind(struct ai_network_exec_ctx *ctx,
    const reqMsg *creq, respMsg *cresp)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b094      	sub	sp, #80	; 0x50
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	607a      	str	r2, [r7, #4]
#ifdef HAS_OBSERVER
  ai_handle net_hdl;
  ai_network_params pparams;
  ai_bool res;

  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008980:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (obs_ctx->is_enabled == false)
 8008982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	f083 0301 	eor.w	r3, r3, #1
 800898a:	b2db      	uxtb	r3, r3
 800898c:	2b00      	cmp	r3, #0
 800898e:	d001      	beq.n	8008994 <aiObserverBind+0x24>
    return 0;
 8008990:	2300      	movs	r3, #0
 8008992:	e033      	b.n	80089fc <aiObserverBind+0x8c>

  if (ctx->handle == AI_HANDLE_NULL)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d102      	bne.n	80089a2 <aiObserverBind+0x32>
    return -1;
 800899c:	f04f 33ff 	mov.w	r3, #4294967295
 80089a0:	e02c      	b.n	80089fc <aiObserverBind+0x8c>

  obs_ctx->creq = creq;
 80089a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089a4:	68ba      	ldr	r2, [r7, #8]
 80089a6:	60da      	str	r2, [r3, #12]
  obs_ctx->cresp = cresp;
 80089a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	611a      	str	r2, [r3, #16]

  /* retrieve real net handle to use the AI platform API */
  ai_mnetwork_get_private_handle(ctx->handle,
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f107 0214 	add.w	r2, r7, #20
 80089b6:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80089ba:	4618      	mov	r0, r3
 80089bc:	f000 fdf2 	bl	80095a4 <ai_mnetwork_get_private_handle>
      &net_hdl,
      &pparams);

  /* register the user call-back */
  obs_ctx->plt_ctx.on_node = aiOnExecNode_cb;
 80089c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089c2:	4a10      	ldr	r2, [pc, #64]	; (8008a04 <aiObserverBind+0x94>)
 80089c4:	629a      	str	r2, [r3, #40]	; 0x28
  obs_ctx->plt_ctx.cookie = (ai_handle)ctx;
 80089c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089c8:	68fa      	ldr	r2, [r7, #12]
 80089ca:	62da      	str	r2, [r3, #44]	; 0x2c
  obs_ctx->plt_ctx.flags = AI_OBSERVER_PRE_EVT | AI_OBSERVER_POST_EVT;
 80089cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089ce:	2206      	movs	r2, #6
 80089d0:	631a      	str	r2, [r3, #48]	; 0x30

  res = ai_platform_observer_register_s(net_hdl, &obs_ctx->plt_ctx);
 80089d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089d6:	3328      	adds	r3, #40	; 0x28
 80089d8:	4619      	mov	r1, r3
 80089da:	4610      	mov	r0, r2
 80089dc:	f004 fc0a 	bl	800d1f4 <ai_platform_observer_register_s>
 80089e0:	4603      	mov	r3, r0
 80089e2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  if (!res) {
 80089e6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80089ea:	f083 0301 	eor.w	r3, r3, #1
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d002      	beq.n	80089fa <aiObserverBind+0x8a>
    return -1;
 80089f4:	f04f 33ff 	mov.w	r3, #4294967295
 80089f8:	e000      	b.n	80089fc <aiObserverBind+0x8c>
  }
#endif
  return 0;
 80089fa:	2300      	movs	r3, #0
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3750      	adds	r7, #80	; 0x50
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}
 8008a04:	080085c3 	.word	0x080085c3

08008a08 <aiObserverUnbind>:

static int aiObserverUnbind(struct ai_network_exec_ctx *ctx)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b090      	sub	sp, #64	; 0x40
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
#ifdef HAS_OBSERVER
  ai_handle net_hdl;
  ai_network_params pparams;

  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a14:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (obs_ctx->is_enabled == false)
 8008a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	f083 0301 	eor.w	r3, r3, #1
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d001      	beq.n	8008a28 <aiObserverUnbind+0x20>
    return 0;
 8008a24:	2300      	movs	r3, #0
 8008a26:	e010      	b.n	8008a4a <aiObserverUnbind+0x42>

  /* retrieve real handle */
  ai_mnetwork_get_private_handle(ctx->handle, &net_hdl, &pparams);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f107 0208 	add.w	r2, r7, #8
 8008a30:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8008a34:	4618      	mov	r0, r3
 8008a36:	f000 fdb5 	bl	80095a4 <ai_mnetwork_get_private_handle>

  /* un-register the call-back */
  ai_platform_observer_unregister_s(net_hdl, &obs_ctx->plt_ctx);
 8008a3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a3e:	3328      	adds	r3, #40	; 0x28
 8008a40:	4619      	mov	r1, r3
 8008a42:	4610      	mov	r0, r2
 8008a44:	f004 fc34 	bl	800d2b0 <ai_platform_observer_unregister_s>
#endif
  return 0;
 8008a48:	2300      	movs	r3, #0
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3740      	adds	r7, #64	; 0x40
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
	...

08008a54 <aiExecCtx>:
 * AI-related functions
 * -----------------------------------------------------------------------------
 */

static struct ai_network_exec_ctx *aiExecCtx(const char *nn_name, int pos)
{
 8008a54:	b590      	push	{r4, r7, lr}
 8008a56:	b085      	sub	sp, #20
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]
  struct ai_network_exec_ctx *cur = NULL;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	60fb      	str	r3, [r7, #12]

  if (!nn_name)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d101      	bne.n	8008a6c <aiExecCtx+0x18>
    return NULL;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	e052      	b.n	8008b12 <aiExecCtx+0xbe>

  if (!nn_name[0]) {
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d118      	bne.n	8008aa6 <aiExecCtx+0x52>
    if ((pos >= 0) && (pos < AI_MNETWORK_NUMBER) && net_exec_ctx[pos].handle)
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	db4a      	blt.n	8008b10 <aiExecCtx+0xbc>
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	dc47      	bgt.n	8008b10 <aiExecCtx+0xbc>
 8008a80:	4926      	ldr	r1, [pc, #152]	; (8008b1c <aiExecCtx+0xc8>)
 8008a82:	683a      	ldr	r2, [r7, #0]
 8008a84:	4613      	mov	r3, r2
 8008a86:	015b      	lsls	r3, r3, #5
 8008a88:	1a9b      	subs	r3, r3, r2
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	440b      	add	r3, r1
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d03d      	beq.n	8008b10 <aiExecCtx+0xbc>
      cur = &net_exec_ctx[pos];
 8008a94:	683a      	ldr	r2, [r7, #0]
 8008a96:	4613      	mov	r3, r2
 8008a98:	015b      	lsls	r3, r3, #5
 8008a9a:	1a9b      	subs	r3, r3, r2
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	4a1f      	ldr	r2, [pc, #124]	; (8008b1c <aiExecCtx+0xc8>)
 8008aa0:	4413      	add	r3, r2
 8008aa2:	60fb      	str	r3, [r7, #12]
 8008aa4:	e034      	b.n	8008b10 <aiExecCtx+0xbc>
  } else {
    int idx;
    for (idx=0; idx < AI_MNETWORK_NUMBER; idx++) {
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	60bb      	str	r3, [r7, #8]
 8008aaa:	e02c      	b.n	8008b06 <aiExecCtx+0xb2>
      cur = &net_exec_ctx[idx];
 8008aac:	68ba      	ldr	r2, [r7, #8]
 8008aae:	4613      	mov	r3, r2
 8008ab0:	015b      	lsls	r3, r3, #5
 8008ab2:	1a9b      	subs	r3, r3, r2
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	4a19      	ldr	r2, [pc, #100]	; (8008b1c <aiExecCtx+0xc8>)
 8008ab8:	4413      	add	r3, r2
 8008aba:	60fb      	str	r3, [r7, #12]
      if (cur->handle &&
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d01b      	beq.n	8008afc <aiExecCtx+0xa8>
          (strlen(cur->report.model_name) == strlen(nn_name)) &&
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f7f7 fb99 	bl	8000200 <strlen>
 8008ace:	4604      	mov	r4, r0
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f7f7 fb95 	bl	8000200 <strlen>
 8008ad6:	4603      	mov	r3, r0
      if (cur->handle &&
 8008ad8:	429c      	cmp	r4, r3
 8008ada:	d10f      	bne.n	8008afc <aiExecCtx+0xa8>
          (strncmp(cur->report.model_name, nn_name,
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	685c      	ldr	r4, [r3, #4]
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7f7 fb8b 	bl	8000200 <strlen>
 8008aea:	4603      	mov	r3, r0
 8008aec:	461a      	mov	r2, r3
 8008aee:	6879      	ldr	r1, [r7, #4]
 8008af0:	4620      	mov	r0, r4
 8008af2:	f006 fdb3 	bl	800f65c <strncmp>
 8008af6:	4603      	mov	r3, r0
          (strlen(cur->report.model_name) == strlen(nn_name)) &&
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d008      	beq.n	8008b0e <aiExecCtx+0xba>
              strlen(cur->report.model_name)) == 0)) {
        break;
      }
      cur = NULL;
 8008afc:	2300      	movs	r3, #0
 8008afe:	60fb      	str	r3, [r7, #12]
    for (idx=0; idx < AI_MNETWORK_NUMBER; idx++) {
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	3301      	adds	r3, #1
 8008b04:	60bb      	str	r3, [r7, #8]
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	ddcf      	ble.n	8008aac <aiExecCtx+0x58>
 8008b0c:	e000      	b.n	8008b10 <aiExecCtx+0xbc>
        break;
 8008b0e:	bf00      	nop
    }
  }
  return cur;
 8008b10:	68fb      	ldr	r3, [r7, #12]
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3714      	adds	r7, #20
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd90      	pop	{r4, r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	20000bc4 	.word	0x20000bc4

08008b20 <aiBootstrap>:

static int aiBootstrap(struct ai_network_exec_ctx *ctx, const char *nn_name)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b092      	sub	sp, #72	; 0x48
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  ai_error err;
  ai_u32 ext_addr;
  ai_u32 sz;

  /* Creating the instance of the  network ------------------------- */
  printf("Creating the network \"%s\"..\r\n", nn_name);
 8008b2a:	6839      	ldr	r1, [r7, #0]
 8008b2c:	484c      	ldr	r0, [pc, #304]	; (8008c60 <aiBootstrap+0x140>)
 8008b2e:	f006 fd09 	bl	800f544 <iprintf>

  err = ai_mnetwork_create(nn_name, &ctx->handle, NULL);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	4619      	mov	r1, r3
 8008b38:	6838      	ldr	r0, [r7, #0]
 8008b3a:	f000 fbfd 	bl	8009338 <ai_mnetwork_create>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	647b      	str	r3, [r7, #68]	; 0x44
  if (err.type) {
 8008b42:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d006      	beq.n	8008b58 <aiBootstrap+0x38>
    aiLogErr(err, "ai_mnetwork_create");
 8008b4a:	4946      	ldr	r1, [pc, #280]	; (8008c64 <aiBootstrap+0x144>)
 8008b4c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008b4e:	f7fe fdc7 	bl	80076e0 <aiLogErr>
    return -1;
 8008b52:	f04f 33ff 	mov.w	r3, #4294967295
 8008b56:	e07f      	b.n	8008c58 <aiBootstrap+0x138>
  }

  /* Initialize the instance --------------------------------------- */
  printf("Initializing the network\r\n");
 8008b58:	4843      	ldr	r0, [pc, #268]	; (8008c68 <aiBootstrap+0x148>)
 8008b5a:	f006 fd67 	bl	800f62c <puts>
   *   located in the external memory (network dependent feature). For the last case,
   *   the address (hard-coded @) is defined by the X-CUBE-AI plug-in and stored in the
   *   multiple network structure (see app_x-cube-ai.c file, ai_network_entry_t definition).
   *   0xFFFFFFFF indicates that the local buffer should be used.
   */
  ai_network_params params = {
 8008b5e:	f107 030c 	add.w	r3, r7, #12
 8008b62:	2230      	movs	r2, #48	; 0x30
 8008b64:	2100      	movs	r1, #0
 8008b66:	4618      	mov	r0, r3
 8008b68:	f006 fc3b 	bl	800f3e2 <memset>
 8008b6c:	4b3f      	ldr	r3, [pc, #252]	; (8008c6c <aiBootstrap+0x14c>)
 8008b6e:	60fb      	str	r3, [r7, #12]
 8008b70:	4b3e      	ldr	r3, [pc, #248]	; (8008c6c <aiBootstrap+0x14c>)
 8008b72:	627b      	str	r3, [r7, #36]	; 0x24
      AI_BUFFER_NULL(NULL),
      AI_BUFFER_NULL(NULL)
  };

  if (ai_mnetwork_get_ext_data_activations(ctx->handle, &ext_addr, &sz) == 0) {
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8008b7c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8008b80:	4618      	mov	r0, r3
 8008b82:	f000 fd3b 	bl	80095fc <ai_mnetwork_get_ext_data_activations>
 8008b86:	4603      	mov	r3, r0
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d11a      	bne.n	8008bc2 <aiBootstrap+0xa2>
    if (ext_addr == 0xFFFFFFFF) {
 8008b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b92:	d114      	bne.n	8008bbe <aiBootstrap+0x9e>
#if AI_MNETWORK_DATA_ACTIVATIONS_INT_SIZE != 0
      params.activations.data = (ai_handle)activations;
 8008b94:	4b36      	ldr	r3, [pc, #216]	; (8008c70 <aiBootstrap+0x150>)
 8008b96:	637b      	str	r3, [r7, #52]	; 0x34
      if (sz > AI_MNETWORK_DATA_ACTIVATIONS_INT_SIZE) {
 8008b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b9a:	f5b3 2f9c 	cmp.w	r3, #319488	; 0x4e000
 8008b9e:	d910      	bls.n	8008bc2 <aiBootstrap+0xa2>
        printf("E: APP error (aiBootstrap for %s) - size of the local activations buffer is not enough\r\n",
 8008ba0:	6839      	ldr	r1, [r7, #0]
 8008ba2:	4834      	ldr	r0, [pc, #208]	; (8008c74 <aiBootstrap+0x154>)
 8008ba4:	f006 fcce 	bl	800f544 <iprintf>
            nn_name);
        ai_mnetwork_destroy(ctx->handle);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4618      	mov	r0, r3
 8008bae:	f000 fc2f 	bl	8009410 <ai_mnetwork_destroy>
        ctx->handle = AI_HANDLE_NULL;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	601a      	str	r2, [r3, #0]
        return -5;
 8008bb8:	f06f 0304 	mvn.w	r3, #4
 8008bbc:	e04c      	b.n	8008c58 <aiBootstrap+0x138>
      ctx->handle = AI_HANDLE_NULL;
      return -5;
#endif
    }
    else {
      params.activations.data = (ai_handle)ext_addr;
 8008bbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bc0:	637b      	str	r3, [r7, #52]	; 0x34
    }
  }

  if (!ai_mnetwork_init(ctx->handle, &params)) {
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f107 020c 	add.w	r2, r7, #12
 8008bca:	4611      	mov	r1, r2
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f000 fc7c 	bl	80094ca <ai_mnetwork_init>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	f083 0301 	eor.w	r3, r3, #1
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d015      	beq.n	8008c0a <aiBootstrap+0xea>
    err = ai_mnetwork_get_error(ctx->handle);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4618      	mov	r0, r3
 8008be4:	f000 fc51 	bl	800948a <ai_mnetwork_get_error>
 8008be8:	4603      	mov	r3, r0
 8008bea:	647b      	str	r3, [r7, #68]	; 0x44
    aiLogErr(err, "ai_mnetwork_init");
 8008bec:	4922      	ldr	r1, [pc, #136]	; (8008c78 <aiBootstrap+0x158>)
 8008bee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008bf0:	f7fe fd76 	bl	80076e0 <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f000 fc09 	bl	8009410 <ai_mnetwork_destroy>
    ctx->handle = AI_HANDLE_NULL;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	601a      	str	r2, [r3, #0]
    return -4;
 8008c04:	f06f 0303 	mvn.w	r3, #3
 8008c08:	e026      	b.n	8008c58 <aiBootstrap+0x138>
  }

  /* Display the network info -------------------------------------- */
  if (ai_mnetwork_get_info(ctx->handle,
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	3304      	adds	r3, #4
 8008c12:	4619      	mov	r1, r3
 8008c14:	4610      	mov	r0, r2
 8008c16:	f000 fc1d 	bl	8009454 <ai_mnetwork_get_info>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d006      	beq.n	8008c2e <aiBootstrap+0x10e>
      &ctx->report)) {
    aiPrintNetworkInfo(&ctx->report);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	3304      	adds	r3, #4
 8008c24:	4618      	mov	r0, r3
 8008c26:	f7fe ff75 	bl	8007b14 <aiPrintNetworkInfo>
    ai_mnetwork_destroy(ctx->handle);
    ctx->handle = AI_HANDLE_NULL;
    return -2;
  }

  return 0;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	e014      	b.n	8008c58 <aiBootstrap+0x138>
    err = ai_mnetwork_get_error(ctx->handle);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4618      	mov	r0, r3
 8008c34:	f000 fc29 	bl	800948a <ai_mnetwork_get_error>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	647b      	str	r3, [r7, #68]	; 0x44
    aiLogErr(err, "ai_mnetwork_get_info");
 8008c3c:	490f      	ldr	r1, [pc, #60]	; (8008c7c <aiBootstrap+0x15c>)
 8008c3e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008c40:	f7fe fd4e 	bl	80076e0 <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f000 fbe1 	bl	8009410 <ai_mnetwork_destroy>
    ctx->handle = AI_HANDLE_NULL;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2200      	movs	r2, #0
 8008c52:	601a      	str	r2, [r3, #0]
    return -2;
 8008c54:	f06f 0301 	mvn.w	r3, #1
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3748      	adds	r7, #72	; 0x48
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	08010b8c 	.word	0x08010b8c
 8008c64:	08010bac 	.word	0x08010bac
 8008c68:	08010bc0 	.word	0x08010bc0
 8008c6c:	40000040 	.word	0x40000040
 8008c70:	20000c40 	.word	0x20000c40
 8008c74:	08010bdc 	.word	0x08010bdc
 8008c78:	08010c38 	.word	0x08010c38
 8008c7c:	08010c4c 	.word	0x08010c4c

08008c80 <aiInit>:

static int aiInit(void)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
  int res = -1;
 8008c86:	f04f 33ff 	mov.w	r3, #4294967295
 8008c8a:	60fb      	str	r3, [r7, #12]
  const char *nn_name;
  int idx;

  aiPlatformVersion();
 8008c8c:	f7fe fd14 	bl	80076b8 <aiPlatformVersion>

  /* Reset the contexts -------------------------------------------- */
  for (idx=0; idx < AI_MNETWORK_NUMBER; idx++) {
 8008c90:	2300      	movs	r3, #0
 8008c92:	607b      	str	r3, [r7, #4]
 8008c94:	e00b      	b.n	8008cae <aiInit+0x2e>
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8008c96:	491e      	ldr	r1, [pc, #120]	; (8008d10 <aiInit+0x90>)
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	015b      	lsls	r3, r3, #5
 8008c9e:	1a9b      	subs	r3, r3, r2
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	440b      	add	r3, r1
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	601a      	str	r2, [r3, #0]
  for (idx=0; idx < AI_MNETWORK_NUMBER; idx++) {
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	3301      	adds	r3, #1
 8008cac:	607b      	str	r3, [r7, #4]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	ddf0      	ble.n	8008c96 <aiInit+0x16>
  }

  /* Discover and initialize the network(s) ------------------------ */
  printf("Discovering the network(s)...\r\n");
 8008cb4:	4817      	ldr	r0, [pc, #92]	; (8008d14 <aiInit+0x94>)
 8008cb6:	f006 fcb9 	bl	800f62c <puts>

  idx = 0;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	607b      	str	r3, [r7, #4]
  do {
    nn_name = ai_mnetwork_find(NULL, idx);
 8008cbe:	6879      	ldr	r1, [r7, #4]
 8008cc0:	2000      	movs	r0, #0
 8008cc2:	f000 fb09 	bl	80092d8 <ai_mnetwork_find>
 8008cc6:	60b8      	str	r0, [r7, #8]
    if (nn_name) {
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d014      	beq.n	8008cf8 <aiInit+0x78>
      printf("\r\nFound network \"%s\"\r\n", nn_name);
 8008cce:	68b9      	ldr	r1, [r7, #8]
 8008cd0:	4811      	ldr	r0, [pc, #68]	; (8008d18 <aiInit+0x98>)
 8008cd2:	f006 fc37 	bl	800f544 <iprintf>
      res = aiBootstrap(&net_exec_ctx[idx], nn_name);
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	4613      	mov	r3, r2
 8008cda:	015b      	lsls	r3, r3, #5
 8008cdc:	1a9b      	subs	r3, r3, r2
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	4a0b      	ldr	r2, [pc, #44]	; (8008d10 <aiInit+0x90>)
 8008ce2:	4413      	add	r3, r2
 8008ce4:	68b9      	ldr	r1, [r7, #8]
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f7ff ff1a 	bl	8008b20 <aiBootstrap>
 8008cec:	60f8      	str	r0, [r7, #12]
      if (res)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d001      	beq.n	8008cf8 <aiInit+0x78>
        nn_name = NULL;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	60bb      	str	r3, [r7, #8]
    }
    idx++;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	607b      	str	r3, [r7, #4]
  } while (nn_name);
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d1dc      	bne.n	8008cbe <aiInit+0x3e>

  return res;
 8008d04:	68fb      	ldr	r3, [r7, #12]
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3710      	adds	r7, #16
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	20000bc4 	.word	0x20000bc4
 8008d14:	08010c64 	.word	0x08010c64
 8008d18:	08010c84 	.word	0x08010c84

08008d1c <aiPbCmdNNInfo>:
 * Specific test APP commands
 * -----------------------------------------------------------------------------
 */

void aiPbCmdNNInfo(const reqMsg *req, respMsg *resp, void *param)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b088      	sub	sp, #32
 8008d20:	af02      	add	r7, sp, #8
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	60b9      	str	r1, [r7, #8]
 8008d26:	607a      	str	r2, [r7, #4]
  struct ai_network_exec_ctx *ctx;

  UNUSED(param);

  ctx = aiExecCtx(req->name, req->param);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f103 020c 	add.w	r2, r3, #12
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	4619      	mov	r1, r3
 8008d34:	4610      	mov	r0, r2
 8008d36:	f7ff fe8d 	bl	8008a54 <aiExecCtx>
 8008d3a:	6178      	str	r0, [r7, #20]
  if (ctx)
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d007      	beq.n	8008d52 <aiPbCmdNNInfo+0x36>
    aiPbMgrSendNNInfo(req, resp, EnumState_S_IDLE,
        &ctx->report);
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	3304      	adds	r3, #4
    aiPbMgrSendNNInfo(req, resp, EnumState_S_IDLE,
 8008d46:	2200      	movs	r2, #0
 8008d48:	68b9      	ldr	r1, [r7, #8]
 8008d4a:	68f8      	ldr	r0, [r7, #12]
 8008d4c:	f7fe fbfc 	bl	8007548 <aiPbMgrSendNNInfo>
  else
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
        EnumError_E_INVALID_PARAM, EnumError_E_INVALID_PARAM);
}
 8008d50:	e007      	b.n	8008d62 <aiPbCmdNNInfo+0x46>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8008d52:	2304      	movs	r3, #4
 8008d54:	9300      	str	r3, [sp, #0]
 8008d56:	2304      	movs	r3, #4
 8008d58:	2204      	movs	r2, #4
 8008d5a:	68b9      	ldr	r1, [r7, #8]
 8008d5c:	68f8      	ldr	r0, [r7, #12]
 8008d5e:	f7fd ff53 	bl	8006c08 <aiPbMgrSendAck>
}
 8008d62:	bf00      	nop
 8008d64:	3718      	adds	r7, #24
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
	...

08008d6c <aiPbCmdNNRun>:

void aiPbCmdNNRun(const reqMsg *req, respMsg *resp, void *param)
{
 8008d6c:	b5b0      	push	{r4, r5, r7, lr}
 8008d6e:	b0a0      	sub	sp, #128	; 0x80
 8008d70:	af04      	add	r7, sp, #16
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	607a      	str	r2, [r7, #4]
  ai_buffer ai_output[AI_MNETWORK_OUT_NUM];

  UNUSED(param);

  /* 0 - Check if requested c-name model is available -------------- */
  ctx = aiExecCtx(req->name, -1);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	330c      	adds	r3, #12
 8008d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8008d80:	4618      	mov	r0, r3
 8008d82:	f7ff fe67 	bl	8008a54 <aiExecCtx>
 8008d86:	6578      	str	r0, [r7, #84]	; 0x54
  if (!ctx) {
 8008d88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d108      	bne.n	8008da0 <aiPbCmdNNRun+0x34>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8008d8e:	2304      	movs	r3, #4
 8008d90:	9300      	str	r3, [sp, #0]
 8008d92:	2304      	movs	r3, #4
 8008d94:	2204      	movs	r2, #4
 8008d96:	68b9      	ldr	r1, [r7, #8]
 8008d98:	68f8      	ldr	r0, [r7, #12]
 8008d9a:	f7fd ff35 	bl	8006c08 <aiPbMgrSendAck>
        EnumError_E_INVALID_PARAM, EnumError_E_INVALID_PARAM);
    return;
 8008d9e:	e187      	b.n	80090b0 <aiPbCmdNNRun+0x344>
  }

  aiObserverConfig(ctx, req);
 8008da0:	68f9      	ldr	r1, [r7, #12]
 8008da2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008da4:	f7ff fda4 	bl	80088f0 <aiObserverConfig>

  /* Fill the input tensor descriptors */
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 8008da8:	2300      	movs	r3, #0
 8008daa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008dac:	e053      	b.n	8008e56 <aiPbCmdNNRun+0xea>
    ai_input[i] = ctx->report.inputs[i];
 8008dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008db0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008db2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008db4:	4613      	mov	r3, r2
 8008db6:	005b      	lsls	r3, r3, #1
 8008db8:	4413      	add	r3, r2
 8008dba:	00db      	lsls	r3, r3, #3
 8008dbc:	4419      	add	r1, r3
 8008dbe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008dc0:	4613      	mov	r3, r2
 8008dc2:	005b      	lsls	r3, r3, #1
 8008dc4:	4413      	add	r3, r2
 8008dc6:	00db      	lsls	r3, r3, #3
 8008dc8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8008dcc:	4413      	add	r3, r2
 8008dce:	3b44      	subs	r3, #68	; 0x44
 8008dd0:	461c      	mov	r4, r3
 8008dd2:	460d      	mov	r5, r1
 8008dd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008dd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008dd8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008ddc:	e884 0003 	stmia.w	r4, {r0, r1}
    ai_input[i].n_batches  = 1;
 8008de0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008de2:	4613      	mov	r3, r2
 8008de4:	005b      	lsls	r3, r3, #1
 8008de6:	4413      	add	r3, r2
 8008de8:	00db      	lsls	r3, r3, #3
 8008dea:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8008dee:	4413      	add	r3, r2
 8008df0:	3b40      	subs	r3, #64	; 0x40
 8008df2:	2201      	movs	r2, #1
 8008df4:	801a      	strh	r2, [r3, #0]
    if (ctx->report.inputs[i].data)
 8008df6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008df8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008dfa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008dfc:	4613      	mov	r3, r2
 8008dfe:	005b      	lsls	r3, r3, #1
 8008e00:	4413      	add	r3, r2
 8008e02:	00db      	lsls	r3, r3, #3
 8008e04:	440b      	add	r3, r1
 8008e06:	691b      	ldr	r3, [r3, #16]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d013      	beq.n	8008e34 <aiPbCmdNNRun+0xc8>
      ai_input[i].data = AI_HANDLE_PTR(ctx->report.inputs[i].data);
 8008e0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e0e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008e10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008e12:	4613      	mov	r3, r2
 8008e14:	005b      	lsls	r3, r3, #1
 8008e16:	4413      	add	r3, r2
 8008e18:	00db      	lsls	r3, r3, #3
 8008e1a:	440b      	add	r3, r1
 8008e1c:	6919      	ldr	r1, [r3, #16]
 8008e1e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008e20:	4613      	mov	r3, r2
 8008e22:	005b      	lsls	r3, r3, #1
 8008e24:	4413      	add	r3, r2
 8008e26:	00db      	lsls	r3, r3, #3
 8008e28:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8008e2c:	4413      	add	r3, r2
 8008e2e:	3b34      	subs	r3, #52	; 0x34
 8008e30:	6019      	str	r1, [r3, #0]
 8008e32:	e00d      	b.n	8008e50 <aiPbCmdNNRun+0xe4>
    else
      ai_input[i].data = AI_HANDLE_PTR(data_ins[i]);
 8008e34:	4aa0      	ldr	r2, [pc, #640]	; (80090b8 <aiPbCmdNNRun+0x34c>)
 8008e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e38:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008e3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008e3e:	4613      	mov	r3, r2
 8008e40:	005b      	lsls	r3, r3, #1
 8008e42:	4413      	add	r3, r2
 8008e44:	00db      	lsls	r3, r3, #3
 8008e46:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8008e4a:	4413      	add	r3, r2
 8008e4c:	3b34      	subs	r3, #52	; 0x34
 8008e4e:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 8008e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e52:	3301      	adds	r3, #1
 8008e54:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e58:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	dba5      	blt.n	8008dae <aiPbCmdNNRun+0x42>
  }

  /* Fill the output tensor descriptors */
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8008e62:	2300      	movs	r3, #0
 8008e64:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e66:	e053      	b.n	8008f10 <aiPbCmdNNRun+0x1a4>
    ai_output[i] = ctx->report.outputs[i];
 8008e68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e6a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008e6c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e6e:	4613      	mov	r3, r2
 8008e70:	005b      	lsls	r3, r3, #1
 8008e72:	4413      	add	r3, r2
 8008e74:	00db      	lsls	r3, r3, #3
 8008e76:	4419      	add	r1, r3
 8008e78:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	005b      	lsls	r3, r3, #1
 8008e7e:	4413      	add	r3, r2
 8008e80:	00db      	lsls	r3, r3, #3
 8008e82:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8008e86:	4413      	add	r3, r2
 8008e88:	3b5c      	subs	r3, #92	; 0x5c
 8008e8a:	461c      	mov	r4, r3
 8008e8c:	460d      	mov	r5, r1
 8008e8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008e90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e92:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008e96:	e884 0003 	stmia.w	r4, {r0, r1}
    ai_output[i].n_batches = 1;
 8008e9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e9c:	4613      	mov	r3, r2
 8008e9e:	005b      	lsls	r3, r3, #1
 8008ea0:	4413      	add	r3, r2
 8008ea2:	00db      	lsls	r3, r3, #3
 8008ea4:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8008ea8:	4413      	add	r3, r2
 8008eaa:	3b58      	subs	r3, #88	; 0x58
 8008eac:	2201      	movs	r2, #1
 8008eae:	801a      	strh	r2, [r3, #0]
    if (ctx->report.outputs[i].data)
 8008eb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008eb2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008eb4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	005b      	lsls	r3, r3, #1
 8008eba:	4413      	add	r3, r2
 8008ebc:	00db      	lsls	r3, r3, #3
 8008ebe:	440b      	add	r3, r1
 8008ec0:	691b      	ldr	r3, [r3, #16]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d013      	beq.n	8008eee <aiPbCmdNNRun+0x182>
      ai_output[i].data = AI_HANDLE_PTR(ctx->report.outputs[i].data);
 8008ec6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ec8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008eca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008ecc:	4613      	mov	r3, r2
 8008ece:	005b      	lsls	r3, r3, #1
 8008ed0:	4413      	add	r3, r2
 8008ed2:	00db      	lsls	r3, r3, #3
 8008ed4:	440b      	add	r3, r1
 8008ed6:	6919      	ldr	r1, [r3, #16]
 8008ed8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008eda:	4613      	mov	r3, r2
 8008edc:	005b      	lsls	r3, r3, #1
 8008ede:	4413      	add	r3, r2
 8008ee0:	00db      	lsls	r3, r3, #3
 8008ee2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8008ee6:	4413      	add	r3, r2
 8008ee8:	3b4c      	subs	r3, #76	; 0x4c
 8008eea:	6019      	str	r1, [r3, #0]
 8008eec:	e00d      	b.n	8008f0a <aiPbCmdNNRun+0x19e>
    else
      ai_output[i].data = AI_HANDLE_PTR(data_outs[i]);
 8008eee:	4a73      	ldr	r2, [pc, #460]	; (80090bc <aiPbCmdNNRun+0x350>)
 8008ef0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ef2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008ef6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008ef8:	4613      	mov	r3, r2
 8008efa:	005b      	lsls	r3, r3, #1
 8008efc:	4413      	add	r3, r2
 8008efe:	00db      	lsls	r3, r3, #3
 8008f00:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8008f04:	4413      	add	r3, r2
 8008f06:	3b4c      	subs	r3, #76	; 0x4c
 8008f08:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8008f0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f14:	461a      	mov	r2, r3
 8008f16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	dba5      	blt.n	8008e68 <aiPbCmdNNRun+0xfc>
  }

  /* 1 - Send a ACK (ready to receive a tensor) -------------------- */
  aiPbMgrSendAck(req, resp, EnumState_S_WAITING,
 8008f1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008f20:	4618      	mov	r0, r3
 8008f22:	f7fd fea7 	bl	8006c74 <aiPbAiBufferSize>
 8008f26:	4602      	mov	r2, r0
 8008f28:	2300      	movs	r3, #0
 8008f2a:	9300      	str	r3, [sp, #0]
 8008f2c:	4613      	mov	r3, r2
 8008f2e:	2201      	movs	r2, #1
 8008f30:	68b9      	ldr	r1, [r7, #8]
 8008f32:	68f8      	ldr	r0, [r7, #12]
 8008f34:	f7fd fe68 	bl	8006c08 <aiPbMgrSendAck>
      aiPbAiBufferSize(&ai_input[0]), EnumError_E_NONE);

  /* 2 - Receive all input tensors --------------------------------- */
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 8008f38:	2300      	movs	r3, #0
 8008f3a:	667b      	str	r3, [r7, #100]	; 0x64
 8008f3c:	e027      	b.n	8008f8e <aiPbCmdNNRun+0x222>
    /* upload a buffer */
    EnumState state = EnumState_S_WAITING;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
    if ((i + 1) == ctx->report.n_inputs)
 8008f44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f46:	3301      	adds	r3, #1
 8008f48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f4a:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d102      	bne.n	8008f56 <aiPbCmdNNRun+0x1ea>
      state = EnumState_S_PROCESSING;
 8008f50:	2302      	movs	r3, #2
 8008f52:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
    res = aiPbMgrReceiveAiBuffer3(req, resp, state, &ai_input[i]);
 8008f56:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8008f5a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008f5c:	4613      	mov	r3, r2
 8008f5e:	005b      	lsls	r3, r3, #1
 8008f60:	4413      	add	r3, r2
 8008f62:	00db      	lsls	r3, r3, #3
 8008f64:	440b      	add	r3, r1
 8008f66:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8008f6a:	68b9      	ldr	r1, [r7, #8]
 8008f6c:	68f8      	ldr	r0, [r7, #12]
 8008f6e:	f7fd ff99 	bl	8006ea4 <aiPbMgrReceiveAiBuffer3>
 8008f72:	4603      	mov	r3, r0
 8008f74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (res != true)
 8008f78:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008f7c:	f083 0301 	eor.w	r3, r3, #1
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	f040 8093 	bne.w	80090ae <aiPbCmdNNRun+0x342>
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 8008f88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	667b      	str	r3, [r7, #100]	; 0x64
 8008f8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f90:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8008f92:	461a      	mov	r2, r3
 8008f94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f96:	4293      	cmp	r3, r2
 8008f98:	dbd1      	blt.n	8008f3e <aiPbCmdNNRun+0x1d2>
      return;
  }

  aiObserverBind(ctx, req, resp);
 8008f9a:	68ba      	ldr	r2, [r7, #8]
 8008f9c:	68f9      	ldr	r1, [r7, #12]
 8008f9e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008fa0:	f7ff fce6 	bl	8008970 <aiObserverBind>

  /* 3 - Processing ------------------------------------------------ */
  ints = disableInts();
 8008fa4:	f7ff faee 	bl	8008584 <disableInts>
 8008fa8:	6538      	str	r0, [r7, #80]	; 0x50

  dwtReset();
 8008faa:	f7ff fad3 	bl	8008554 <dwtReset>

  batch = ai_mnetwork_run(ctx->handle, ai_input, ai_output);
 8008fae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f107 0214 	add.w	r2, r7, #20
 8008fb6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f000 fad6 	bl	800956c <ai_mnetwork_run>
 8008fc0:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (batch != 1) {
 8008fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d012      	beq.n	8008fee <aiPbCmdNNRun+0x282>
    aiLogErr(ai_mnetwork_get_error(ctx->handle),
 8008fc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f000 fa5c 	bl	800948a <ai_mnetwork_get_error>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	493a      	ldr	r1, [pc, #232]	; (80090c0 <aiPbCmdNNRun+0x354>)
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7fe fb82 	bl	80076e0 <aiLogErr>
        "ai_mnetwork_run");
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8008fdc:	230a      	movs	r3, #10
 8008fde:	9300      	str	r3, [sp, #0]
 8008fe0:	230a      	movs	r3, #10
 8008fe2:	2204      	movs	r2, #4
 8008fe4:	68b9      	ldr	r1, [r7, #8]
 8008fe6:	68f8      	ldr	r0, [r7, #12]
 8008fe8:	f7fd fe0e 	bl	8006c08 <aiPbMgrSendAck>
        EnumError_E_GENERIC, EnumError_E_GENERIC);
    return;
 8008fec:	e060      	b.n	80090b0 <aiPbCmdNNRun+0x344>
  }
  tend = dwtGetCycles();
 8008fee:	f7ff fabd 	bl	800856c <dwtGetCycles>
 8008ff2:	64b8      	str	r0, [r7, #72]	; 0x48

  tend = aiObserverAdjustInferenceTime(ctx, tend);
 8008ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ff6:	f04f 0400 	mov.w	r4, #0
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	4623      	mov	r3, r4
 8008ffe:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009000:	f7ff fc1c 	bl	800883c <aiObserverAdjustInferenceTime>
 8009004:	4603      	mov	r3, r0
 8009006:	460c      	mov	r4, r1
 8009008:	64bb      	str	r3, [r7, #72]	; 0x48

  /* 4 - Send basic report (optional) ------------------------------ */
  aiObserverSendReport(req, resp, EnumState_S_PROCESSING, ctx,
 800900a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800900c:	f04f 0400 	mov.w	r4, #0
 8009010:	4618      	mov	r0, r3
 8009012:	4621      	mov	r1, r4
 8009014:	f7ff f862 	bl	80080dc <dwtCyclesToFloatMs>
 8009018:	eef0 7a40 	vmov.f32	s15, s0
 800901c:	eeb0 0a67 	vmov.f32	s0, s15
 8009020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009022:	2202      	movs	r2, #2
 8009024:	68b9      	ldr	r1, [r7, #8]
 8009026:	68f8      	ldr	r0, [r7, #12]
 8009028:	f7ff fc2d 	bl	8008886 <aiObserverSendReport>
      dwtCyclesToFloatMs(tend));

  /* 5 - Send all output tensors ----------------------------------- */
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 800902c:	2300      	movs	r3, #0
 800902e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009030:	e030      	b.n	8009094 <aiPbCmdNNRun+0x328>
    EnumState state = EnumState_S_PROCESSING;
 8009032:	2302      	movs	r3, #2
 8009034:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    if ((i + 1) == ctx->report.n_outputs)
 8009038:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800903a:	3301      	adds	r3, #1
 800903c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800903e:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 8009040:	4293      	cmp	r3, r2
 8009042:	d102      	bne.n	800904a <aiPbCmdNNRun+0x2de>
      state = EnumState_S_DONE;
 8009044:	2303      	movs	r3, #3
 8009046:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    aiPbMgrSendAiBuffer4(req, resp, state,
 800904a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800904c:	f04f 0400 	mov.w	r4, #0
 8009050:	4618      	mov	r0, r3
 8009052:	4621      	mov	r1, r4
 8009054:	f7ff f842 	bl	80080dc <dwtCyclesToFloatMs>
 8009058:	eef0 7a40 	vmov.f32	s15, s0
        EnumLayerType_LAYER_TYPE_OUTPUT << 16 | 0,
        0, dwtCyclesToFloatMs(tend),
        &ai_output[i], 0.0f, 0);
 800905c:	f107 0114 	add.w	r1, r7, #20
 8009060:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009062:	4613      	mov	r3, r2
 8009064:	005b      	lsls	r3, r3, #1
 8009066:	4413      	add	r3, r2
 8009068:	00db      	lsls	r3, r3, #3
 800906a:	440b      	add	r3, r1
    aiPbMgrSendAiBuffer4(req, resp, state,
 800906c:	f897 105b 	ldrb.w	r1, [r7, #91]	; 0x5b
 8009070:	2200      	movs	r2, #0
 8009072:	9202      	str	r2, [sp, #8]
 8009074:	9301      	str	r3, [sp, #4]
 8009076:	2300      	movs	r3, #0
 8009078:	9300      	str	r3, [sp, #0]
 800907a:	eddf 0a12 	vldr	s1, [pc, #72]	; 80090c4 <aiPbCmdNNRun+0x358>
 800907e:	eeb0 0a67 	vmov.f32	s0, s15
 8009082:	2300      	movs	r3, #0
 8009084:	460a      	mov	r2, r1
 8009086:	68b9      	ldr	r1, [r7, #8]
 8009088:	68f8      	ldr	r0, [r7, #12]
 800908a:	f7fe f897 	bl	80071bc <aiPbMgrSendAiBuffer4>
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 800908e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009090:	3301      	adds	r3, #1
 8009092:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009094:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009096:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009098:	461a      	mov	r2, r3
 800909a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800909c:	4293      	cmp	r3, r2
 800909e:	dbc8      	blt.n	8009032 <aiPbCmdNNRun+0x2c6>
  }

  restoreInts(ints);
 80090a0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80090a2:	f7ff fa7f 	bl	80085a4 <restoreInts>
  aiObserverUnbind(ctx);
 80090a6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80090a8:	f7ff fcae 	bl	8008a08 <aiObserverUnbind>
 80090ac:	e000      	b.n	80090b0 <aiPbCmdNNRun+0x344>
      return;
 80090ae:	bf00      	nop
}
 80090b0:	3770      	adds	r7, #112	; 0x70
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bdb0      	pop	{r4, r5, r7, pc}
 80090b6:	bf00      	nop
 80090b8:	20000154 	.word	0x20000154
 80090bc:	20000158 	.word	0x20000158
 80090c0:	08010cd0 	.word	0x08010cd0
 80090c4:	00000000 	.word	0x00000000

080090c8 <aiValidationInit>:
 * Exported/Public functions
 * -----------------------------------------------------------------------------
 */

int aiValidationInit(void)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	af00      	add	r7, sp, #0
  printf("\r\n#\r\n");
 80090cc:	4808      	ldr	r0, [pc, #32]	; (80090f0 <aiValidationInit+0x28>)
 80090ce:	f006 faad 	bl	800f62c <puts>
  printf("# %s %d.%d\r\n", _APP_NAME_ , _APP_VERSION_MAJOR_, _APP_VERSION_MINOR_);
 80090d2:	2300      	movs	r3, #0
 80090d4:	2205      	movs	r2, #5
 80090d6:	4907      	ldr	r1, [pc, #28]	; (80090f4 <aiValidationInit+0x2c>)
 80090d8:	4807      	ldr	r0, [pc, #28]	; (80090f8 <aiValidationInit+0x30>)
 80090da:	f006 fa33 	bl	800f544 <iprintf>
  printf("#\r\n");
 80090de:	4807      	ldr	r0, [pc, #28]	; (80090fc <aiValidationInit+0x34>)
 80090e0:	f006 faa4 	bl	800f62c <puts>

  systemSettingLog();
 80090e4:	f7ff f95e 	bl	80083a4 <systemSettingLog>

  return 0;
 80090e8:	2300      	movs	r3, #0
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	08010ce0 	.word	0x08010ce0
 80090f4:	08010ce8 	.word	0x08010ce8
 80090f8:	08010d08 	.word	0x08010d08
 80090fc:	08010d18 	.word	0x08010d18

08009100 <aiValidationProcess>:

int aiValidationProcess(void)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
  int r;

  r = aiInit();
 8009106:	f7ff fdbb 	bl	8008c80 <aiInit>
 800910a:	6078      	str	r0, [r7, #4]
  if (r) {
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d009      	beq.n	8009126 <aiValidationProcess+0x26>
    printf("\r\nE:  aiInit() r=%d\r\n", r);
 8009112:	6879      	ldr	r1, [r7, #4]
 8009114:	4818      	ldr	r0, [pc, #96]	; (8009178 <aiValidationProcess+0x78>)
 8009116:	f006 fa15 	bl	800f544 <iprintf>
    HAL_Delay(2000);
 800911a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800911e:	f7f8 f9e9 	bl	80014f4 <HAL_Delay>
    return r;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	e023      	b.n	800916e <aiValidationProcess+0x6e>
  } else {
    printf("\r\n");
 8009126:	4815      	ldr	r0, [pc, #84]	; (800917c <aiValidationProcess+0x7c>)
 8009128:	f006 fa80 	bl	800f62c <puts>
    printf("-------------------------------------------\r\n");
 800912c:	4814      	ldr	r0, [pc, #80]	; (8009180 <aiValidationProcess+0x80>)
 800912e:	f006 fa7d 	bl	800f62c <puts>
    printf("| READY to receive a CMD from the HOST... |\r\n");
 8009132:	4814      	ldr	r0, [pc, #80]	; (8009184 <aiValidationProcess+0x84>)
 8009134:	f006 fa7a 	bl	800f62c <puts>
    printf("-------------------------------------------\r\n");
 8009138:	4811      	ldr	r0, [pc, #68]	; (8009180 <aiValidationProcess+0x80>)
 800913a:	f006 fa77 	bl	800f62c <puts>
    printf("\r\n");
 800913e:	480f      	ldr	r0, [pc, #60]	; (800917c <aiValidationProcess+0x7c>)
 8009140:	f006 fa74 	bl	800f62c <puts>
    printf("# Note: At this point, default ASCII-base terminal should be closed\r\n");
 8009144:	4810      	ldr	r0, [pc, #64]	; (8009188 <aiValidationProcess+0x88>)
 8009146:	f006 fa71 	bl	800f62c <puts>
    printf("# and a stm32com-base interface should be used\r\n");
 800914a:	4810      	ldr	r0, [pc, #64]	; (800918c <aiValidationProcess+0x8c>)
 800914c:	f006 fa6e 	bl	800f62c <puts>
    printf("# (i.e. Python stm32com module). Protocol version = %d.%d\r\n",
 8009150:	2201      	movs	r2, #1
 8009152:	2102      	movs	r1, #2
 8009154:	480e      	ldr	r0, [pc, #56]	; (8009190 <aiValidationProcess+0x90>)
 8009156:	f006 f9f5 	bl	800f544 <iprintf>
        EnumVersion_P_VERSION_MAJOR,
        EnumVersion_P_VERSION_MINOR);
  }

  aiPbMgrInit(pbCmdFuncTab);
 800915a:	480e      	ldr	r0, [pc, #56]	; (8009194 <aiValidationProcess+0x94>)
 800915c:	f7fd fcaa 	bl	8006ab4 <aiPbMgrInit>

  do {
    r = aiPbMgrWaitAndProcess();
 8009160:	f7fd fce6 	bl	8006b30 <aiPbMgrWaitAndProcess>
 8009164:	6078      	str	r0, [r7, #4]
  } while (r==0);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d0f9      	beq.n	8009160 <aiValidationProcess+0x60>

  return r;
 800916c:	687b      	ldr	r3, [r7, #4]
}
 800916e:	4618      	mov	r0, r3
 8009170:	3708      	adds	r7, #8
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	08010d1c 	.word	0x08010d1c
 800917c:	08010d34 	.word	0x08010d34
 8009180:	08010d38 	.word	0x08010d38
 8009184:	08010d68 	.word	0x08010d68
 8009188:	08010d98 	.word	0x08010d98
 800918c:	08010de0 	.word	0x08010de0
 8009190:	08010e10 	.word	0x08010e10
 8009194:	2000015c 	.word	0x2000015c

08009198 <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	af00      	add	r7, sp, #0
    MX_UARTx_Init();
 800919c:	f7f7 fdf8 	bl	8000d90 <MX_USART1_UART_Init>
    aiValidationInit();
 80091a0:	f7ff ff92 	bl	80090c8 <aiValidationInit>
    /* USER CODE BEGIN 3 */
    /* USER CODE END 3 */
}
 80091a4:	bf00      	nop
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	af00      	add	r7, sp, #0
    aiValidationProcess();
 80091ac:	f7ff ffa8 	bl	8009100 <aiValidationProcess>
    /* USER CODE BEGIN 4 */
    /* USER CODE END 4 */
}
 80091b0:	bf00      	nop
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <ai_mnetwork_is_valid>:
AI_STATIC struct network_instance gnetworks[AI_MNETWORK_NUMBER] = {0};

AI_DECLARE_STATIC
ai_bool ai_mnetwork_is_valid(const char* name,
        const ai_network_entry_t *entry)
{
 80091b4:	b590      	push	{r4, r7, lr}
 80091b6:	b083      	sub	sp, #12
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
    if (name && (strlen(entry->name) == strlen(name)) &&
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d01d      	beq.n	8009200 <ai_mnetwork_is_valid+0x4c>
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4618      	mov	r0, r3
 80091ca:	f7f7 f819 	bl	8000200 <strlen>
 80091ce:	4604      	mov	r4, r0
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f7f7 f815 	bl	8000200 <strlen>
 80091d6:	4603      	mov	r3, r0
 80091d8:	429c      	cmp	r4, r3
 80091da:	d111      	bne.n	8009200 <ai_mnetwork_is_valid+0x4c>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	681c      	ldr	r4, [r3, #0]
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4618      	mov	r0, r3
 80091e6:	f7f7 f80b 	bl	8000200 <strlen>
 80091ea:	4603      	mov	r3, r0
 80091ec:	461a      	mov	r2, r3
 80091ee:	6879      	ldr	r1, [r7, #4]
 80091f0:	4620      	mov	r0, r4
 80091f2:	f006 fa33 	bl	800f65c <strncmp>
 80091f6:	4603      	mov	r3, r0
    if (name && (strlen(entry->name) == strlen(name)) &&
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d101      	bne.n	8009200 <ai_mnetwork_is_valid+0x4c>
        return true;
 80091fc:	2301      	movs	r3, #1
 80091fe:	e000      	b.n	8009202 <ai_mnetwork_is_valid+0x4e>
    return false;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	370c      	adds	r7, #12
 8009206:	46bd      	mov	sp, r7
 8009208:	bd90      	pop	{r4, r7, pc}
	...

0800920c <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
 800920c:	b480      	push	{r7}
 800920e:	b085      	sub	sp, #20
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8009214:	2300      	movs	r3, #0
 8009216:	60fb      	str	r3, [r7, #12]
 8009218:	e026      	b.n	8009268 <ai_mnetwork_handle+0x5c>
        if ((inst) && (&gnetworks[i] == inst))
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d00b      	beq.n	8009238 <ai_mnetwork_handle+0x2c>
 8009220:	68fa      	ldr	r2, [r7, #12]
 8009222:	4613      	mov	r3, r2
 8009224:	00db      	lsls	r3, r3, #3
 8009226:	1a9b      	subs	r3, r3, r2
 8009228:	00db      	lsls	r3, r3, #3
 800922a:	4a14      	ldr	r2, [pc, #80]	; (800927c <ai_mnetwork_handle+0x70>)
 800922c:	4413      	add	r3, r2
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	429a      	cmp	r2, r3
 8009232:	d101      	bne.n	8009238 <ai_mnetwork_handle+0x2c>
            return inst;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	e01b      	b.n	8009270 <ai_mnetwork_handle+0x64>
        else if ((!inst) && (gnetworks[i].entry == NULL))
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d111      	bne.n	8009262 <ai_mnetwork_handle+0x56>
 800923e:	490f      	ldr	r1, [pc, #60]	; (800927c <ai_mnetwork_handle+0x70>)
 8009240:	68fa      	ldr	r2, [r7, #12]
 8009242:	4613      	mov	r3, r2
 8009244:	00db      	lsls	r3, r3, #3
 8009246:	1a9b      	subs	r3, r3, r2
 8009248:	00db      	lsls	r3, r3, #3
 800924a:	440b      	add	r3, r1
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d107      	bne.n	8009262 <ai_mnetwork_handle+0x56>
            return &gnetworks[i];
 8009252:	68fa      	ldr	r2, [r7, #12]
 8009254:	4613      	mov	r3, r2
 8009256:	00db      	lsls	r3, r3, #3
 8009258:	1a9b      	subs	r3, r3, r2
 800925a:	00db      	lsls	r3, r3, #3
 800925c:	4a07      	ldr	r2, [pc, #28]	; (800927c <ai_mnetwork_handle+0x70>)
 800925e:	4413      	add	r3, r2
 8009260:	e006      	b.n	8009270 <ai_mnetwork_handle+0x64>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	3301      	adds	r3, #1
 8009266:	60fb      	str	r3, [r7, #12]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2b00      	cmp	r3, #0
 800926c:	ddd5      	ble.n	800921a <ai_mnetwork_handle+0xe>
    }
    return NULL;
 800926e:	2300      	movs	r3, #0
}
 8009270:	4618      	mov	r0, r3
 8009272:	3714      	adds	r7, #20
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr
 800927c:	2004ec40 	.word	0x2004ec40

08009280 <ai_mnetwork_release_handle>:

AI_DECLARE_STATIC
void ai_mnetwork_release_handle(struct network_instance *inst)
{
 8009280:	b480      	push	{r7}
 8009282:	b085      	sub	sp, #20
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8009288:	2300      	movs	r3, #0
 800928a:	60fb      	str	r3, [r7, #12]
 800928c:	e019      	b.n	80092c2 <ai_mnetwork_release_handle+0x42>
        if ((inst) && (&gnetworks[i] == inst)) {
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d013      	beq.n	80092bc <ai_mnetwork_release_handle+0x3c>
 8009294:	68fa      	ldr	r2, [r7, #12]
 8009296:	4613      	mov	r3, r2
 8009298:	00db      	lsls	r3, r3, #3
 800929a:	1a9b      	subs	r3, r3, r2
 800929c:	00db      	lsls	r3, r3, #3
 800929e:	4a0d      	ldr	r2, [pc, #52]	; (80092d4 <ai_mnetwork_release_handle+0x54>)
 80092a0:	4413      	add	r3, r2
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d109      	bne.n	80092bc <ai_mnetwork_release_handle+0x3c>
            gnetworks[i].entry = NULL;
 80092a8:	490a      	ldr	r1, [pc, #40]	; (80092d4 <ai_mnetwork_release_handle+0x54>)
 80092aa:	68fa      	ldr	r2, [r7, #12]
 80092ac:	4613      	mov	r3, r2
 80092ae:	00db      	lsls	r3, r3, #3
 80092b0:	1a9b      	subs	r3, r3, r2
 80092b2:	00db      	lsls	r3, r3, #3
 80092b4:	440b      	add	r3, r1
 80092b6:	2200      	movs	r2, #0
 80092b8:	601a      	str	r2, [r3, #0]
            return;
 80092ba:	e005      	b.n	80092c8 <ai_mnetwork_release_handle+0x48>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	3301      	adds	r3, #1
 80092c0:	60fb      	str	r3, [r7, #12]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	dde2      	ble.n	800928e <ai_mnetwork_release_handle+0xe>
        }
    }
}
 80092c8:	3714      	adds	r7, #20
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr
 80092d2:	bf00      	nop
 80092d4:	2004ec40 	.word	0x2004ec40

080092d8 <ai_mnetwork_find>:

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	6039      	str	r1, [r7, #0]
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 80092e2:	2300      	movs	r3, #0
 80092e4:	60fb      	str	r3, [r7, #12]
 80092e6:	e01c      	b.n	8009322 <ai_mnetwork_find+0x4a>
        entry = &networks[i];
 80092e8:	68fa      	ldr	r2, [r7, #12]
 80092ea:	4613      	mov	r3, r2
 80092ec:	005b      	lsls	r3, r3, #1
 80092ee:	4413      	add	r3, r2
 80092f0:	015b      	lsls	r3, r3, #5
 80092f2:	4a10      	ldr	r2, [pc, #64]	; (8009334 <ai_mnetwork_find+0x5c>)
 80092f4:	4413      	add	r3, r2
 80092f6:	60bb      	str	r3, [r7, #8]
        if (ai_mnetwork_is_valid(name, entry))
 80092f8:	68b9      	ldr	r1, [r7, #8]
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f7ff ff5a 	bl	80091b4 <ai_mnetwork_is_valid>
 8009300:	4603      	mov	r3, r0
 8009302:	2b00      	cmp	r3, #0
 8009304:	d002      	beq.n	800930c <ai_mnetwork_find+0x34>
            return entry->name;
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	e00e      	b.n	800932a <ai_mnetwork_find+0x52>
        else {
            if (!idx--)
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	1e5a      	subs	r2, r3, #1
 8009310:	603a      	str	r2, [r7, #0]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d102      	bne.n	800931c <ai_mnetwork_find+0x44>
                return entry->name;
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	e006      	b.n	800932a <ai_mnetwork_find+0x52>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	3301      	adds	r3, #1
 8009320:	60fb      	str	r3, [r7, #12]
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2b00      	cmp	r3, #0
 8009326:	dddf      	ble.n	80092e8 <ai_mnetwork_find+0x10>
        }
    }
    return NULL;
 8009328:	2300      	movs	r3, #0
}
 800932a:	4618      	mov	r0, r3
 800932c:	3710      	adds	r7, #16
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	0801117c 	.word	0x0801117c

08009338 <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b08a      	sub	sp, #40	; 0x28
 800933c:	af00      	add	r7, sp, #0
 800933e:	60f8      	str	r0, [r7, #12]
 8009340:	60b9      	str	r1, [r7, #8]
 8009342:	607a      	str	r2, [r7, #4]
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
 8009344:	2300      	movs	r3, #0
 8009346:	627b      	str	r3, [r7, #36]	; 0x24
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8009348:	2000      	movs	r0, #0
 800934a:	f7ff ff5f 	bl	800920c <ai_mnetwork_handle>
 800934e:	61f8      	str	r0, [r7, #28]

    if (!inst) {
 8009350:	69fb      	ldr	r3, [r7, #28]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d108      	bne.n	8009368 <ai_mnetwork_create+0x30>
        err.type = AI_ERROR_ALLOCATION_FAILED;
 8009356:	2331      	movs	r3, #49	; 0x31
 8009358:	753b      	strb	r3, [r7, #20]
        err.code = AI_ERROR_CODE_NETWORK;
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	2210      	movs	r2, #16
 800935e:	f362 231f 	bfi	r3, r2, #8, #24
 8009362:	617b      	str	r3, [r7, #20]
        return err;
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	e04d      	b.n	8009404 <ai_mnetwork_create+0xcc>
    }

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8009368:	2300      	movs	r3, #0
 800936a:	623b      	str	r3, [r7, #32]
 800936c:	e014      	b.n	8009398 <ai_mnetwork_create+0x60>
        entry = &networks[i];
 800936e:	6a3a      	ldr	r2, [r7, #32]
 8009370:	4613      	mov	r3, r2
 8009372:	005b      	lsls	r3, r3, #1
 8009374:	4413      	add	r3, r2
 8009376:	015b      	lsls	r3, r3, #5
 8009378:	4a24      	ldr	r2, [pc, #144]	; (800940c <ai_mnetwork_create+0xd4>)
 800937a:	4413      	add	r3, r2
 800937c:	61bb      	str	r3, [r7, #24]
        if (ai_mnetwork_is_valid(name, entry)) {
 800937e:	69b9      	ldr	r1, [r7, #24]
 8009380:	68f8      	ldr	r0, [r7, #12]
 8009382:	f7ff ff17 	bl	80091b4 <ai_mnetwork_is_valid>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d002      	beq.n	8009392 <ai_mnetwork_create+0x5a>
            found = entry;
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009390:	e005      	b.n	800939e <ai_mnetwork_create+0x66>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8009392:	6a3b      	ldr	r3, [r7, #32]
 8009394:	3301      	adds	r3, #1
 8009396:	623b      	str	r3, [r7, #32]
 8009398:	6a3b      	ldr	r3, [r7, #32]
 800939a:	2b00      	cmp	r3, #0
 800939c:	dde7      	ble.n	800936e <ai_mnetwork_create+0x36>
        }
    }

    if (!found) {
 800939e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d108      	bne.n	80093b6 <ai_mnetwork_create+0x7e>
        err.type = AI_ERROR_INVALID_PARAM;
 80093a4:	2314      	movs	r3, #20
 80093a6:	753b      	strb	r3, [r7, #20]
        err.code = AI_ERROR_CODE_NETWORK;
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	2210      	movs	r2, #16
 80093ac:	f362 231f 	bfi	r3, r2, #8, #24
 80093b0:	617b      	str	r3, [r7, #20]
        return err;
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	e026      	b.n	8009404 <ai_mnetwork_create+0xcc>
    }

    if (network_config == NULL)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d109      	bne.n	80093d0 <ai_mnetwork_create+0x98>
        err = found->ai_create(network, found->config);
 80093bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80093c4:	4611      	mov	r1, r2
 80093c6:	68b8      	ldr	r0, [r7, #8]
 80093c8:	4798      	blx	r3
 80093ca:	4603      	mov	r3, r0
 80093cc:	617b      	str	r3, [r7, #20]
 80093ce:	e006      	b.n	80093de <ai_mnetwork_create+0xa6>
    else
        err = found->ai_create(network, network_config);
 80093d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d4:	6879      	ldr	r1, [r7, #4]
 80093d6:	68b8      	ldr	r0, [r7, #8]
 80093d8:	4798      	blx	r3
 80093da:	4603      	mov	r3, r0
 80093dc:	617b      	str	r3, [r7, #20]
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d10c      	bne.n	8009402 <ai_mnetwork_create+0xca>
 80093e8:	7d3b      	ldrb	r3, [r7, #20]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d109      	bne.n	8009402 <ai_mnetwork_create+0xca>
        inst->entry = found;
 80093ee:	69fb      	ldr	r3, [r7, #28]
 80093f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093f2:	601a      	str	r2, [r3, #0]
        inst->handle = *network;
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	681a      	ldr	r2, [r3, #0]
 80093f8:	69fb      	ldr	r3, [r7, #28]
 80093fa:	605a      	str	r2, [r3, #4]
        *network = (ai_handle*)inst;
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	69fa      	ldr	r2, [r7, #28]
 8009400:	601a      	str	r2, [r3, #0]
    }

    return err;
 8009402:	697b      	ldr	r3, [r7, #20]
}
 8009404:	4618      	mov	r0, r3
 8009406:	3728      	adds	r7, #40	; 0x28
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}
 800940c:	0801117c 	.word	0x0801117c

08009410 <ai_mnetwork_destroy>:

AI_API_ENTRY
ai_handle ai_mnetwork_destroy(ai_handle network)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f7ff fef7 	bl	800920c <ai_mnetwork_handle>
 800941e:	60f8      	str	r0, [r7, #12]
    if (inn) {
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d011      	beq.n	800944a <ai_mnetwork_destroy+0x3a>
        ai_handle hdl = inn->entry->ai_destroy(inn->handle);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800942c:	68fa      	ldr	r2, [r7, #12]
 800942e:	6852      	ldr	r2, [r2, #4]
 8009430:	4610      	mov	r0, r2
 8009432:	4798      	blx	r3
 8009434:	60b8      	str	r0, [r7, #8]
        if (hdl != inn->handle) {
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	68ba      	ldr	r2, [r7, #8]
 800943c:	429a      	cmp	r2, r3
 800943e:	d004      	beq.n	800944a <ai_mnetwork_destroy+0x3a>
            ai_mnetwork_release_handle(inn);
 8009440:	68f8      	ldr	r0, [r7, #12]
 8009442:	f7ff ff1d 	bl	8009280 <ai_mnetwork_release_handle>
            network = AI_HANDLE_NULL;
 8009446:	2300      	movs	r3, #0
 8009448:	607b      	str	r3, [r7, #4]
        }
    }
    return network;
 800944a:	687b      	ldr	r3, [r7, #4]
}
 800944c:	4618      	mov	r0, r3
 800944e:	3710      	adds	r7, #16
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <ai_mnetwork_get_info>:

AI_API_ENTRY
ai_bool ai_mnetwork_get_info(ai_handle network, ai_network_report* report)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f7ff fed4 	bl	800920c <ai_mnetwork_handle>
 8009464:	60f8      	str	r0, [r7, #12]
    if (inn)
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d009      	beq.n	8009480 <ai_mnetwork_get_info+0x2c>
        return inn->entry->ai_get_info(inn->handle, report);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009472:	68fa      	ldr	r2, [r7, #12]
 8009474:	6852      	ldr	r2, [r2, #4]
 8009476:	6839      	ldr	r1, [r7, #0]
 8009478:	4610      	mov	r0, r2
 800947a:	4798      	blx	r3
 800947c:	4603      	mov	r3, r0
 800947e:	e000      	b.n	8009482 <ai_mnetwork_get_info+0x2e>
    else
        return false;
 8009480:	2300      	movs	r3, #0
}
 8009482:	4618      	mov	r0, r3
 8009484:	3710      	adds	r7, #16
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}

0800948a <ai_mnetwork_get_error>:

AI_API_ENTRY
ai_error ai_mnetwork_get_error(ai_handle network)
{
 800948a:	b580      	push	{r7, lr}
 800948c:	b084      	sub	sp, #16
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
    struct network_instance *inn;
    ai_error err;
    err.type = AI_ERROR_INVALID_PARAM;
 8009492:	2314      	movs	r3, #20
 8009494:	723b      	strb	r3, [r7, #8]
    err.code = AI_ERROR_CODE_NETWORK;
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	2210      	movs	r2, #16
 800949a:	f362 231f 	bfi	r3, r2, #8, #24
 800949e:	60bb      	str	r3, [r7, #8]

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f7ff feb3 	bl	800920c <ai_mnetwork_handle>
 80094a6:	60f8      	str	r0, [r7, #12]
    if (inn)
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d008      	beq.n	80094c0 <ai_mnetwork_get_error+0x36>
        return inn->entry->ai_get_error(inn->handle);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094b4:	68fa      	ldr	r2, [r7, #12]
 80094b6:	6852      	ldr	r2, [r2, #4]
 80094b8:	4610      	mov	r0, r2
 80094ba:	4798      	blx	r3
 80094bc:	4603      	mov	r3, r0
 80094be:	e000      	b.n	80094c2 <ai_mnetwork_get_error+0x38>
    else
        return err;
 80094c0:	68bb      	ldr	r3, [r7, #8]
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3710      	adds	r7, #16
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}

080094ca <ai_mnetwork_init>:

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network, const ai_network_params* params)
{
 80094ca:	b5b0      	push	{r4, r5, r7, lr}
 80094cc:	b090      	sub	sp, #64	; 0x40
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
 80094d2:	6039      	str	r1, [r7, #0]
    struct network_instance *inn;
    ai_network_params par;

    /* TODO: adding check ai_buffer activations/weights shape coherence */

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f7ff fe99 	bl	800920c <ai_mnetwork_handle>
 80094da:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (inn) {
 80094dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d03f      	beq.n	8009562 <ai_mnetwork_init+0x98>
        par = inn->entry->params;
 80094e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f107 040c 	add.w	r4, r7, #12
 80094ea:	1d1d      	adds	r5, r3, #4
 80094ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80094ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80094f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80094f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80094f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80094f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (params->activations.n_batches)
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	8b9b      	ldrh	r3, [r3, #28]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d00b      	beq.n	800951c <ai_mnetwork_init+0x52>
            par.activations = params->activations;
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800950a:	f103 0518 	add.w	r5, r3, #24
 800950e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009510:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009512:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009516:	e884 0003 	stmia.w	r4, {r0, r1}
 800951a:	e002      	b.n	8009522 <ai_mnetwork_init+0x58>
        else
            par.activations.data = params->activations.data;
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009520:	637b      	str	r3, [r7, #52]	; 0x34
        if (params->params.n_batches)
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	889b      	ldrh	r3, [r3, #4]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d00a      	beq.n	8009540 <ai_mnetwork_init+0x76>
            par.params = params->params;
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	f107 040c 	add.w	r4, r7, #12
 8009530:	461d      	mov	r5, r3
 8009532:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009534:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009536:	e895 0003 	ldmia.w	r5, {r0, r1}
 800953a:	e884 0003 	stmia.w	r4, {r0, r1}
 800953e:	e005      	b.n	800954c <ai_mnetwork_init+0x82>
        else
            par.params.data = inn->entry->ai_data_weights_get_default();
 8009540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009546:	4798      	blx	r3
 8009548:	4603      	mov	r3, r0
 800954a:	61fb      	str	r3, [r7, #28]
        return inn->entry->ai_init(inn->handle, &par);
 800954c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009552:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009554:	6852      	ldr	r2, [r2, #4]
 8009556:	f107 010c 	add.w	r1, r7, #12
 800955a:	4610      	mov	r0, r2
 800955c:	4798      	blx	r3
 800955e:	4603      	mov	r3, r0
 8009560:	e000      	b.n	8009564 <ai_mnetwork_init+0x9a>
    }
    else
        return false;
 8009562:	2300      	movs	r3, #0
}
 8009564:	4618      	mov	r0, r3
 8009566:	3740      	adds	r7, #64	; 0x40
 8009568:	46bd      	mov	sp, r7
 800956a:	bdb0      	pop	{r4, r5, r7, pc}

0800956c <ai_mnetwork_run>:

AI_API_ENTRY
ai_i32 ai_mnetwork_run(ai_handle network, const ai_buffer* input,
        ai_buffer* output)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b086      	sub	sp, #24
 8009570:	af00      	add	r7, sp, #0
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	607a      	str	r2, [r7, #4]
    struct network_instance* inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8009578:	68f8      	ldr	r0, [r7, #12]
 800957a:	f7ff fe47 	bl	800920c <ai_mnetwork_handle>
 800957e:	6178      	str	r0, [r7, #20]
    if (inn)
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d009      	beq.n	800959a <ai_mnetwork_run+0x2e>
        return inn->entry->ai_run(inn->handle, input, output);
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800958c:	697a      	ldr	r2, [r7, #20]
 800958e:	6850      	ldr	r0, [r2, #4]
 8009590:	687a      	ldr	r2, [r7, #4]
 8009592:	68b9      	ldr	r1, [r7, #8]
 8009594:	4798      	blx	r3
 8009596:	4603      	mov	r3, r0
 8009598:	e000      	b.n	800959c <ai_mnetwork_run+0x30>
    else
        return 0;
 800959a:	2300      	movs	r3, #0
}
 800959c:	4618      	mov	r0, r3
 800959e:	3718      	adds	r7, #24
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <ai_mnetwork_get_private_handle>:

AI_API_ENTRY
 int ai_mnetwork_get_private_handle(ai_handle network,
         ai_handle *phandle,
         ai_network_params *pparams)
 {
 80095a4:	b5b0      	push	{r4, r5, r7, lr}
 80095a6:	b086      	sub	sp, #24
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	607a      	str	r2, [r7, #4]
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f7ff fe2b 	bl	800920c <ai_mnetwork_handle>
 80095b6:	6178      	str	r0, [r7, #20]
     if (inn && phandle && pparams) {
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d018      	beq.n	80095f0 <ai_mnetwork_get_private_handle+0x4c>
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d015      	beq.n	80095f0 <ai_mnetwork_get_private_handle+0x4c>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d012      	beq.n	80095f0 <ai_mnetwork_get_private_handle+0x4c>
         *phandle = inn->handle;
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	685a      	ldr	r2, [r3, #4]
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	601a      	str	r2, [r3, #0]
         *pparams = inn->params;
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	4615      	mov	r5, r2
 80095d8:	f103 0408 	add.w	r4, r3, #8
 80095dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80095de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80095e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80095e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80095e4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80095e8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
         return 0;
 80095ec:	2300      	movs	r3, #0
 80095ee:	e001      	b.n	80095f4 <ai_mnetwork_get_private_handle+0x50>
     }
     else
         return -1;
 80095f0:	f04f 33ff 	mov.w	r3, #4294967295
 }
 80095f4:	4618      	mov	r0, r3
 80095f6:	3718      	adds	r7, #24
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bdb0      	pop	{r4, r5, r7, pc}

080095fc <ai_mnetwork_get_ext_data_activations>:

 AI_API_ENTRY
int ai_mnetwork_get_ext_data_activations(ai_handle network,
         ai_u32 *add,
         ai_u32 *size)
 {
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b086      	sub	sp, #24
 8009600:	af00      	add	r7, sp, #0
 8009602:	60f8      	str	r0, [r7, #12]
 8009604:	60b9      	str	r1, [r7, #8]
 8009606:	607a      	str	r2, [r7, #4]
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 8009608:	68f8      	ldr	r0, [r7, #12]
 800960a:	f7ff fdff 	bl	800920c <ai_mnetwork_handle>
 800960e:	6178      	str	r0, [r7, #20]
     if (inn && add && size) {
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d011      	beq.n	800963a <ai_mnetwork_get_ext_data_activations+0x3e>
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d00e      	beq.n	800963a <ai_mnetwork_get_ext_data_activations+0x3e>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d00b      	beq.n	800963a <ai_mnetwork_get_ext_data_activations+0x3e>
         *add = inn->entry->extActBufferStartAddr;
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	601a      	str	r2, [r3, #0]
         *size = inn->entry->actBufferSize;
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	601a      	str	r2, [r3, #0]
         return 0;
 8009636:	2300      	movs	r3, #0
 8009638:	e001      	b.n	800963e <ai_mnetwork_get_ext_data_activations+0x42>
     }
     else
         return -1;
 800963a:	f04f 33ff 	mov.w	r3, #4294967295
 }
 800963e:	4618      	mov	r0, r3
 8009640:	3718      	adds	r7, #24
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
	...

08009648 <facerecognition_configure_activations>:


AI_DECLARE_STATIC
ai_bool facerecognition_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8009648:	b480      	push	{r7}
 800964a:	b085      	sub	sp, #20
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, AI_FACERECOGNITION_ACTIVATIONS_ALIGNMENT));
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	691b      	ldr	r3, [r3, #16]
 8009656:	3303      	adds	r3, #3
 8009658:	f023 0303 	bic.w	r3, r3, #3
 800965c:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    conv2d_2_scratch0_array.data = AI_PTR(activations + 0);
 800965e:	4a1c      	ldr	r2, [pc, #112]	; (80096d0 <facerecognition_configure_activations+0x88>)
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6093      	str	r3, [r2, #8]
    conv2d_2_scratch0_array.data_start = AI_PTR(activations + 0);
 8009664:	4a1a      	ldr	r2, [pc, #104]	; (80096d0 <facerecognition_configure_activations+0x88>)
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	60d3      	str	r3, [r2, #12]
    conv2d_0_scratch0_array.data = AI_PTR(activations + 0);
 800966a:	4a1a      	ldr	r2, [pc, #104]	; (80096d4 <facerecognition_configure_activations+0x8c>)
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	6093      	str	r3, [r2, #8]
    conv2d_0_scratch0_array.data_start = AI_PTR(activations + 0);
 8009670:	4a18      	ldr	r2, [pc, #96]	; (80096d4 <facerecognition_configure_activations+0x8c>)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	60d3      	str	r3, [r2, #12]
    serving_default_x_input0_output_array.data = AI_PTR(NULL);
 8009676:	4b18      	ldr	r3, [pc, #96]	; (80096d8 <facerecognition_configure_activations+0x90>)
 8009678:	2200      	movs	r2, #0
 800967a:	609a      	str	r2, [r3, #8]
    serving_default_x_input0_output_array.data_start = AI_PTR(NULL);
 800967c:	4b16      	ldr	r3, [pc, #88]	; (80096d8 <facerecognition_configure_activations+0x90>)
 800967e:	2200      	movs	r2, #0
 8009680:	60da      	str	r2, [r3, #12]
    conv2d_0_output_array.data = AI_PTR(activations + 24576);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8009688:	4a14      	ldr	r2, [pc, #80]	; (80096dc <facerecognition_configure_activations+0x94>)
 800968a:	6093      	str	r3, [r2, #8]
    conv2d_0_output_array.data_start = AI_PTR(activations + 24576);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8009692:	4a12      	ldr	r2, [pc, #72]	; (80096dc <facerecognition_configure_activations+0x94>)
 8009694:	60d3      	str	r3, [r2, #12]
    conv2d_2_output_array.data = AI_PTR(activations + 21376);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f503 43a7 	add.w	r3, r3, #21376	; 0x5380
 800969c:	4a10      	ldr	r2, [pc, #64]	; (80096e0 <facerecognition_configure_activations+0x98>)
 800969e:	6093      	str	r3, [r2, #8]
    conv2d_2_output_array.data_start = AI_PTR(activations + 21376);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f503 43a7 	add.w	r3, r3, #21376	; 0x5380
 80096a6:	4a0e      	ldr	r2, [pc, #56]	; (80096e0 <facerecognition_configure_activations+0x98>)
 80096a8:	60d3      	str	r3, [r2, #12]
    dense_5_output_array.data = AI_PTR(activations + 0);
 80096aa:	4a0e      	ldr	r2, [pc, #56]	; (80096e4 <facerecognition_configure_activations+0x9c>)
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	6093      	str	r3, [r2, #8]
    dense_5_output_array.data_start = AI_PTR(activations + 0);
 80096b0:	4a0c      	ldr	r2, [pc, #48]	; (80096e4 <facerecognition_configure_activations+0x9c>)
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	60d3      	str	r3, [r2, #12]
    nl_6_output_array.data = AI_PTR(NULL);
 80096b6:	4b0c      	ldr	r3, [pc, #48]	; (80096e8 <facerecognition_configure_activations+0xa0>)
 80096b8:	2200      	movs	r2, #0
 80096ba:	609a      	str	r2, [r3, #8]
    nl_6_output_array.data_start = AI_PTR(NULL);
 80096bc:	4b0a      	ldr	r3, [pc, #40]	; (80096e8 <facerecognition_configure_activations+0xa0>)
 80096be:	2200      	movs	r2, #0
 80096c0:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 80096c2:	2301      	movs	r3, #1
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3714      	adds	r7, #20
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr
 80096d0:	200001f8 	.word	0x200001f8
 80096d4:	20000208 	.word	0x20000208
 80096d8:	20000278 	.word	0x20000278
 80096dc:	20000288 	.word	0x20000288
 80096e0:	20000298 	.word	0x20000298
 80096e4:	200002a8 	.word	0x200002a8
 80096e8:	200002b8 	.word	0x200002b8

080096ec <facerecognition_configure_weights>:


AI_DECLARE_STATIC
ai_bool facerecognition_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b085      	sub	sp, #20
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	691b      	ldr	r3, [r3, #16]
 80096fa:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_5_bias_array.format |= AI_FMT_FLAG_CONST;
 80096fc:	4b33      	ldr	r3, [pc, #204]	; (80097cc <facerecognition_configure_weights+0xe0>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009704:	4a31      	ldr	r2, [pc, #196]	; (80097cc <facerecognition_configure_weights+0xe0>)
 8009706:	6013      	str	r3, [r2, #0]
    dense_5_bias_array.data = AI_PTR(weights + 41536);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f503 4322 	add.w	r3, r3, #41472	; 0xa200
 800970e:	3340      	adds	r3, #64	; 0x40
 8009710:	4a2e      	ldr	r2, [pc, #184]	; (80097cc <facerecognition_configure_weights+0xe0>)
 8009712:	6093      	str	r3, [r2, #8]
    dense_5_bias_array.data_start = AI_PTR(weights + 41536);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f503 4322 	add.w	r3, r3, #41472	; 0xa200
 800971a:	3340      	adds	r3, #64	; 0x40
 800971c:	4a2b      	ldr	r2, [pc, #172]	; (80097cc <facerecognition_configure_weights+0xe0>)
 800971e:	60d3      	str	r3, [r2, #12]
    dense_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8009720:	4b2b      	ldr	r3, [pc, #172]	; (80097d0 <facerecognition_configure_weights+0xe4>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009728:	4a29      	ldr	r2, [pc, #164]	; (80097d0 <facerecognition_configure_weights+0xe4>)
 800972a:	6013      	str	r3, [r2, #0]
    dense_5_weights_array.data = AI_PTR(weights + 23104);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 8009732:	3340      	adds	r3, #64	; 0x40
 8009734:	4a26      	ldr	r2, [pc, #152]	; (80097d0 <facerecognition_configure_weights+0xe4>)
 8009736:	6093      	str	r3, [r2, #8]
    dense_5_weights_array.data_start = AI_PTR(weights + 22080);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f503 43ac 	add.w	r3, r3, #22016	; 0x5600
 800973e:	3340      	adds	r3, #64	; 0x40
 8009740:	4a23      	ldr	r2, [pc, #140]	; (80097d0 <facerecognition_configure_weights+0xe4>)
 8009742:	60d3      	str	r3, [r2, #12]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8009744:	4b23      	ldr	r3, [pc, #140]	; (80097d4 <facerecognition_configure_weights+0xe8>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800974c:	4a21      	ldr	r2, [pc, #132]	; (80097d4 <facerecognition_configure_weights+0xe8>)
 800974e:	6013      	str	r3, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(weights + 22016);
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f503 43ac 	add.w	r3, r3, #22016	; 0x5600
 8009756:	4a1f      	ldr	r2, [pc, #124]	; (80097d4 <facerecognition_configure_weights+0xe8>)
 8009758:	6093      	str	r3, [r2, #8]
    conv2d_2_bias_array.data_start = AI_PTR(weights + 22016);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f503 43ac 	add.w	r3, r3, #22016	; 0x5600
 8009760:	4a1c      	ldr	r2, [pc, #112]	; (80097d4 <facerecognition_configure_weights+0xe8>)
 8009762:	60d3      	str	r3, [r2, #12]
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8009764:	4b1c      	ldr	r3, [pc, #112]	; (80097d8 <facerecognition_configure_weights+0xec>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800976c:	4a1a      	ldr	r2, [pc, #104]	; (80097d8 <facerecognition_configure_weights+0xec>)
 800976e:	6013      	str	r3, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(weights + 3584);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009776:	4a18      	ldr	r2, [pc, #96]	; (80097d8 <facerecognition_configure_weights+0xec>)
 8009778:	6093      	str	r3, [r2, #8]
    conv2d_2_weights_array.data_start = AI_PTR(weights + 3584);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009780:	4a15      	ldr	r2, [pc, #84]	; (80097d8 <facerecognition_configure_weights+0xec>)
 8009782:	60d3      	str	r3, [r2, #12]
    conv2d_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8009784:	4b15      	ldr	r3, [pc, #84]	; (80097dc <facerecognition_configure_weights+0xf0>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800978c:	4a13      	ldr	r2, [pc, #76]	; (80097dc <facerecognition_configure_weights+0xf0>)
 800978e:	6013      	str	r3, [r2, #0]
    conv2d_0_bias_array.data = AI_PTR(weights + 3456);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 8009796:	4a11      	ldr	r2, [pc, #68]	; (80097dc <facerecognition_configure_weights+0xf0>)
 8009798:	6093      	str	r3, [r2, #8]
    conv2d_0_bias_array.data_start = AI_PTR(weights + 3456);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 80097a0:	4a0e      	ldr	r2, [pc, #56]	; (80097dc <facerecognition_configure_weights+0xf0>)
 80097a2:	60d3      	str	r3, [r2, #12]
    conv2d_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80097a4:	4b0e      	ldr	r3, [pc, #56]	; (80097e0 <facerecognition_configure_weights+0xf4>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80097ac:	4a0c      	ldr	r2, [pc, #48]	; (80097e0 <facerecognition_configure_weights+0xf4>)
 80097ae:	6013      	str	r3, [r2, #0]
    conv2d_0_weights_array.data = AI_PTR(weights + 0);
 80097b0:	4a0b      	ldr	r2, [pc, #44]	; (80097e0 <facerecognition_configure_weights+0xf4>)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	6093      	str	r3, [r2, #8]
    conv2d_0_weights_array.data_start = AI_PTR(weights + 0);
 80097b6:	4a0a      	ldr	r2, [pc, #40]	; (80097e0 <facerecognition_configure_weights+0xf4>)
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	60d3      	str	r3, [r2, #12]
  }

  return true;
 80097bc:	2301      	movs	r3, #1
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3714      	adds	r7, #20
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr
 80097ca:	bf00      	nop
 80097cc:	20000218 	.word	0x20000218
 80097d0:	20000228 	.word	0x20000228
 80097d4:	20000238 	.word	0x20000238
 80097d8:	20000248 	.word	0x20000248
 80097dc:	20000258 	.word	0x20000258
 80097e0:	20000268 	.word	0x20000268

080097e4 <ai_facerecognition_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/

AI_API_ENTRY
ai_bool ai_facerecognition_get_info(
  ai_handle network, ai_network_report* report)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b0a0      	sub	sp, #128	; 0x80
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f003 f862 	bl	800c8b8 <ai_platform_context_acquire>
 80097f4:	67f8      	str	r0, [r7, #124]	; 0x7c

  if ( report && net_ctx )
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d049      	beq.n	8009890 <ai_facerecognition_get_info+0xac>
 80097fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d046      	beq.n	8009890 <ai_facerecognition_get_info+0xac>
  {
    ai_network_report r = {
 8009802:	f107 0308 	add.w	r3, r7, #8
 8009806:	2274      	movs	r2, #116	; 0x74
 8009808:	2100      	movs	r1, #0
 800980a:	4618      	mov	r0, r3
 800980c:	f005 fde9 	bl	800f3e2 <memset>
 8009810:	4b22      	ldr	r3, [pc, #136]	; (800989c <ai_facerecognition_get_info+0xb8>)
 8009812:	60bb      	str	r3, [r7, #8]
 8009814:	4b22      	ldr	r3, [pc, #136]	; (80098a0 <ai_facerecognition_get_info+0xbc>)
 8009816:	60fb      	str	r3, [r7, #12]
 8009818:	4b22      	ldr	r3, [pc, #136]	; (80098a4 <ai_facerecognition_get_info+0xc0>)
 800981a:	613b      	str	r3, [r7, #16]
 800981c:	4b22      	ldr	r3, [pc, #136]	; (80098a8 <ai_facerecognition_get_info+0xc4>)
 800981e:	617b      	str	r3, [r7, #20]
      .model_signature   = AI_FACERECOGNITION_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8009820:	f002 ff8c 	bl	800c73c <ai_platform_runtime_get_revision>
 8009824:	4603      	mov	r3, r0
    ai_network_report r = {
 8009826:	61bb      	str	r3, [r7, #24]
 8009828:	f002 ffaa 	bl	800c780 <ai_platform_runtime_get_version>
 800982c:	4603      	mov	r3, r0
 800982e:	61fb      	str	r3, [r7, #28]
 8009830:	4b1e      	ldr	r3, [pc, #120]	; (80098ac <ai_facerecognition_get_info+0xc8>)
 8009832:	623b      	str	r3, [r7, #32]
 8009834:	2305      	movs	r3, #5
 8009836:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800983a:	2302      	movs	r3, #2
 800983c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8009840:	2301      	movs	r3, #1
 8009842:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8009846:	2303      	movs	r3, #3
 8009848:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800984c:	f002 ffcc 	bl	800c7e8 <ai_platform_api_get_version>
 8009850:	4603      	mov	r3, r0
 8009852:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009854:	f002 fffc 	bl	800c850 <ai_platform_interface_api_get_version>
 8009858:	4603      	mov	r3, r0
 800985a:	633b      	str	r3, [r7, #48]	; 0x30
 800985c:	4b14      	ldr	r3, [pc, #80]	; (80098b0 <ai_facerecognition_get_info+0xcc>)
 800985e:	637b      	str	r3, [r7, #52]	; 0x34
      .params            = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if ( !ai_platform_api_get_network_report(network, &r) ) return false;
 8009860:	f107 0308 	add.w	r3, r7, #8
 8009864:	4619      	mov	r1, r3
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f003 f882 	bl	800c970 <ai_platform_api_get_network_report>
 800986c:	4603      	mov	r3, r0
 800986e:	f083 0301 	eor.w	r3, r3, #1
 8009872:	b2db      	uxtb	r3, r3
 8009874:	2b00      	cmp	r3, #0
 8009876:	d001      	beq.n	800987c <ai_facerecognition_get_info+0x98>
 8009878:	2300      	movs	r3, #0
 800987a:	e00a      	b.n	8009892 <ai_facerecognition_get_info+0xae>

    *report = r;
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	4618      	mov	r0, r3
 8009880:	f107 0308 	add.w	r3, r7, #8
 8009884:	2274      	movs	r2, #116	; 0x74
 8009886:	4619      	mov	r1, r3
 8009888:	f005 fda0 	bl	800f3cc <memcpy>
    return true;
 800988c:	2301      	movs	r3, #1
 800988e:	e000      	b.n	8009892 <ai_facerecognition_get_info+0xae>
  }

  return false;
 8009890:	2300      	movs	r3, #0
}
 8009892:	4618      	mov	r0, r3
 8009894:	3780      	adds	r7, #128	; 0x80
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
 800989a:	bf00      	nop
 800989c:	08010e6c 	.word	0x08010e6c
 80098a0:	08010e7c 	.word	0x08010e7c
 80098a4:	08010ea0 	.word	0x08010ea0
 80098a8:	08010ebc 	.word	0x08010ebc
 80098ac:	08010ed4 	.word	0x08010ed4
 80098b0:	0125e84e 	.word	0x0125e84e

080098b4 <ai_facerecognition_get_error>:

AI_API_ENTRY
ai_error ai_facerecognition_get_error(ai_handle network)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b082      	sub	sp, #8
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f003 f825 	bl	800c90c <ai_platform_network_get_error>
 80098c2:	4603      	mov	r3, r0
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3708      	adds	r7, #8
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <ai_facerecognition_create>:

AI_API_ENTRY
ai_error ai_facerecognition_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af02      	add	r7, sp, #8
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80098d6:	2300      	movs	r3, #0
 80098d8:	9301      	str	r3, [sp, #4]
 80098da:	2303      	movs	r3, #3
 80098dc:	9300      	str	r3, [sp, #0]
 80098de:	2301      	movs	r3, #1
 80098e0:	4a04      	ldr	r2, [pc, #16]	; (80098f4 <ai_facerecognition_create+0x28>)
 80098e2:	6839      	ldr	r1, [r7, #0]
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f003 f92d 	bl	800cb44 <ai_platform_network_create>
 80098ea:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3708      	adds	r7, #8
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}
 80098f4:	20000198 	.word	0x20000198

080098f8 <ai_facerecognition_destroy>:

AI_API_ENTRY
ai_handle ai_facerecognition_destroy(ai_handle network)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f003 f977 	bl	800cbf4 <ai_platform_network_destroy>
 8009906:	4603      	mov	r3, r0
}
 8009908:	4618      	mov	r0, r3
 800990a:	3708      	adds	r7, #8
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <ai_facerecognition_init>:

AI_API_ENTRY
ai_bool ai_facerecognition_init(
  ai_handle network, const ai_network_params* params)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b084      	sub	sp, #16
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
 8009918:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800991a:	6839      	ldr	r1, [r7, #0]
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f003 f999 	bl	800cc54 <ai_platform_network_init>
 8009922:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d101      	bne.n	800992e <ai_facerecognition_init+0x1e>
 800992a:	2300      	movs	r3, #0
 800992c:	e02b      	b.n	8009986 <ai_facerecognition_init+0x76>

  ai_bool ok = true;
 800992e:	2301      	movs	r3, #1
 8009930:	72fb      	strb	r3, [r7, #11]
  ok &= facerecognition_configure_weights(net_ctx, &params->params);
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	4619      	mov	r1, r3
 8009936:	68f8      	ldr	r0, [r7, #12]
 8009938:	f7ff fed8 	bl	80096ec <facerecognition_configure_weights>
 800993c:	4603      	mov	r3, r0
 800993e:	461a      	mov	r2, r3
 8009940:	7afb      	ldrb	r3, [r7, #11]
 8009942:	4013      	ands	r3, r2
 8009944:	2b00      	cmp	r3, #0
 8009946:	bf14      	ite	ne
 8009948:	2301      	movne	r3, #1
 800994a:	2300      	moveq	r3, #0
 800994c:	72fb      	strb	r3, [r7, #11]
  ok &= facerecognition_configure_activations(net_ctx, &params->activations);
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	3318      	adds	r3, #24
 8009952:	4619      	mov	r1, r3
 8009954:	68f8      	ldr	r0, [r7, #12]
 8009956:	f7ff fe77 	bl	8009648 <facerecognition_configure_activations>
 800995a:	4603      	mov	r3, r0
 800995c:	461a      	mov	r2, r3
 800995e:	7afb      	ldrb	r3, [r7, #11]
 8009960:	4013      	ands	r3, r2
 8009962:	2b00      	cmp	r3, #0
 8009964:	bf14      	ite	ne
 8009966:	2301      	movne	r3, #1
 8009968:	2300      	moveq	r3, #0
 800996a:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f003 f9ef 	bl	800cd50 <ai_platform_network_post_init>
 8009972:	4603      	mov	r3, r0
 8009974:	461a      	mov	r2, r3
 8009976:	7afb      	ldrb	r3, [r7, #11]
 8009978:	4013      	ands	r3, r2
 800997a:	2b00      	cmp	r3, #0
 800997c:	bf14      	ite	ne
 800997e:	2301      	movne	r3, #1
 8009980:	2300      	moveq	r3, #0
 8009982:	72fb      	strb	r3, [r7, #11]

  return ok;
 8009984:	7afb      	ldrb	r3, [r7, #11]
}
 8009986:	4618      	mov	r0, r3
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}

0800998e <ai_facerecognition_run>:


AI_API_ENTRY
ai_i32 ai_facerecognition_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800998e:	b580      	push	{r7, lr}
 8009990:	b084      	sub	sp, #16
 8009992:	af00      	add	r7, sp, #0
 8009994:	60f8      	str	r0, [r7, #12]
 8009996:	60b9      	str	r1, [r7, #8]
 8009998:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800999a:	687a      	ldr	r2, [r7, #4]
 800999c:	68b9      	ldr	r1, [r7, #8]
 800999e:	68f8      	ldr	r0, [r7, #12]
 80099a0:	f003 fa1e 	bl	800cde0 <ai_platform_network_process>
 80099a4:	4603      	mov	r3, r0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3710      	adds	r7, #16
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}

080099ae <ai_facerecognition_forward>:

AI_API_ENTRY
ai_i32 ai_facerecognition_forward(ai_handle network, const ai_buffer* input)
{
 80099ae:	b580      	push	{r7, lr}
 80099b0:	b082      	sub	sp, #8
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
 80099b6:	6039      	str	r1, [r7, #0]
  return ai_platform_network_process(network, input, NULL);
 80099b8:	2200      	movs	r2, #0
 80099ba:	6839      	ldr	r1, [r7, #0]
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f003 fa0f 	bl	800cde0 <ai_platform_network_process>
 80099c2:	4603      	mov	r3, r0
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3708      	adds	r7, #8
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <ai_facerecognition_data_weights_get>:
#include "facerecognition_data.h"

ai_handle ai_facerecognition_data_weights_get(void)
{
 80099cc:	b480      	push	{r7}
 80099ce:	af00      	add	r7, sp, #0
    0x63, 0x76, 0xaa, 0x5a, 0x9c, 0xd7, 0xbe, 0xa3, 0x41,
    0x39, 0x7f, 0xb6, 0x90, 0xef, 0x89, 0xad, 0x8d, 0xeb,
    0x26, 0xe8, 0xc7, 0xfa, 0x3a, 0xe8, 0xc7, 0xfa, 0xba
  };

  return AI_HANDLE_PTR(s_facerecognition_weights);
 80099d0:	4b02      	ldr	r3, [pc, #8]	; (80099dc <ai_facerecognition_data_weights_get+0x10>)

}
 80099d2:	4618      	mov	r0, r3
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr
 80099dc:	080111fc 	.word	0x080111fc

080099e0 <pb_field_iter_begin>:
 */

#include "pb_common.h"

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_field_t *fields, void *dest_struct)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b085      	sub	sp, #20
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	607a      	str	r2, [r7, #4]
    iter->start = fields;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	68ba      	ldr	r2, [r7, #8]
 80099f0:	601a      	str	r2, [r3, #0]
    iter->pos = fields;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	68ba      	ldr	r2, [r7, #8]
 80099f6:	605a      	str	r2, [r3, #4]
    iter->required_field_index = 0;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2200      	movs	r2, #0
 80099fc:	609a      	str	r2, [r3, #8]
    iter->dest_struct = dest_struct;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	60da      	str	r2, [r3, #12]
    iter->pData = (char*)dest_struct + iter->pos->data_offset;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	461a      	mov	r2, r3
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	441a      	add	r2, r3
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	611a      	str	r2, [r3, #16]
    iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	691b      	ldr	r3, [r3, #16]
 8009a1c:	68fa      	ldr	r2, [r7, #12]
 8009a1e:	6852      	ldr	r2, [r2, #4]
 8009a20:	f9b2 2005 	ldrsh.w	r2, [r2, #5]
 8009a24:	b212      	sxth	r2, r2
 8009a26:	441a      	add	r2, r3
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	615a      	str	r2, [r3, #20]
    
    return (iter->pos->tag != 0);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	881b      	ldrh	r3, [r3, #0]
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	bf14      	ite	ne
 8009a38:	2301      	movne	r3, #1
 8009a3a:	2300      	moveq	r3, #0
 8009a3c:	b2db      	uxtb	r3, r3
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3714      	adds	r7, #20
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr

08009a4a <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b084      	sub	sp, #16
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
    const pb_field_t *prev_field = iter->pos;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	60bb      	str	r3, [r7, #8]

    if (prev_field->tag == 0)
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	881b      	ldrh	r3, [r3, #0]
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d101      	bne.n	8009a66 <pb_field_iter_next+0x1c>
    {
        /* Handle empty message types, where the first field is already the terminator.
         * In other cases, the iter->pos never points to the terminator. */
        return false;
 8009a62:	2300      	movs	r3, #0
 8009a64:	e073      	b.n	8009b4e <pb_field_iter_next+0x104>
    }
    
    iter->pos++;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	f103 020f 	add.w	r2, r3, #15
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	605a      	str	r2, [r3, #4]
    
    if (iter->pos->tag == 0)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	881b      	ldrh	r3, [r3, #0]
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d109      	bne.n	8009a92 <pb_field_iter_next+0x48>
    {
        /* Wrapped back to beginning, reinitialize */
        (void)pb_field_iter_begin(iter, iter->start, iter->dest_struct);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6819      	ldr	r1, [r3, #0]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	68db      	ldr	r3, [r3, #12]
 8009a86:	461a      	mov	r2, r3
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f7ff ffa9 	bl	80099e0 <pb_field_iter_begin>
        return false;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	e05d      	b.n	8009b4e <pb_field_iter_next+0x104>
    }
    else
    {
        /* Increment the pointers based on previous field size */
        size_t prev_size = prev_field->data_size;
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	60fb      	str	r3, [r7, #12]
    
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	789b      	ldrb	r3, [r3, #2]
 8009aa0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009aa4:	2b30      	cmp	r3, #48	; 0x30
 8009aa6:	d111      	bne.n	8009acc <pb_field_iter_next+0x82>
            PB_HTYPE(iter->pos->type) == PB_HTYPE_ONEOF &&
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	789b      	ldrb	r3, [r3, #2]
 8009aae:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 8009ab2:	2b30      	cmp	r3, #48	; 0x30
 8009ab4:	d10a      	bne.n	8009acc <pb_field_iter_next+0x82>
            iter->pos->data_offset == PB_SIZE_MAX)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009abe:	b29b      	uxth	r3, r3
            PB_HTYPE(iter->pos->type) == PB_HTYPE_ONEOF &&
 8009ac0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d101      	bne.n	8009acc <pb_field_iter_next+0x82>
        {
            /* Don't advance pointers inside unions */
            return true;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	e040      	b.n	8009b4e <pb_field_iter_next+0x104>
        }
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_STATIC &&
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	789b      	ldrb	r3, [r3, #2]
 8009ad0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d10f      	bne.n	8009af8 <pb_field_iter_next+0xae>
                 PB_HTYPE(prev_field->type) == PB_HTYPE_REPEATED)
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	789b      	ldrb	r3, [r3, #2]
 8009adc:	f003 0330 	and.w	r3, r3, #48	; 0x30
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_STATIC &&
 8009ae0:	2b20      	cmp	r3, #32
 8009ae2:	d109      	bne.n	8009af8 <pb_field_iter_next+0xae>
        {
            /* In static arrays, the data_size tells the size of a single entry and
             * array_size is the number of entries */
            prev_size *= prev_field->array_size;
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	461a      	mov	r2, r3
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	fb02 f303 	mul.w	r3, r2, r3
 8009af4:	60fb      	str	r3, [r7, #12]
 8009af6:	e007      	b.n	8009b08 <pb_field_iter_next+0xbe>
        }
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_POINTER)
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	789b      	ldrb	r3, [r3, #2]
 8009afc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009b00:	2b80      	cmp	r3, #128	; 0x80
 8009b02:	d101      	bne.n	8009b08 <pb_field_iter_next+0xbe>
        {
            /* Pointer fields always have a constant size in the main structure.
             * The data_size only applies to the dynamically allocated area. */
            prev_size = sizeof(void*);
 8009b04:	2304      	movs	r3, #4
 8009b06:	60fb      	str	r3, [r7, #12]
        }

        if (PB_HTYPE(prev_field->type) == PB_HTYPE_REQUIRED)
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	789b      	ldrb	r3, [r3, #2]
 8009b0c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d104      	bne.n	8009b1e <pb_field_iter_next+0xd4>
        {
            /* Count the required fields, in order to check their presence in the
             * decoder. */
            iter->required_field_index++;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	1c5a      	adds	r2, r3, #1
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	609a      	str	r2, [r3, #8]
        }
    
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	691a      	ldr	r2, [r3, #16]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	440b      	add	r3, r1
 8009b32:	441a      	add	r2, r3
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	611a      	str	r2, [r3, #16]
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	691b      	ldr	r3, [r3, #16]
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	6852      	ldr	r2, [r2, #4]
 8009b40:	f9b2 2005 	ldrsh.w	r2, [r2, #5]
 8009b44:	b212      	sxth	r2, r2
 8009b46:	441a      	add	r2, r3
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	615a      	str	r2, [r3, #20]
        return true;
 8009b4c:	2301      	movs	r3, #1
    }
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3710      	adds	r7, #16
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}

08009b56 <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 8009b56:	b580      	push	{r7, lr}
 8009b58:	b084      	sub	sp, #16
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	6078      	str	r0, [r7, #4]
 8009b5e:	6039      	str	r1, [r7, #0]
    const pb_field_t *start = iter->pos;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	60fb      	str	r3, [r7, #12]
    
    do {
        if (iter->pos->tag == tag &&
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	685b      	ldr	r3, [r3, #4]
 8009b6a:	881b      	ldrh	r3, [r3, #0]
 8009b6c:	b29b      	uxth	r3, r3
 8009b6e:	461a      	mov	r2, r3
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d108      	bne.n	8009b88 <pb_field_iter_find+0x32>
            PB_LTYPE(iter->pos->type) != PB_LTYPE_EXTENSION)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	789b      	ldrb	r3, [r3, #2]
 8009b7c:	f003 030f 	and.w	r3, r3, #15
        if (iter->pos->tag == tag &&
 8009b80:	2b08      	cmp	r3, #8
 8009b82:	d001      	beq.n	8009b88 <pb_field_iter_find+0x32>
        {
            /* Found the wanted field */
            return true;
 8009b84:	2301      	movs	r3, #1
 8009b86:	e008      	b.n	8009b9a <pb_field_iter_find+0x44>
        }
        
        (void)pb_field_iter_next(iter);
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f7ff ff5e 	bl	8009a4a <pb_field_iter_next>
    } while (iter->pos != start);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	68fa      	ldr	r2, [r7, #12]
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d1e6      	bne.n	8009b66 <pb_field_iter_find+0x10>
    
    /* Searched all the way back to start, and found nothing. */
    return false;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3710      	adds	r7, #16
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8009ba2:	b480      	push	{r7}
 8009ba4:	b087      	sub	sp, #28
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	60f8      	str	r0, [r7, #12]
 8009baa:	60b9      	str	r1, [r7, #8]
 8009bac:	607a      	str	r2, [r7, #4]
    size_t i;
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	613b      	str	r3, [r7, #16]
    stream->state = (pb_byte_t*)stream->state + count;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	685a      	ldr	r2, [r3, #4]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	441a      	add	r2, r3
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	605a      	str	r2, [r3, #4]
    
    if (buf != NULL)
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d011      	beq.n	8009bea <buf_read+0x48>
    {
        for (i = 0; i < count; i++)
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	617b      	str	r3, [r7, #20]
 8009bca:	e00a      	b.n	8009be2 <buf_read+0x40>
            buf[i] = source[i];
 8009bcc:	693a      	ldr	r2, [r7, #16]
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	441a      	add	r2, r3
 8009bd2:	68b9      	ldr	r1, [r7, #8]
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	440b      	add	r3, r1
 8009bd8:	7812      	ldrb	r2, [r2, #0]
 8009bda:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < count; i++)
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	3301      	adds	r3, #1
 8009be0:	617b      	str	r3, [r7, #20]
 8009be2:	697a      	ldr	r2, [r7, #20]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d3f0      	bcc.n	8009bcc <buf_read+0x2a>
    }
    
    return true;
 8009bea:	2301      	movs	r3, #1
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	371c      	adds	r7, #28
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr

08009bf8 <pb_read>:

bool checkreturn pb_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b088      	sub	sp, #32
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	60b9      	str	r1, [r7, #8]
 8009c02:	607a      	str	r2, [r7, #4]
#ifndef PB_BUFFER_ONLY
	if (buf == NULL && stream->callback != buf_read)
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d123      	bne.n	8009c52 <pb_read+0x5a>
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4a2b      	ldr	r2, [pc, #172]	; (8009cbc <pb_read+0xc4>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d01e      	beq.n	8009c52 <pb_read+0x5a>
	{
		/* Skip input bytes */
		pb_byte_t tmp[16];
		while (count > 16)
 8009c14:	e011      	b.n	8009c3a <pb_read+0x42>
		{
			if (!pb_read(stream, tmp, 16))
 8009c16:	f107 0310 	add.w	r3, r7, #16
 8009c1a:	2210      	movs	r2, #16
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	68f8      	ldr	r0, [r7, #12]
 8009c20:	f7ff ffea 	bl	8009bf8 <pb_read>
 8009c24:	4603      	mov	r3, r0
 8009c26:	f083 0301 	eor.w	r3, r3, #1
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d001      	beq.n	8009c34 <pb_read+0x3c>
				return false;
 8009c30:	2300      	movs	r3, #0
 8009c32:	e03e      	b.n	8009cb2 <pb_read+0xba>
			
			count -= 16;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	3b10      	subs	r3, #16
 8009c38:	607b      	str	r3, [r7, #4]
		while (count > 16)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2b10      	cmp	r3, #16
 8009c3e:	d8ea      	bhi.n	8009c16 <pb_read+0x1e>
		}
		
		return pb_read(stream, tmp, count);
 8009c40:	f107 0310 	add.w	r3, r7, #16
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	4619      	mov	r1, r3
 8009c48:	68f8      	ldr	r0, [r7, #12]
 8009c4a:	f7ff ffd5 	bl	8009bf8 <pb_read>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	e02f      	b.n	8009cb2 <pb_read+0xba>
	}
#endif

    if (stream->bytes_left < count)
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	689b      	ldr	r3, [r3, #8]
 8009c56:	687a      	ldr	r2, [r7, #4]
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d90b      	bls.n	8009c74 <pb_read+0x7c>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d002      	beq.n	8009c6a <pb_read+0x72>
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	68db      	ldr	r3, [r3, #12]
 8009c68:	e000      	b.n	8009c6c <pb_read+0x74>
 8009c6a:	4b15      	ldr	r3, [pc, #84]	; (8009cc0 <pb_read+0xc8>)
 8009c6c:	68fa      	ldr	r2, [r7, #12]
 8009c6e:	60d3      	str	r3, [r2, #12]
 8009c70:	2300      	movs	r3, #0
 8009c72:	e01e      	b.n	8009cb2 <pb_read+0xba>
    
#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, count))
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	68b9      	ldr	r1, [r7, #8]
 8009c7c:	68f8      	ldr	r0, [r7, #12]
 8009c7e:	4798      	blx	r3
 8009c80:	4603      	mov	r3, r0
 8009c82:	f083 0301 	eor.w	r3, r3, #1
 8009c86:	b2db      	uxtb	r3, r3
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d00b      	beq.n	8009ca4 <pb_read+0xac>
        PB_RETURN_ERROR(stream, "io error");
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	68db      	ldr	r3, [r3, #12]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d002      	beq.n	8009c9a <pb_read+0xa2>
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	68db      	ldr	r3, [r3, #12]
 8009c98:	e000      	b.n	8009c9c <pb_read+0xa4>
 8009c9a:	4b0a      	ldr	r3, [pc, #40]	; (8009cc4 <pb_read+0xcc>)
 8009c9c:	68fa      	ldr	r2, [r7, #12]
 8009c9e:	60d3      	str	r3, [r2, #12]
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	e006      	b.n	8009cb2 <pb_read+0xba>
#else
    if (!buf_read(stream, buf, count))
        return false;
#endif
    
    stream->bytes_left -= count;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	689a      	ldr	r2, [r3, #8]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	1ad2      	subs	r2, r2, r3
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	609a      	str	r2, [r3, #8]
    return true;
 8009cb0:	2301      	movs	r3, #1
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3720      	adds	r7, #32
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}
 8009cba:	bf00      	nop
 8009cbc:	08009ba3 	.word	0x08009ba3
 8009cc0:	08010ee0 	.word	0x08010ee0
 8009cc4:	08010ef0 	.word	0x08010ef0

08009cc8 <pb_readbyte>:

/* Read a single byte from input stream. buf may not be NULL.
 * This is an optimization for the varint decoding. */
static bool checkreturn pb_readbyte(pb_istream_t *stream, pb_byte_t *buf)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	6039      	str	r1, [r7, #0]
    if (stream->bytes_left == 0)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d10b      	bne.n	8009cf2 <pb_readbyte+0x2a>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	68db      	ldr	r3, [r3, #12]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d002      	beq.n	8009ce8 <pb_readbyte+0x20>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	68db      	ldr	r3, [r3, #12]
 8009ce6:	e000      	b.n	8009cea <pb_readbyte+0x22>
 8009ce8:	4b13      	ldr	r3, [pc, #76]	; (8009d38 <pb_readbyte+0x70>)
 8009cea:	687a      	ldr	r2, [r7, #4]
 8009cec:	60d3      	str	r3, [r2, #12]
 8009cee:	2300      	movs	r3, #0
 8009cf0:	e01d      	b.n	8009d2e <pb_readbyte+0x66>

#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, 1))
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	6839      	ldr	r1, [r7, #0]
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	4798      	blx	r3
 8009cfe:	4603      	mov	r3, r0
 8009d00:	f083 0301 	eor.w	r3, r3, #1
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d00b      	beq.n	8009d22 <pb_readbyte+0x5a>
        PB_RETURN_ERROR(stream, "io error");
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	68db      	ldr	r3, [r3, #12]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d002      	beq.n	8009d18 <pb_readbyte+0x50>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	68db      	ldr	r3, [r3, #12]
 8009d16:	e000      	b.n	8009d1a <pb_readbyte+0x52>
 8009d18:	4b08      	ldr	r3, [pc, #32]	; (8009d3c <pb_readbyte+0x74>)
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	60d3      	str	r3, [r2, #12]
 8009d1e:	2300      	movs	r3, #0
 8009d20:	e005      	b.n	8009d2e <pb_readbyte+0x66>
#else
    *buf = *(const pb_byte_t*)stream->state;
    stream->state = (pb_byte_t*)stream->state + 1;
#endif

    stream->bytes_left--;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	1e5a      	subs	r2, r3, #1
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	609a      	str	r2, [r3, #8]
    
    return true;    
 8009d2c:	2301      	movs	r3, #1
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3708      	adds	r7, #8
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop
 8009d38:	08010ee0 	.word	0x08010ee0
 8009d3c:	08010ef0 	.word	0x08010ef0

08009d40 <pb_istream_from_buffer>:

pb_istream_t pb_istream_from_buffer(const pb_byte_t *buf, size_t bufsize)
{
 8009d40:	b490      	push	{r4, r7}
 8009d42:	b08a      	sub	sp, #40	; 0x28
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	60f8      	str	r0, [r7, #12]
 8009d48:	60b9      	str	r1, [r7, #8]
 8009d4a:	607a      	str	r2, [r7, #4]
        const void *c_state;
    } state;
#ifdef PB_BUFFER_ONLY
    stream.callback = NULL;
#else
    stream.callback = &buf_read;
 8009d4c:	4b0a      	ldr	r3, [pc, #40]	; (8009d78 <pb_istream_from_buffer+0x38>)
 8009d4e:	61bb      	str	r3, [r7, #24]
#endif
    state.c_state = buf;
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	617b      	str	r3, [r7, #20]
    stream.state = state.state;
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	61fb      	str	r3, [r7, #28]
    stream.bytes_left = bufsize;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return stream;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	461c      	mov	r4, r3
 8009d64:	f107 0318 	add.w	r3, r7, #24
 8009d68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009d6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8009d6e:	68f8      	ldr	r0, [r7, #12]
 8009d70:	3728      	adds	r7, #40	; 0x28
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bc90      	pop	{r4, r7}
 8009d76:	4770      	bx	lr
 8009d78:	08009ba3 	.word	0x08009ba3

08009d7c <pb_decode_varint32_eof>:
/********************
 * Helper functions *
 ********************/

static bool checkreturn pb_decode_varint32_eof(pb_istream_t *stream, uint32_t *dest, bool *eof)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b088      	sub	sp, #32
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	60f8      	str	r0, [r7, #12]
 8009d84:	60b9      	str	r1, [r7, #8]
 8009d86:	607a      	str	r2, [r7, #4]
    pb_byte_t byte;
    uint32_t result;
    
    if (!pb_readbyte(stream, &byte))
 8009d88:	f107 0316 	add.w	r3, r7, #22
 8009d8c:	4619      	mov	r1, r3
 8009d8e:	68f8      	ldr	r0, [r7, #12]
 8009d90:	f7ff ff9a 	bl	8009cc8 <pb_readbyte>
 8009d94:	4603      	mov	r3, r0
 8009d96:	f083 0301 	eor.w	r3, r3, #1
 8009d9a:	b2db      	uxtb	r3, r3
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d00b      	beq.n	8009db8 <pb_decode_varint32_eof+0x3c>
    {
        if (stream->bytes_left == 0)
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d105      	bne.n	8009db4 <pb_decode_varint32_eof+0x38>
        {
            if (eof)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d002      	beq.n	8009db4 <pb_decode_varint32_eof+0x38>
            {
                *eof = true;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2201      	movs	r2, #1
 8009db2:	701a      	strb	r2, [r3, #0]
            }
        }

        return false;
 8009db4:	2300      	movs	r3, #0
 8009db6:	e064      	b.n	8009e82 <pb_decode_varint32_eof+0x106>
    }
    
    if ((byte & 0x80) == 0)
 8009db8:	7dbb      	ldrb	r3, [r7, #22]
 8009dba:	b25b      	sxtb	r3, r3
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	db02      	blt.n	8009dc6 <pb_decode_varint32_eof+0x4a>
    {
        /* Quick case, 1 byte value */
        result = byte;
 8009dc0:	7dbb      	ldrb	r3, [r7, #22]
 8009dc2:	61fb      	str	r3, [r7, #28]
 8009dc4:	e059      	b.n	8009e7a <pb_decode_varint32_eof+0xfe>
    }
    else
    {
        /* Multibyte case */
        uint_fast8_t bitpos = 7;
 8009dc6:	2307      	movs	r3, #7
 8009dc8:	61bb      	str	r3, [r7, #24]
        result = byte & 0x7F;
 8009dca:	7dbb      	ldrb	r3, [r7, #22]
 8009dcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dd0:	61fb      	str	r3, [r7, #28]
        
        do
        {
            if (!pb_readbyte(stream, &byte))
 8009dd2:	f107 0316 	add.w	r3, r7, #22
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	68f8      	ldr	r0, [r7, #12]
 8009dda:	f7ff ff75 	bl	8009cc8 <pb_readbyte>
 8009dde:	4603      	mov	r3, r0
 8009de0:	f083 0301 	eor.w	r3, r3, #1
 8009de4:	b2db      	uxtb	r3, r3
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d001      	beq.n	8009dee <pb_decode_varint32_eof+0x72>
                return false;
 8009dea:	2300      	movs	r3, #0
 8009dec:	e049      	b.n	8009e82 <pb_decode_varint32_eof+0x106>
            
            if (bitpos >= 32)
 8009dee:	69bb      	ldr	r3, [r7, #24]
 8009df0:	2b1f      	cmp	r3, #31
 8009df2:	d91e      	bls.n	8009e32 <pb_decode_varint32_eof+0xb6>
            {
                /* Note: The varint could have trailing 0x80 bytes, or 0xFF for negative. */
                uint8_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 8009df4:	69bb      	ldr	r3, [r7, #24]
 8009df6:	2b3e      	cmp	r3, #62	; 0x3e
 8009df8:	d801      	bhi.n	8009dfe <pb_decode_varint32_eof+0x82>
 8009dfa:	23ff      	movs	r3, #255	; 0xff
 8009dfc:	e000      	b.n	8009e00 <pb_decode_varint32_eof+0x84>
 8009dfe:	2301      	movs	r3, #1
 8009e00:	75fb      	strb	r3, [r7, #23]
                
                if ((byte & 0x7F) != 0x00 && ((result >> 31) == 0 || byte != sign_extension))
 8009e02:	7dbb      	ldrb	r3, [r7, #22]
 8009e04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d01b      	beq.n	8009e44 <pb_decode_varint32_eof+0xc8>
 8009e0c:	69fb      	ldr	r3, [r7, #28]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	da03      	bge.n	8009e1a <pb_decode_varint32_eof+0x9e>
 8009e12:	7dbb      	ldrb	r3, [r7, #22]
 8009e14:	7dfa      	ldrb	r2, [r7, #23]
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d014      	beq.n	8009e44 <pb_decode_varint32_eof+0xc8>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	68db      	ldr	r3, [r3, #12]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d002      	beq.n	8009e28 <pb_decode_varint32_eof+0xac>
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	68db      	ldr	r3, [r3, #12]
 8009e26:	e000      	b.n	8009e2a <pb_decode_varint32_eof+0xae>
 8009e28:	4b18      	ldr	r3, [pc, #96]	; (8009e8c <pb_decode_varint32_eof+0x110>)
 8009e2a:	68fa      	ldr	r2, [r7, #12]
 8009e2c:	60d3      	str	r3, [r2, #12]
 8009e2e:	2300      	movs	r3, #0
 8009e30:	e027      	b.n	8009e82 <pb_decode_varint32_eof+0x106>
                }
            }
            else
            {
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 8009e32:	7dbb      	ldrb	r3, [r7, #22]
 8009e34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e38:	69bb      	ldr	r3, [r7, #24]
 8009e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8009e3e:	69fa      	ldr	r2, [r7, #28]
 8009e40:	4313      	orrs	r3, r2
 8009e42:	61fb      	str	r3, [r7, #28]
            }
            bitpos = (uint_fast8_t)(bitpos + 7);
 8009e44:	69bb      	ldr	r3, [r7, #24]
 8009e46:	3307      	adds	r3, #7
 8009e48:	61bb      	str	r3, [r7, #24]
        } while (byte & 0x80);
 8009e4a:	7dbb      	ldrb	r3, [r7, #22]
 8009e4c:	b25b      	sxtb	r3, r3
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	dbbf      	blt.n	8009dd2 <pb_decode_varint32_eof+0x56>
        
        if (bitpos == 35 && (byte & 0x70) != 0)
 8009e52:	69bb      	ldr	r3, [r7, #24]
 8009e54:	2b23      	cmp	r3, #35	; 0x23
 8009e56:	d110      	bne.n	8009e7a <pb_decode_varint32_eof+0xfe>
 8009e58:	7dbb      	ldrb	r3, [r7, #22]
 8009e5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d00b      	beq.n	8009e7a <pb_decode_varint32_eof+0xfe>
        {
            /* The last byte was at bitpos=28, so only bottom 4 bits fit. */
            PB_RETURN_ERROR(stream, "varint overflow");
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	68db      	ldr	r3, [r3, #12]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d002      	beq.n	8009e70 <pb_decode_varint32_eof+0xf4>
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	e000      	b.n	8009e72 <pb_decode_varint32_eof+0xf6>
 8009e70:	4b06      	ldr	r3, [pc, #24]	; (8009e8c <pb_decode_varint32_eof+0x110>)
 8009e72:	68fa      	ldr	r2, [r7, #12]
 8009e74:	60d3      	str	r3, [r2, #12]
 8009e76:	2300      	movs	r3, #0
 8009e78:	e003      	b.n	8009e82 <pb_decode_varint32_eof+0x106>
        }
   }
   
   *dest = result;
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	69fa      	ldr	r2, [r7, #28]
 8009e7e:	601a      	str	r2, [r3, #0]
   return true;
 8009e80:	2301      	movs	r3, #1
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3720      	adds	r7, #32
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
 8009e8a:	bf00      	nop
 8009e8c:	08010efc 	.word	0x08010efc

08009e90 <pb_decode_varint32>:

bool checkreturn pb_decode_varint32(pb_istream_t *stream, uint32_t *dest)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b082      	sub	sp, #8
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	6039      	str	r1, [r7, #0]
    return pb_decode_varint32_eof(stream, dest, NULL);
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	6839      	ldr	r1, [r7, #0]
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f7ff ff6c 	bl	8009d7c <pb_decode_varint32_eof>
 8009ea4:	4603      	mov	r3, r0
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3708      	adds	r7, #8
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
	...

08009eb0 <pb_decode_varint>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_decode_varint(pb_istream_t *stream, uint64_t *dest)
{
 8009eb0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8009eb4:	b088      	sub	sp, #32
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	6078      	str	r0, [r7, #4]
 8009eba:	6039      	str	r1, [r7, #0]
    pb_byte_t byte;
    uint_fast8_t bitpos = 0;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	61fb      	str	r3, [r7, #28]
    uint64_t result = 0;
 8009ec0:	f04f 0200 	mov.w	r2, #0
 8009ec4:	f04f 0300 	mov.w	r3, #0
 8009ec8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    
    do
    {
        if (bitpos >= 64)
 8009ecc:	69fb      	ldr	r3, [r7, #28]
 8009ece:	2b3f      	cmp	r3, #63	; 0x3f
 8009ed0:	d90b      	bls.n	8009eea <pb_decode_varint+0x3a>
            PB_RETURN_ERROR(stream, "varint overflow");
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	68db      	ldr	r3, [r3, #12]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d002      	beq.n	8009ee0 <pb_decode_varint+0x30>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	68db      	ldr	r3, [r3, #12]
 8009ede:	e000      	b.n	8009ee2 <pb_decode_varint+0x32>
 8009ee0:	4b23      	ldr	r3, [pc, #140]	; (8009f70 <pb_decode_varint+0xc0>)
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	60d3      	str	r3, [r2, #12]
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	e03d      	b.n	8009f66 <pb_decode_varint+0xb6>
        
        if (!pb_readbyte(stream, &byte))
 8009eea:	f107 030f 	add.w	r3, r7, #15
 8009eee:	4619      	mov	r1, r3
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f7ff fee9 	bl	8009cc8 <pb_readbyte>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	f083 0301 	eor.w	r3, r3, #1
 8009efc:	b2db      	uxtb	r3, r3
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d001      	beq.n	8009f06 <pb_decode_varint+0x56>
            return false;
 8009f02:	2300      	movs	r3, #0
 8009f04:	e02f      	b.n	8009f66 <pb_decode_varint+0xb6>

        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8009f06:	7bfb      	ldrb	r3, [r7, #15]
 8009f08:	b2da      	uxtb	r2, r3
 8009f0a:	f04f 0300 	mov.w	r3, #0
 8009f0e:	f04f 007f 	mov.w	r0, #127	; 0x7f
 8009f12:	f04f 0100 	mov.w	r1, #0
 8009f16:	ea02 0b00 	and.w	fp, r2, r0
 8009f1a:	ea03 0c01 	and.w	ip, r3, r1
 8009f1e:	69f9      	ldr	r1, [r7, #28]
 8009f20:	f1a1 0620 	sub.w	r6, r1, #32
 8009f24:	f1c1 0020 	rsb	r0, r1, #32
 8009f28:	fa0c f501 	lsl.w	r5, ip, r1
 8009f2c:	fa0b f606 	lsl.w	r6, fp, r6
 8009f30:	4335      	orrs	r5, r6
 8009f32:	fa2b f000 	lsr.w	r0, fp, r0
 8009f36:	4305      	orrs	r5, r0
 8009f38:	fa0b f401 	lsl.w	r4, fp, r1
 8009f3c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009f40:	ea42 0004 	orr.w	r0, r2, r4
 8009f44:	ea43 0105 	orr.w	r1, r3, r5
 8009f48:	e9c7 0104 	strd	r0, r1, [r7, #16]
        bitpos = (uint_fast8_t)(bitpos + 7);
 8009f4c:	69fb      	ldr	r3, [r7, #28]
 8009f4e:	3307      	adds	r3, #7
 8009f50:	61fb      	str	r3, [r7, #28]
    } while (byte & 0x80);
 8009f52:	7bfb      	ldrb	r3, [r7, #15]
 8009f54:	b25b      	sxtb	r3, r3
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	dbb8      	blt.n	8009ecc <pb_decode_varint+0x1c>
    
    *dest = result;
 8009f5a:	683a      	ldr	r2, [r7, #0]
 8009f5c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8009f60:	e9c2 3400 	strd	r3, r4, [r2]
    return true;
 8009f64:	2301      	movs	r3, #1
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3720      	adds	r7, #32
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8009f70:	08010efc 	.word	0x08010efc

08009f74 <pb_skip_varint>:
#endif

bool checkreturn pb_skip_varint(pb_istream_t *stream)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b084      	sub	sp, #16
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
    pb_byte_t byte;
    do
    {
        if (!pb_read(stream, &byte, 1))
 8009f7c:	f107 030f 	add.w	r3, r7, #15
 8009f80:	2201      	movs	r2, #1
 8009f82:	4619      	mov	r1, r3
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f7ff fe37 	bl	8009bf8 <pb_read>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	f083 0301 	eor.w	r3, r3, #1
 8009f90:	b2db      	uxtb	r3, r3
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d001      	beq.n	8009f9a <pb_skip_varint+0x26>
            return false;
 8009f96:	2300      	movs	r3, #0
 8009f98:	e004      	b.n	8009fa4 <pb_skip_varint+0x30>
    } while (byte & 0x80);
 8009f9a:	7bfb      	ldrb	r3, [r7, #15]
 8009f9c:	b25b      	sxtb	r3, r3
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	dbec      	blt.n	8009f7c <pb_skip_varint+0x8>
    return true;
 8009fa2:	2301      	movs	r3, #1
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3710      	adds	r7, #16
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <pb_skip_string>:

bool checkreturn pb_skip_string(pb_istream_t *stream)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b084      	sub	sp, #16
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
    uint32_t length;
    if (!pb_decode_varint32(stream, &length))
 8009fb4:	f107 030c 	add.w	r3, r7, #12
 8009fb8:	4619      	mov	r1, r3
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f7ff ff68 	bl	8009e90 <pb_decode_varint32>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	f083 0301 	eor.w	r3, r3, #1
 8009fc6:	b2db      	uxtb	r3, r3
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d001      	beq.n	8009fd0 <pb_skip_string+0x24>
        return false;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	e006      	b.n	8009fde <pb_skip_string+0x32>
    
    return pb_read(stream, NULL, length);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f7ff fe0e 	bl	8009bf8 <pb_read>
 8009fdc:	4603      	mov	r3, r0
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3710      	adds	r7, #16
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}

08009fe6 <pb_decode_tag>:

bool checkreturn pb_decode_tag(pb_istream_t *stream, pb_wire_type_t *wire_type, uint32_t *tag, bool *eof)
{
 8009fe6:	b580      	push	{r7, lr}
 8009fe8:	b086      	sub	sp, #24
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	60f8      	str	r0, [r7, #12]
 8009fee:	60b9      	str	r1, [r7, #8]
 8009ff0:	607a      	str	r2, [r7, #4]
 8009ff2:	603b      	str	r3, [r7, #0]
    uint32_t temp;
    *eof = false;
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	701a      	strb	r2, [r3, #0]
    *wire_type = (pb_wire_type_t) 0;
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	701a      	strb	r2, [r3, #0]
    *tag = 0;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	601a      	str	r2, [r3, #0]
    
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 800a006:	f107 0314 	add.w	r3, r7, #20
 800a00a:	683a      	ldr	r2, [r7, #0]
 800a00c:	4619      	mov	r1, r3
 800a00e:	68f8      	ldr	r0, [r7, #12]
 800a010:	f7ff feb4 	bl	8009d7c <pb_decode_varint32_eof>
 800a014:	4603      	mov	r3, r0
 800a016:	f083 0301 	eor.w	r3, r3, #1
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d001      	beq.n	800a024 <pb_decode_tag+0x3e>
    {
        return false;
 800a020:	2300      	movs	r3, #0
 800a022:	e013      	b.n	800a04c <pb_decode_tag+0x66>
    }
    
    if (temp == 0)
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d104      	bne.n	800a034 <pb_decode_tag+0x4e>
    {
        *eof = true; /* Special feature: allow 0-terminated messages. */
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	2201      	movs	r2, #1
 800a02e:	701a      	strb	r2, [r3, #0]
        return false;
 800a030:	2300      	movs	r3, #0
 800a032:	e00b      	b.n	800a04c <pb_decode_tag+0x66>
    }
    
    *tag = temp >> 3;
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	08da      	lsrs	r2, r3, #3
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	601a      	str	r2, [r3, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	b2db      	uxtb	r3, r3
 800a040:	f003 0307 	and.w	r3, r3, #7
 800a044:	b2da      	uxtb	r2, r3
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	701a      	strb	r2, [r3, #0]
    return true;
 800a04a:	2301      	movs	r3, #1
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3718      	adds	r7, #24
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <pb_skip_field>:

bool checkreturn pb_skip_field(pb_istream_t *stream, pb_wire_type_t wire_type)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b082      	sub	sp, #8
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	460b      	mov	r3, r1
 800a05e:	70fb      	strb	r3, [r7, #3]
    switch (wire_type)
 800a060:	78fb      	ldrb	r3, [r7, #3]
 800a062:	2b05      	cmp	r3, #5
 800a064:	d826      	bhi.n	800a0b4 <pb_skip_field+0x60>
 800a066:	a201      	add	r2, pc, #4	; (adr r2, 800a06c <pb_skip_field+0x18>)
 800a068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a06c:	0800a085 	.word	0x0800a085
 800a070:	0800a08f 	.word	0x0800a08f
 800a074:	0800a09d 	.word	0x0800a09d
 800a078:	0800a0b5 	.word	0x0800a0b5
 800a07c:	0800a0b5 	.word	0x0800a0b5
 800a080:	0800a0a7 	.word	0x0800a0a7
    {
        case PB_WT_VARINT: return pb_skip_varint(stream);
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f7ff ff75 	bl	8009f74 <pb_skip_varint>
 800a08a:	4603      	mov	r3, r0
 800a08c:	e01d      	b.n	800a0ca <pb_skip_field+0x76>
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 800a08e:	2208      	movs	r2, #8
 800a090:	2100      	movs	r1, #0
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f7ff fdb0 	bl	8009bf8 <pb_read>
 800a098:	4603      	mov	r3, r0
 800a09a:	e016      	b.n	800a0ca <pb_skip_field+0x76>
        case PB_WT_STRING: return pb_skip_string(stream);
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f7ff ff85 	bl	8009fac <pb_skip_string>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	e011      	b.n	800a0ca <pb_skip_field+0x76>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 800a0a6:	2204      	movs	r2, #4
 800a0a8:	2100      	movs	r1, #0
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f7ff fda4 	bl	8009bf8 <pb_read>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	e00a      	b.n	800a0ca <pb_skip_field+0x76>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	68db      	ldr	r3, [r3, #12]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d002      	beq.n	800a0c2 <pb_skip_field+0x6e>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	e000      	b.n	800a0c4 <pb_skip_field+0x70>
 800a0c2:	4b04      	ldr	r3, [pc, #16]	; (800a0d4 <pb_skip_field+0x80>)
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	60d3      	str	r3, [r2, #12]
 800a0c8:	2300      	movs	r3, #0
    }
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3708      	adds	r7, #8
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}
 800a0d2:	bf00      	nop
 800a0d4:	08010f0c 	.word	0x08010f0c

0800a0d8 <read_raw_value>:

/* Read a raw value to buffer, for the purpose of passing it to callback as
 * a substream. Size is maximum size on call, and actual size on return.
 */
static bool checkreturn read_raw_value(pb_istream_t *stream, pb_wire_type_t wire_type, pb_byte_t *buf, size_t *size)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b086      	sub	sp, #24
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	60f8      	str	r0, [r7, #12]
 800a0e0:	607a      	str	r2, [r7, #4]
 800a0e2:	603b      	str	r3, [r7, #0]
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	72fb      	strb	r3, [r7, #11]
    size_t max_size = *size;
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	617b      	str	r3, [r7, #20]
    switch (wire_type)
 800a0ee:	7afb      	ldrb	r3, [r7, #11]
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d028      	beq.n	800a146 <read_raw_value+0x6e>
 800a0f4:	2b05      	cmp	r3, #5
 800a0f6:	d030      	beq.n	800a15a <read_raw_value+0x82>
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d138      	bne.n	800a16e <read_raw_value+0x96>
    {
        case PB_WT_VARINT:
            *size = 0;
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	2200      	movs	r2, #0
 800a100:	601a      	str	r2, [r3, #0]
            do
            {
                (*size)++;
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	1c5a      	adds	r2, r3, #1
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	601a      	str	r2, [r3, #0]
                if (*size > max_size) return false;
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	697a      	ldr	r2, [r7, #20]
 800a112:	429a      	cmp	r2, r3
 800a114:	d201      	bcs.n	800a11a <read_raw_value+0x42>
 800a116:	2300      	movs	r3, #0
 800a118:	e034      	b.n	800a184 <read_raw_value+0xac>
                if (!pb_read(stream, buf, 1)) return false;
 800a11a:	2201      	movs	r2, #1
 800a11c:	6879      	ldr	r1, [r7, #4]
 800a11e:	68f8      	ldr	r0, [r7, #12]
 800a120:	f7ff fd6a 	bl	8009bf8 <pb_read>
 800a124:	4603      	mov	r3, r0
 800a126:	f083 0301 	eor.w	r3, r3, #1
 800a12a:	b2db      	uxtb	r3, r3
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d001      	beq.n	800a134 <read_raw_value+0x5c>
 800a130:	2300      	movs	r3, #0
 800a132:	e027      	b.n	800a184 <read_raw_value+0xac>
            } while (*buf++ & 0x80);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	1c5a      	adds	r2, r3, #1
 800a138:	607a      	str	r2, [r7, #4]
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	b25b      	sxtb	r3, r3
 800a13e:	2b00      	cmp	r3, #0
 800a140:	dbdf      	blt.n	800a102 <read_raw_value+0x2a>
            return true;
 800a142:	2301      	movs	r3, #1
 800a144:	e01e      	b.n	800a184 <read_raw_value+0xac>
            
        case PB_WT_64BIT:
            *size = 8;
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	2208      	movs	r2, #8
 800a14a:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 8);
 800a14c:	2208      	movs	r2, #8
 800a14e:	6879      	ldr	r1, [r7, #4]
 800a150:	68f8      	ldr	r0, [r7, #12]
 800a152:	f7ff fd51 	bl	8009bf8 <pb_read>
 800a156:	4603      	mov	r3, r0
 800a158:	e014      	b.n	800a184 <read_raw_value+0xac>
        
        case PB_WT_32BIT:
            *size = 4;
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	2204      	movs	r2, #4
 800a15e:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 4);
 800a160:	2204      	movs	r2, #4
 800a162:	6879      	ldr	r1, [r7, #4]
 800a164:	68f8      	ldr	r0, [r7, #12]
 800a166:	f7ff fd47 	bl	8009bf8 <pb_read>
 800a16a:	4603      	mov	r3, r0
 800a16c:	e00a      	b.n	800a184 <read_raw_value+0xac>
            /* Calling read_raw_value with a PB_WT_STRING is an error.
             * Explicitly handle this case and fallthrough to default to avoid
             * compiler warnings.
             */

        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	68db      	ldr	r3, [r3, #12]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d002      	beq.n	800a17c <read_raw_value+0xa4>
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	e000      	b.n	800a17e <read_raw_value+0xa6>
 800a17c:	4b03      	ldr	r3, [pc, #12]	; (800a18c <read_raw_value+0xb4>)
 800a17e:	68fa      	ldr	r2, [r7, #12]
 800a180:	60d3      	str	r3, [r2, #12]
 800a182:	2300      	movs	r3, #0
    }
}
 800a184:	4618      	mov	r0, r3
 800a186:	3718      	adds	r7, #24
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}
 800a18c:	08010f0c 	.word	0x08010f0c

0800a190 <pb_make_string_substream>:

/* Decode string length from stream and return a substream with limited length.
 * Remember to close the substream using pb_close_string_substream().
 */
bool checkreturn pb_make_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 800a190:	b590      	push	{r4, r7, lr}
 800a192:	b085      	sub	sp, #20
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6039      	str	r1, [r7, #0]
    uint32_t size;
    if (!pb_decode_varint32(stream, &size))
 800a19a:	f107 030c 	add.w	r3, r7, #12
 800a19e:	4619      	mov	r1, r3
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f7ff fe75 	bl	8009e90 <pb_decode_varint32>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	f083 0301 	eor.w	r3, r3, #1
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d001      	beq.n	800a1b6 <pb_make_string_substream+0x26>
        return false;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	e020      	b.n	800a1f8 <pb_make_string_substream+0x68>
    
    *substream = *stream;
 800a1b6:	683a      	ldr	r2, [r7, #0]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	4614      	mov	r4, r2
 800a1bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a1be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	689a      	ldr	r2, [r3, #8]
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d20b      	bcs.n	800a1e4 <pb_make_string_substream+0x54>
        PB_RETURN_ERROR(stream, "parent stream too short");
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	68db      	ldr	r3, [r3, #12]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d002      	beq.n	800a1da <pb_make_string_substream+0x4a>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	68db      	ldr	r3, [r3, #12]
 800a1d8:	e000      	b.n	800a1dc <pb_make_string_substream+0x4c>
 800a1da:	4b09      	ldr	r3, [pc, #36]	; (800a200 <pb_make_string_substream+0x70>)
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	60d3      	str	r3, [r2, #12]
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	e009      	b.n	800a1f8 <pb_make_string_substream+0x68>
    
    substream->bytes_left = size;
 800a1e4:	68fa      	ldr	r2, [r7, #12]
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	609a      	str	r2, [r3, #8]
    stream->bytes_left -= size;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	689a      	ldr	r2, [r3, #8]
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	1ad2      	subs	r2, r2, r3
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	609a      	str	r2, [r3, #8]
    return true;
 800a1f6:	2301      	movs	r3, #1
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3714      	adds	r7, #20
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd90      	pop	{r4, r7, pc}
 800a200:	08010f20 	.word	0x08010f20

0800a204 <pb_close_string_substream>:

bool checkreturn pb_close_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b082      	sub	sp, #8
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
    if (substream->bytes_left) {
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	689b      	ldr	r3, [r3, #8]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d00e      	beq.n	800a234 <pb_close_string_substream+0x30>
        if (!pb_read(substream, NULL, substream->bytes_left))
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	461a      	mov	r2, r3
 800a21c:	2100      	movs	r1, #0
 800a21e:	6838      	ldr	r0, [r7, #0]
 800a220:	f7ff fcea 	bl	8009bf8 <pb_read>
 800a224:	4603      	mov	r3, r0
 800a226:	f083 0301 	eor.w	r3, r3, #1
 800a22a:	b2db      	uxtb	r3, r3
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d001      	beq.n	800a234 <pb_close_string_substream+0x30>
            return false;
 800a230:	2300      	movs	r3, #0
 800a232:	e008      	b.n	800a246 <pb_close_string_substream+0x42>
    }

    stream->state = substream->state;
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	685a      	ldr	r2, [r3, #4]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	605a      	str	r2, [r3, #4]

#ifndef PB_NO_ERRMSG
    stream->errmsg = substream->errmsg;
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	68da      	ldr	r2, [r3, #12]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	60da      	str	r2, [r3, #12]
#endif
    return true;
 800a244:	2301      	movs	r3, #1
}
 800a246:	4618      	mov	r0, r3
 800a248:	3708      	adds	r7, #8
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
	...

0800a250 <decode_static_field>:
/*************************
 * Decode a single field *
 *************************/

static bool checkreturn decode_static_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *iter)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b08e      	sub	sp, #56	; 0x38
 800a254:	af00      	add	r7, sp, #0
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	460b      	mov	r3, r1
 800a25a:	607a      	str	r2, [r7, #4]
 800a25c:	72fb      	strb	r3, [r7, #11]
    pb_type_t type;
    pb_decoder_t func;
    
    type = iter->pos->type;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	789b      	ldrb	r3, [r3, #2]
 800a264:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    func = PB_DECODERS[PB_LTYPE(type)];
 800a268:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a26c:	f003 030f 	and.w	r3, r3, #15
 800a270:	4a85      	ldr	r2, [pc, #532]	; (800a488 <decode_static_field+0x238>)
 800a272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a276:	633b      	str	r3, [r7, #48]	; 0x30

    switch (PB_HTYPE(type))
 800a278:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a27c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a280:	2b10      	cmp	r3, #16
 800a282:	d013      	beq.n	800a2ac <decode_static_field+0x5c>
 800a284:	2b10      	cmp	r3, #16
 800a286:	dc02      	bgt.n	800a28e <decode_static_field+0x3e>
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d006      	beq.n	800a29a <decode_static_field+0x4a>
 800a28c:	e0ec      	b.n	800a468 <decode_static_field+0x218>
 800a28e:	2b20      	cmp	r3, #32
 800a290:	d01f      	beq.n	800a2d2 <decode_static_field+0x82>
 800a292:	2b30      	cmp	r3, #48	; 0x30
 800a294:	f000 80bd 	beq.w	800a412 <decode_static_field+0x1c2>
 800a298:	e0e6      	b.n	800a468 <decode_static_field+0x218>
    {
        case PB_HTYPE_REQUIRED:
            return func(stream, iter->pos, iter->pData);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6859      	ldr	r1, [r3, #4]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	691a      	ldr	r2, [r3, #16]
 800a2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a4:	68f8      	ldr	r0, [r7, #12]
 800a2a6:	4798      	blx	r3
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	e0e8      	b.n	800a47e <decode_static_field+0x22e>
            
        case PB_HTYPE_OPTIONAL:
            if (iter->pSize != iter->pData)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	695a      	ldr	r2, [r3, #20]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	691b      	ldr	r3, [r3, #16]
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d003      	beq.n	800a2c0 <decode_static_field+0x70>
                *(bool*)iter->pSize = true;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	695b      	ldr	r3, [r3, #20]
 800a2bc:	2201      	movs	r2, #1
 800a2be:	701a      	strb	r2, [r3, #0]
            return func(stream, iter->pos, iter->pData);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6859      	ldr	r1, [r3, #4]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	691a      	ldr	r2, [r3, #16]
 800a2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ca:	68f8      	ldr	r0, [r7, #12]
 800a2cc:	4798      	blx	r3
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	e0d5      	b.n	800a47e <decode_static_field+0x22e>
    
        case PB_HTYPE_REPEATED:
            if (wire_type == PB_WT_STRING
 800a2d2:	7afb      	ldrb	r3, [r7, #11]
 800a2d4:	2b02      	cmp	r3, #2
 800a2d6:	d16a      	bne.n	800a3ae <decode_static_field+0x15e>
                && PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 800a2d8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a2dc:	f003 030f 	and.w	r3, r3, #15
 800a2e0:	2b04      	cmp	r3, #4
 800a2e2:	dc64      	bgt.n	800a3ae <decode_static_field+0x15e>
            {
                /* Packed array */
                bool status = true;
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                pb_size_t *size = (pb_size_t*)iter->pSize;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	695b      	ldr	r3, [r3, #20]
 800a2ee:	62fb      	str	r3, [r7, #44]	; 0x2c

                pb_istream_t substream;
                if (!pb_make_string_substream(stream, &substream))
 800a2f0:	f107 0310 	add.w	r3, r7, #16
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	68f8      	ldr	r0, [r7, #12]
 800a2f8:	f7ff ff4a 	bl	800a190 <pb_make_string_substream>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	f083 0301 	eor.w	r3, r3, #1
 800a302:	b2db      	uxtb	r3, r3
 800a304:	2b00      	cmp	r3, #0
 800a306:	d026      	beq.n	800a356 <decode_static_field+0x106>
                    return false;
 800a308:	2300      	movs	r3, #0
 800a30a:	e0b8      	b.n	800a47e <decode_static_field+0x22e>

                while (substream.bytes_left > 0 && *size < iter->pos->array_size)
                {
                    void *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	691b      	ldr	r3, [r3, #16]
 800a310:	687a      	ldr	r2, [r7, #4]
 800a312:	6852      	ldr	r2, [r2, #4]
 800a314:	f8b2 2007 	ldrh.w	r2, [r2, #7]
 800a318:	b292      	uxth	r2, r2
 800a31a:	4611      	mov	r1, r2
 800a31c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a31e:	8812      	ldrh	r2, [r2, #0]
 800a320:	fb02 f201 	mul.w	r2, r2, r1
 800a324:	4413      	add	r3, r2
 800a326:	62bb      	str	r3, [r7, #40]	; 0x28
                    if (!func(&substream, iter->pos, pItem))
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6859      	ldr	r1, [r3, #4]
 800a32c:	f107 0010 	add.w	r0, r7, #16
 800a330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a332:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a334:	4798      	blx	r3
 800a336:	4603      	mov	r3, r0
 800a338:	f083 0301 	eor.w	r3, r3, #1
 800a33c:	b2db      	uxtb	r3, r3
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d003      	beq.n	800a34a <decode_static_field+0xfa>
                    {
                        status = false;
 800a342:	2300      	movs	r3, #0
 800a344:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                        break;
 800a348:	e011      	b.n	800a36e <decode_static_field+0x11e>
                    }
                    (*size)++;
 800a34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a34c:	881b      	ldrh	r3, [r3, #0]
 800a34e:	3301      	adds	r3, #1
 800a350:	b29a      	uxth	r2, r3
 800a352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a354:	801a      	strh	r2, [r3, #0]
                while (substream.bytes_left > 0 && *size < iter->pos->array_size)
 800a356:	69bb      	ldr	r3, [r7, #24]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d008      	beq.n	800a36e <decode_static_field+0x11e>
 800a35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a35e:	881a      	ldrh	r2, [r3, #0]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800a368:	b29b      	uxth	r3, r3
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d3ce      	bcc.n	800a30c <decode_static_field+0xbc>
                }

                if (substream.bytes_left != 0)
 800a36e:	69bb      	ldr	r3, [r7, #24]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d00b      	beq.n	800a38c <decode_static_field+0x13c>
                    PB_RETURN_ERROR(stream, "array overflow");
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	68db      	ldr	r3, [r3, #12]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d002      	beq.n	800a382 <decode_static_field+0x132>
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	68db      	ldr	r3, [r3, #12]
 800a380:	e000      	b.n	800a384 <decode_static_field+0x134>
 800a382:	4b42      	ldr	r3, [pc, #264]	; (800a48c <decode_static_field+0x23c>)
 800a384:	68fa      	ldr	r2, [r7, #12]
 800a386:	60d3      	str	r3, [r2, #12]
 800a388:	2300      	movs	r3, #0
 800a38a:	e078      	b.n	800a47e <decode_static_field+0x22e>
                if (!pb_close_string_substream(stream, &substream))
 800a38c:	f107 0310 	add.w	r3, r7, #16
 800a390:	4619      	mov	r1, r3
 800a392:	68f8      	ldr	r0, [r7, #12]
 800a394:	f7ff ff36 	bl	800a204 <pb_close_string_substream>
 800a398:	4603      	mov	r3, r0
 800a39a:	f083 0301 	eor.w	r3, r3, #1
 800a39e:	b2db      	uxtb	r3, r3
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d001      	beq.n	800a3a8 <decode_static_field+0x158>
                    return false;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	e06a      	b.n	800a47e <decode_static_field+0x22e>

                return status;
 800a3a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a3ac:	e067      	b.n	800a47e <decode_static_field+0x22e>
            }
            else
            {
                /* Repeated field */
                pb_size_t *size = (pb_size_t*)iter->pSize;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	695b      	ldr	r3, [r3, #20]
 800a3b2:	627b      	str	r3, [r7, #36]	; 0x24
                char *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	691b      	ldr	r3, [r3, #16]
 800a3b8:	687a      	ldr	r2, [r7, #4]
 800a3ba:	6852      	ldr	r2, [r2, #4]
 800a3bc:	f8b2 2007 	ldrh.w	r2, [r2, #7]
 800a3c0:	b292      	uxth	r2, r2
 800a3c2:	4611      	mov	r1, r2
 800a3c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3c6:	8812      	ldrh	r2, [r2, #0]
 800a3c8:	fb02 f201 	mul.w	r2, r2, r1
 800a3cc:	4413      	add	r3, r2
 800a3ce:	623b      	str	r3, [r7, #32]

                if ((*size)++ >= iter->pos->array_size)
 800a3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d2:	881b      	ldrh	r3, [r3, #0]
 800a3d4:	1c5a      	adds	r2, r3, #1
 800a3d6:	b291      	uxth	r1, r2
 800a3d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3da:	8011      	strh	r1, [r2, #0]
 800a3dc:	687a      	ldr	r2, [r7, #4]
 800a3de:	6852      	ldr	r2, [r2, #4]
 800a3e0:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 800a3e4:	b292      	uxth	r2, r2
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d30b      	bcc.n	800a402 <decode_static_field+0x1b2>
                    PB_RETURN_ERROR(stream, "array overflow");
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	68db      	ldr	r3, [r3, #12]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d002      	beq.n	800a3f8 <decode_static_field+0x1a8>
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	68db      	ldr	r3, [r3, #12]
 800a3f6:	e000      	b.n	800a3fa <decode_static_field+0x1aa>
 800a3f8:	4b24      	ldr	r3, [pc, #144]	; (800a48c <decode_static_field+0x23c>)
 800a3fa:	68fa      	ldr	r2, [r7, #12]
 800a3fc:	60d3      	str	r3, [r2, #12]
 800a3fe:	2300      	movs	r3, #0
 800a400:	e03d      	b.n	800a47e <decode_static_field+0x22e>

                return func(stream, iter->pos, pItem);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6859      	ldr	r1, [r3, #4]
 800a406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a408:	6a3a      	ldr	r2, [r7, #32]
 800a40a:	68f8      	ldr	r0, [r7, #12]
 800a40c:	4798      	blx	r3
 800a40e:	4603      	mov	r3, r0
 800a410:	e035      	b.n	800a47e <decode_static_field+0x22e>
            }

        case PB_HTYPE_ONEOF:
            *(pb_size_t*)iter->pSize = iter->pos->tag;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	685a      	ldr	r2, [r3, #4]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	695b      	ldr	r3, [r3, #20]
 800a41a:	8812      	ldrh	r2, [r2, #0]
 800a41c:	b292      	uxth	r2, r2
 800a41e:	801a      	strh	r2, [r3, #0]
            if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 800a420:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a424:	f003 030f 	and.w	r3, r3, #15
 800a428:	2b07      	cmp	r3, #7
 800a42a:	d114      	bne.n	800a456 <decode_static_field+0x206>
            {
                /* We memset to zero so that any callbacks are set to NULL.
                 * Then set any default values. */
                memset(iter->pData, 0, iter->pos->data_size);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6918      	ldr	r0, [r3, #16]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800a438:	b29b      	uxth	r3, r3
 800a43a:	461a      	mov	r2, r3
 800a43c:	2100      	movs	r1, #0
 800a43e:	f004 ffd0 	bl	800f3e2 <memset>
                pb_message_set_to_defaults((const pb_field_t*)iter->pos->ptr, iter->pData);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	685b      	ldr	r3, [r3, #4]
 800a446:	f8d3 200b 	ldr.w	r2, [r3, #11]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	691b      	ldr	r3, [r3, #16]
 800a44e:	4619      	mov	r1, r3
 800a450:	4610      	mov	r0, r2
 800a452:	f000 fa55 	bl	800a900 <pb_message_set_to_defaults>
            }
            return func(stream, iter->pos, iter->pData);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6859      	ldr	r1, [r3, #4]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	691a      	ldr	r2, [r3, #16]
 800a45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a460:	68f8      	ldr	r0, [r7, #12]
 800a462:	4798      	blx	r3
 800a464:	4603      	mov	r3, r0
 800a466:	e00a      	b.n	800a47e <decode_static_field+0x22e>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	68db      	ldr	r3, [r3, #12]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d002      	beq.n	800a476 <decode_static_field+0x226>
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	68db      	ldr	r3, [r3, #12]
 800a474:	e000      	b.n	800a478 <decode_static_field+0x228>
 800a476:	4b06      	ldr	r3, [pc, #24]	; (800a490 <decode_static_field+0x240>)
 800a478:	68fa      	ldr	r2, [r7, #12]
 800a47a:	60d3      	str	r3, [r2, #12]
 800a47c:	2300      	movs	r3, #0
    }
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3738      	adds	r7, #56	; 0x38
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}
 800a486:	bf00      	nop
 800a488:	0801b444 	.word	0x0801b444
 800a48c:	08010f38 	.word	0x08010f38
 800a490:	08010f48 	.word	0x08010f48

0800a494 <decode_pointer_field>:
    }
}
#endif

static bool checkreturn decode_pointer_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *iter)
{
 800a494:	b480      	push	{r7}
 800a496:	b085      	sub	sp, #20
 800a498:	af00      	add	r7, sp, #0
 800a49a:	60f8      	str	r0, [r7, #12]
 800a49c:	460b      	mov	r3, r1
 800a49e:	607a      	str	r2, [r7, #4]
 800a4a0:	72fb      	strb	r3, [r7, #11]
#ifndef PB_ENABLE_MALLOC
    PB_UNUSED(wire_type);
    PB_UNUSED(iter);
    PB_RETURN_ERROR(stream, "no malloc support");
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	68db      	ldr	r3, [r3, #12]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d002      	beq.n	800a4b0 <decode_pointer_field+0x1c>
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	68db      	ldr	r3, [r3, #12]
 800a4ae:	e000      	b.n	800a4b2 <decode_pointer_field+0x1e>
 800a4b0:	4b04      	ldr	r3, [pc, #16]	; (800a4c4 <decode_pointer_field+0x30>)
 800a4b2:	68fa      	ldr	r2, [r7, #12]
 800a4b4:	60d3      	str	r3, [r2, #12]
 800a4b6:	2300      	movs	r3, #0

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
    }
#endif
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3714      	adds	r7, #20
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr
 800a4c4:	08010f5c 	.word	0x08010f5c

0800a4c8 <decode_callback_field>:

static bool checkreturn decode_callback_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *iter)
{
 800a4c8:	b590      	push	{r4, r7, lr}
 800a4ca:	b097      	sub	sp, #92	; 0x5c
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	61f8      	str	r0, [r7, #28]
 800a4d0:	460b      	mov	r3, r1
 800a4d2:	617a      	str	r2, [r7, #20]
 800a4d4:	76fb      	strb	r3, [r7, #27]
    pb_callback_t *pCallback = (pb_callback_t*)iter->pData;
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	691b      	ldr	r3, [r3, #16]
 800a4da:	657b      	str	r3, [r7, #84]	; 0x54
    
#ifdef PB_OLD_CALLBACK_STYLE
    void *arg = pCallback->arg;
#else
    void **arg = &(pCallback->arg);
 800a4dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4de:	3304      	adds	r3, #4
 800a4e0:	653b      	str	r3, [r7, #80]	; 0x50
#endif
    
    if (pCallback == NULL || pCallback->funcs.decode == NULL)
 800a4e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d003      	beq.n	800a4f0 <decode_callback_field+0x28>
 800a4e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d106      	bne.n	800a4fe <decode_callback_field+0x36>
        return pb_skip_field(stream, wire_type);
 800a4f0:	7efb      	ldrb	r3, [r7, #27]
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	69f8      	ldr	r0, [r7, #28]
 800a4f6:	f7ff fdad 	bl	800a054 <pb_skip_field>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	e065      	b.n	800a5ca <decode_callback_field+0x102>
    
    if (wire_type == PB_WT_STRING)
 800a4fe:	7efb      	ldrb	r3, [r7, #27]
 800a500:	2b02      	cmp	r3, #2
 800a502:	d13a      	bne.n	800a57a <decode_callback_field+0xb2>
    {
        pb_istream_t substream;
        
        if (!pb_make_string_substream(stream, &substream))
 800a504:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a508:	4619      	mov	r1, r3
 800a50a:	69f8      	ldr	r0, [r7, #28]
 800a50c:	f7ff fe40 	bl	800a190 <pb_make_string_substream>
 800a510:	4603      	mov	r3, r0
 800a512:	f083 0301 	eor.w	r3, r3, #1
 800a516:	b2db      	uxtb	r3, r3
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d001      	beq.n	800a520 <decode_callback_field+0x58>
            return false;
 800a51c:	2300      	movs	r3, #0
 800a51e:	e054      	b.n	800a5ca <decode_callback_field+0x102>
        
        do
        {
            if (!pCallback->funcs.decode(&substream, iter->pos, arg))
 800a520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	697a      	ldr	r2, [r7, #20]
 800a526:	6851      	ldr	r1, [r2, #4]
 800a528:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800a52c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a52e:	4798      	blx	r3
 800a530:	4603      	mov	r3, r0
 800a532:	f083 0301 	eor.w	r3, r3, #1
 800a536:	b2db      	uxtb	r3, r3
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d00b      	beq.n	800a554 <decode_callback_field+0x8c>
                PB_RETURN_ERROR(stream, "callback failed");
 800a53c:	69fb      	ldr	r3, [r7, #28]
 800a53e:	68db      	ldr	r3, [r3, #12]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d002      	beq.n	800a54a <decode_callback_field+0x82>
 800a544:	69fb      	ldr	r3, [r7, #28]
 800a546:	68db      	ldr	r3, [r3, #12]
 800a548:	e000      	b.n	800a54c <decode_callback_field+0x84>
 800a54a:	4b22      	ldr	r3, [pc, #136]	; (800a5d4 <decode_callback_field+0x10c>)
 800a54c:	69fa      	ldr	r2, [r7, #28]
 800a54e:	60d3      	str	r3, [r2, #12]
 800a550:	2300      	movs	r3, #0
 800a552:	e03a      	b.n	800a5ca <decode_callback_field+0x102>
        } while (substream.bytes_left);
 800a554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a556:	2b00      	cmp	r3, #0
 800a558:	d1e2      	bne.n	800a520 <decode_callback_field+0x58>
        
        if (!pb_close_string_substream(stream, &substream))
 800a55a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a55e:	4619      	mov	r1, r3
 800a560:	69f8      	ldr	r0, [r7, #28]
 800a562:	f7ff fe4f 	bl	800a204 <pb_close_string_substream>
 800a566:	4603      	mov	r3, r0
 800a568:	f083 0301 	eor.w	r3, r3, #1
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d001      	beq.n	800a576 <decode_callback_field+0xae>
            return false;
 800a572:	2300      	movs	r3, #0
 800a574:	e029      	b.n	800a5ca <decode_callback_field+0x102>

        return true;
 800a576:	2301      	movs	r3, #1
 800a578:	e027      	b.n	800a5ca <decode_callback_field+0x102>
         * This is required so that we can limit the stream length,
         * which in turn allows to use same callback for packed and
         * not-packed fields. */
        pb_istream_t substream;
        pb_byte_t buffer[10];
        size_t size = sizeof(buffer);
 800a57a:	230a      	movs	r3, #10
 800a57c:	623b      	str	r3, [r7, #32]
        
        if (!read_raw_value(stream, wire_type, buffer, &size))
 800a57e:	f107 0320 	add.w	r3, r7, #32
 800a582:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800a586:	7ef9      	ldrb	r1, [r7, #27]
 800a588:	69f8      	ldr	r0, [r7, #28]
 800a58a:	f7ff fda5 	bl	800a0d8 <read_raw_value>
 800a58e:	4603      	mov	r3, r0
 800a590:	f083 0301 	eor.w	r3, r3, #1
 800a594:	b2db      	uxtb	r3, r3
 800a596:	2b00      	cmp	r3, #0
 800a598:	d001      	beq.n	800a59e <decode_callback_field+0xd6>
            return false;
 800a59a:	2300      	movs	r3, #0
 800a59c:	e015      	b.n	800a5ca <decode_callback_field+0x102>
        substream = pb_istream_from_buffer(buffer, size);
 800a59e:	6a3a      	ldr	r2, [r7, #32]
 800a5a0:	463b      	mov	r3, r7
 800a5a2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f7ff fbca 	bl	8009d40 <pb_istream_from_buffer>
 800a5ac:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800a5b0:	463b      	mov	r3, r7
 800a5b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a5b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 800a5b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	697a      	ldr	r2, [r7, #20]
 800a5be:	6851      	ldr	r1, [r2, #4]
 800a5c0:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800a5c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a5c6:	4798      	blx	r3
 800a5c8:	4603      	mov	r3, r0
    }
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	375c      	adds	r7, #92	; 0x5c
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd90      	pop	{r4, r7, pc}
 800a5d2:	bf00      	nop
 800a5d4:	08010f70 	.word	0x08010f70

0800a5d8 <decode_field>:

static bool checkreturn decode_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *iter)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b084      	sub	sp, #16
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	60f8      	str	r0, [r7, #12]
 800a5e0:	460b      	mov	r3, r1
 800a5e2:	607a      	str	r2, [r7, #4]
 800a5e4:	72fb      	strb	r3, [r7, #11]
        if (!pb_release_union_field(stream, iter))
            return false;
    }
#endif

    switch (PB_ATYPE(iter->pos->type))
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	789b      	ldrb	r3, [r3, #2]
 800a5ec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a5f0:	2b40      	cmp	r3, #64	; 0x40
 800a5f2:	d013      	beq.n	800a61c <decode_field+0x44>
 800a5f4:	2b80      	cmp	r3, #128	; 0x80
 800a5f6:	d009      	beq.n	800a60c <decode_field+0x34>
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d117      	bne.n	800a62c <decode_field+0x54>
    {
        case PB_ATYPE_STATIC:
            return decode_static_field(stream, wire_type, iter);
 800a5fc:	7afb      	ldrb	r3, [r7, #11]
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	4619      	mov	r1, r3
 800a602:	68f8      	ldr	r0, [r7, #12]
 800a604:	f7ff fe24 	bl	800a250 <decode_static_field>
 800a608:	4603      	mov	r3, r0
 800a60a:	e01a      	b.n	800a642 <decode_field+0x6a>
        
        case PB_ATYPE_POINTER:
            return decode_pointer_field(stream, wire_type, iter);
 800a60c:	7afb      	ldrb	r3, [r7, #11]
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	4619      	mov	r1, r3
 800a612:	68f8      	ldr	r0, [r7, #12]
 800a614:	f7ff ff3e 	bl	800a494 <decode_pointer_field>
 800a618:	4603      	mov	r3, r0
 800a61a:	e012      	b.n	800a642 <decode_field+0x6a>
        
        case PB_ATYPE_CALLBACK:
            return decode_callback_field(stream, wire_type, iter);
 800a61c:	7afb      	ldrb	r3, [r7, #11]
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	4619      	mov	r1, r3
 800a622:	68f8      	ldr	r0, [r7, #12]
 800a624:	f7ff ff50 	bl	800a4c8 <decode_callback_field>
 800a628:	4603      	mov	r3, r0
 800a62a:	e00a      	b.n	800a642 <decode_field+0x6a>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d002      	beq.n	800a63a <decode_field+0x62>
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	68db      	ldr	r3, [r3, #12]
 800a638:	e000      	b.n	800a63c <decode_field+0x64>
 800a63a:	4b04      	ldr	r3, [pc, #16]	; (800a64c <decode_field+0x74>)
 800a63c:	68fa      	ldr	r2, [r7, #12]
 800a63e:	60d3      	str	r3, [r2, #12]
 800a640:	2300      	movs	r3, #0
    }
}
 800a642:	4618      	mov	r0, r3
 800a644:	3710      	adds	r7, #16
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop
 800a64c:	08010f48 	.word	0x08010f48

0800a650 <iter_from_extension>:

static void iter_from_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b084      	sub	sp, #16
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
    /* Fake a field iterator for the extension field.
     * It is not actually safe to advance this iterator, but decode_field
     * will not even try to. */
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	689b      	ldr	r3, [r3, #8]
 800a660:	60fb      	str	r3, [r7, #12]
    (void)pb_field_iter_begin(iter, field, extension->dest);
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	461a      	mov	r2, r3
 800a668:	68f9      	ldr	r1, [r7, #12]
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f7ff f9b8 	bl	80099e0 <pb_field_iter_begin>
    iter->pData = extension->dest;
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	685a      	ldr	r2, [r3, #4]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	611a      	str	r2, [r3, #16]
    iter->pSize = &extension->found;
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	f103 020c 	add.w	r2, r3, #12
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	615a      	str	r2, [r3, #20]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	789b      	ldrb	r3, [r3, #2]
 800a686:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a68a:	2b80      	cmp	r3, #128	; 0x80
 800a68c:	d103      	bne.n	800a696 <iter_from_extension+0x46>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        iter->pData = &extension->dest;
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	1d1a      	adds	r2, r3, #4
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	611a      	str	r2, [r3, #16]
    }
}
 800a696:	bf00      	nop
 800a698:	3710      	adds	r7, #16
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}

0800a69e <default_extension_decoder>:

/* Default handler for extension fields. Expects a pb_field_t structure
 * in extension->type->arg. */
static bool checkreturn default_extension_decoder(pb_istream_t *stream,
    pb_extension_t *extension, uint32_t tag, pb_wire_type_t wire_type)
{
 800a69e:	b580      	push	{r7, lr}
 800a6a0:	b08c      	sub	sp, #48	; 0x30
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	60f8      	str	r0, [r7, #12]
 800a6a6:	60b9      	str	r1, [r7, #8]
 800a6a8:	607a      	str	r2, [r7, #4]
 800a6aa:	70fb      	strb	r3, [r7, #3]
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	689b      	ldr	r3, [r3, #8]
 800a6b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    pb_field_iter_t iter;
    
    if (field->tag != tag)
 800a6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b6:	881b      	ldrh	r3, [r3, #0]
 800a6b8:	b29b      	uxth	r3, r3
 800a6ba:	461a      	mov	r2, r3
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d001      	beq.n	800a6c6 <default_extension_decoder+0x28>
        return true;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	e010      	b.n	800a6e8 <default_extension_decoder+0x4a>
    
    iter_from_extension(&iter, extension);
 800a6c6:	f107 0314 	add.w	r3, r7, #20
 800a6ca:	68b9      	ldr	r1, [r7, #8]
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f7ff ffbf 	bl	800a650 <iter_from_extension>
    extension->found = true;
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	731a      	strb	r2, [r3, #12]
    return decode_field(stream, wire_type, &iter);
 800a6d8:	f107 0214 	add.w	r2, r7, #20
 800a6dc:	78fb      	ldrb	r3, [r7, #3]
 800a6de:	4619      	mov	r1, r3
 800a6e0:	68f8      	ldr	r0, [r7, #12]
 800a6e2:	f7ff ff79 	bl	800a5d8 <decode_field>
 800a6e6:	4603      	mov	r3, r0
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3730      	adds	r7, #48	; 0x30
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <decode_extension>:

/* Try to decode an unknown field as an extension field. Tries each extension
 * decoder in turn, until one of them handles the field or loop ends. */
static bool checkreturn decode_extension(pb_istream_t *stream,
    uint32_t tag, pb_wire_type_t wire_type, pb_field_iter_t *iter)
{
 800a6f0:	b590      	push	{r4, r7, lr}
 800a6f2:	b089      	sub	sp, #36	; 0x24
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	60b9      	str	r1, [r7, #8]
 800a6fa:	603b      	str	r3, [r7, #0]
 800a6fc:	4613      	mov	r3, r2
 800a6fe:	71fb      	strb	r3, [r7, #7]
    pb_extension_t *extension = *(pb_extension_t* const *)iter->pData;
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	691b      	ldr	r3, [r3, #16]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	61fb      	str	r3, [r7, #28]
    size_t pos = stream->bytes_left;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	689b      	ldr	r3, [r3, #8]
 800a70c:	617b      	str	r3, [r7, #20]
    
    while (extension != NULL && pos == stream->bytes_left)
 800a70e:	e022      	b.n	800a756 <decode_extension+0x66>
    {
        bool status;
        if (extension->type->decode)
 800a710:	69fb      	ldr	r3, [r7, #28]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d00a      	beq.n	800a730 <decode_extension+0x40>
            status = extension->type->decode(stream, extension, tag, wire_type);
 800a71a:	69fb      	ldr	r3, [r7, #28]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	681c      	ldr	r4, [r3, #0]
 800a720:	79fb      	ldrb	r3, [r7, #7]
 800a722:	68ba      	ldr	r2, [r7, #8]
 800a724:	69f9      	ldr	r1, [r7, #28]
 800a726:	68f8      	ldr	r0, [r7, #12]
 800a728:	47a0      	blx	r4
 800a72a:	4603      	mov	r3, r0
 800a72c:	76fb      	strb	r3, [r7, #27]
 800a72e:	e007      	b.n	800a740 <decode_extension+0x50>
        else
            status = default_extension_decoder(stream, extension, tag, wire_type);
 800a730:	79fb      	ldrb	r3, [r7, #7]
 800a732:	68ba      	ldr	r2, [r7, #8]
 800a734:	69f9      	ldr	r1, [r7, #28]
 800a736:	68f8      	ldr	r0, [r7, #12]
 800a738:	f7ff ffb1 	bl	800a69e <default_extension_decoder>
 800a73c:	4603      	mov	r3, r0
 800a73e:	76fb      	strb	r3, [r7, #27]

        if (!status)
 800a740:	7efb      	ldrb	r3, [r7, #27]
 800a742:	f083 0301 	eor.w	r3, r3, #1
 800a746:	b2db      	uxtb	r3, r3
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d001      	beq.n	800a750 <decode_extension+0x60>
            return false;
 800a74c:	2300      	movs	r3, #0
 800a74e:	e00b      	b.n	800a768 <decode_extension+0x78>
        
        extension = extension->next;
 800a750:	69fb      	ldr	r3, [r7, #28]
 800a752:	689b      	ldr	r3, [r3, #8]
 800a754:	61fb      	str	r3, [r7, #28]
    while (extension != NULL && pos == stream->bytes_left)
 800a756:	69fb      	ldr	r3, [r7, #28]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d004      	beq.n	800a766 <decode_extension+0x76>
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	689b      	ldr	r3, [r3, #8]
 800a760:	697a      	ldr	r2, [r7, #20]
 800a762:	429a      	cmp	r2, r3
 800a764:	d0d4      	beq.n	800a710 <decode_extension+0x20>
    }
    
    return true;
 800a766:	2301      	movs	r3, #1
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3724      	adds	r7, #36	; 0x24
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd90      	pop	{r4, r7, pc}

0800a770 <find_extension_field>:

/* Step through the iterator until an extension field is found or until all
 * entries have been checked. There can be only one extension field per
 * message. Returns false if no extension field is found. */
static bool checkreturn find_extension_field(pb_field_iter_t *iter)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b084      	sub	sp, #16
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
    const pb_field_t *start = iter->pos;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	685b      	ldr	r3, [r3, #4]
 800a77c:	60fb      	str	r3, [r7, #12]
    
    do {
        if (PB_LTYPE(iter->pos->type) == PB_LTYPE_EXTENSION)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	789b      	ldrb	r3, [r3, #2]
 800a784:	f003 030f 	and.w	r3, r3, #15
 800a788:	2b08      	cmp	r3, #8
 800a78a:	d101      	bne.n	800a790 <find_extension_field+0x20>
            return true;
 800a78c:	2301      	movs	r3, #1
 800a78e:	e008      	b.n	800a7a2 <find_extension_field+0x32>
        (void)pb_field_iter_next(iter);
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f7ff f95a 	bl	8009a4a <pb_field_iter_next>
    } while (iter->pos != start);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	68fa      	ldr	r2, [r7, #12]
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d1ee      	bne.n	800a77e <find_extension_field+0xe>
    
    return false;
 800a7a0:	2300      	movs	r3, #0
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3710      	adds	r7, #16
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}

0800a7aa <pb_field_set_to_default>:

/* Initialize message fields to default values, recursively */
static void pb_field_set_to_default(pb_field_iter_t *iter)
{
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b08a      	sub	sp, #40	; 0x28
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
    pb_type_t type;
    type = iter->pos->type;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	685b      	ldr	r3, [r3, #4]
 800a7b6:	789b      	ldrb	r3, [r3, #2]
 800a7b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    
    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 800a7bc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a7c0:	f003 030f 	and.w	r3, r3, #15
 800a7c4:	2b08      	cmp	r3, #8
 800a7c6:	d119      	bne.n	800a7fc <pb_field_set_to_default+0x52>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	691b      	ldr	r3, [r3, #16]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	627b      	str	r3, [r7, #36]	; 0x24
        while (ext != NULL)
 800a7d0:	e010      	b.n	800a7f4 <pb_field_set_to_default+0x4a>
        {
            pb_field_iter_t ext_iter;
            ext->found = false;
 800a7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	731a      	strb	r2, [r3, #12]
            iter_from_extension(&ext_iter, ext);
 800a7d8:	f107 0308 	add.w	r3, r7, #8
 800a7dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7ff ff36 	bl	800a650 <iter_from_extension>
            pb_field_set_to_default(&ext_iter);
 800a7e4:	f107 0308 	add.w	r3, r7, #8
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f7ff ffde 	bl	800a7aa <pb_field_set_to_default>
            ext = ext->next;
 800a7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f0:	689b      	ldr	r3, [r3, #8]
 800a7f2:	627b      	str	r3, [r7, #36]	; 0x24
        while (ext != NULL)
 800a7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d1eb      	bne.n	800a7d2 <pb_field_set_to_default+0x28>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }
}
 800a7fa:	e07d      	b.n	800a8f8 <pb_field_set_to_default+0x14e>
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 800a7fc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a800:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a804:	2b00      	cmp	r3, #0
 800a806:	d15d      	bne.n	800a8c4 <pb_field_set_to_default+0x11a>
        bool init_data = true;
 800a808:	2301      	movs	r3, #1
 800a80a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && iter->pSize != iter->pData)
 800a80e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a812:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a816:	2b10      	cmp	r3, #16
 800a818:	d10a      	bne.n	800a830 <pb_field_set_to_default+0x86>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	695a      	ldr	r2, [r3, #20]
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	691b      	ldr	r3, [r3, #16]
 800a822:	429a      	cmp	r2, r3
 800a824:	d004      	beq.n	800a830 <pb_field_set_to_default+0x86>
            *(bool*)iter->pSize = false;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	695b      	ldr	r3, [r3, #20]
 800a82a:	2200      	movs	r2, #0
 800a82c:	701a      	strb	r2, [r3, #0]
 800a82e:	e012      	b.n	800a856 <pb_field_set_to_default+0xac>
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800a830:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a834:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a838:	2b20      	cmp	r3, #32
 800a83a:	d005      	beq.n	800a848 <pb_field_set_to_default+0x9e>
                 PB_HTYPE(type) == PB_HTYPE_ONEOF)
 800a83c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a840:	f003 0330 	and.w	r3, r3, #48	; 0x30
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800a844:	2b30      	cmp	r3, #48	; 0x30
 800a846:	d106      	bne.n	800a856 <pb_field_set_to_default+0xac>
            *(pb_size_t*)iter->pSize = 0;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	695b      	ldr	r3, [r3, #20]
 800a84c:	2200      	movs	r2, #0
 800a84e:	801a      	strh	r2, [r3, #0]
            init_data = false;
 800a850:	2300      	movs	r3, #0
 800a852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (init_data)
 800a856:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d04c      	beq.n	800a8f8 <pb_field_set_to_default+0x14e>
            if (PB_LTYPE(iter->pos->type) == PB_LTYPE_SUBMESSAGE)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	789b      	ldrb	r3, [r3, #2]
 800a864:	f003 030f 	and.w	r3, r3, #15
 800a868:	2b07      	cmp	r3, #7
 800a86a:	d10a      	bne.n	800a882 <pb_field_set_to_default+0xd8>
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	f8d3 200b 	ldr.w	r2, [r3, #11]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	691b      	ldr	r3, [r3, #16]
 800a878:	4619      	mov	r1, r3
 800a87a:	4610      	mov	r0, r2
 800a87c:	f000 f840 	bl	800a900 <pb_message_set_to_defaults>
}
 800a880:	e03a      	b.n	800a8f8 <pb_field_set_to_default+0x14e>
            else if (iter->pos->ptr != NULL)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	685b      	ldr	r3, [r3, #4]
 800a886:	f8d3 300b 	ldr.w	r3, [r3, #11]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d00e      	beq.n	800a8ac <pb_field_set_to_default+0x102>
                memcpy(iter->pData, iter->pos->ptr, iter->pos->data_size);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6918      	ldr	r0, [r3, #16]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	f8d3 100b 	ldr.w	r1, [r3, #11]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800a8a2:	b29b      	uxth	r3, r3
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	f004 fd91 	bl	800f3cc <memcpy>
}
 800a8aa:	e025      	b.n	800a8f8 <pb_field_set_to_default+0x14e>
                memset(iter->pData, 0, iter->pos->data_size);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6918      	ldr	r0, [r3, #16]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	461a      	mov	r2, r3
 800a8bc:	2100      	movs	r1, #0
 800a8be:	f004 fd90 	bl	800f3e2 <memset>
}
 800a8c2:	e019      	b.n	800a8f8 <pb_field_set_to_default+0x14e>
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 800a8c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a8c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a8cc:	2b80      	cmp	r3, #128	; 0x80
 800a8ce:	d113      	bne.n	800a8f8 <pb_field_set_to_default+0x14e>
        *(void**)iter->pData = NULL;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	691b      	ldr	r3, [r3, #16]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	601a      	str	r2, [r3, #0]
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800a8d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a8dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a8e0:	2b20      	cmp	r3, #32
 800a8e2:	d005      	beq.n	800a8f0 <pb_field_set_to_default+0x146>
            PB_HTYPE(type) == PB_HTYPE_ONEOF)
 800a8e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a8e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800a8ec:	2b30      	cmp	r3, #48	; 0x30
 800a8ee:	d103      	bne.n	800a8f8 <pb_field_set_to_default+0x14e>
            *(pb_size_t*)iter->pSize = 0;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	695b      	ldr	r3, [r3, #20]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	801a      	strh	r2, [r3, #0]
}
 800a8f8:	bf00      	nop
 800a8fa:	3728      	adds	r7, #40	; 0x28
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}

0800a900 <pb_message_set_to_defaults>:

static void pb_message_set_to_defaults(const pb_field_t fields[], void *dest_struct)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b088      	sub	sp, #32
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
 800a908:	6039      	str	r1, [r7, #0]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin(&iter, fields, dest_struct))
 800a90a:	f107 0308 	add.w	r3, r7, #8
 800a90e:	683a      	ldr	r2, [r7, #0]
 800a910:	6879      	ldr	r1, [r7, #4]
 800a912:	4618      	mov	r0, r3
 800a914:	f7ff f864 	bl	80099e0 <pb_field_iter_begin>
 800a918:	4603      	mov	r3, r0
 800a91a:	f083 0301 	eor.w	r3, r3, #1
 800a91e:	b2db      	uxtb	r3, r3
 800a920:	2b00      	cmp	r3, #0
 800a922:	d10d      	bne.n	800a940 <pb_message_set_to_defaults+0x40>
        return; /* Empty message type */
    
    do
    {
        pb_field_set_to_default(&iter);
 800a924:	f107 0308 	add.w	r3, r7, #8
 800a928:	4618      	mov	r0, r3
 800a92a:	f7ff ff3e 	bl	800a7aa <pb_field_set_to_default>
    } while (pb_field_iter_next(&iter));
 800a92e:	f107 0308 	add.w	r3, r7, #8
 800a932:	4618      	mov	r0, r3
 800a934:	f7ff f889 	bl	8009a4a <pb_field_iter_next>
 800a938:	4603      	mov	r3, r0
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d1f2      	bne.n	800a924 <pb_message_set_to_defaults+0x24>
 800a93e:	e000      	b.n	800a942 <pb_message_set_to_defaults+0x42>
        return; /* Empty message type */
 800a940:	bf00      	nop
}
 800a942:	3720      	adds	r7, #32
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <pb_decode_noinit>:
/*********************
 * Decode all fields *
 *********************/

bool checkreturn pb_decode_noinit(pb_istream_t *stream, const pb_field_t fields[], void *dest_struct)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b098      	sub	sp, #96	; 0x60
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	60f8      	str	r0, [r7, #12]
 800a950:	60b9      	str	r1, [r7, #8]
 800a952:	607a      	str	r2, [r7, #4]
    uint32_t fields_seen[(PB_MAX_REQUIRED_FIELDS + 31) / 32] = {0, 0};
 800a954:	2300      	movs	r3, #0
 800a956:	63bb      	str	r3, [r7, #56]	; 0x38
 800a958:	2300      	movs	r3, #0
 800a95a:	63fb      	str	r3, [r7, #60]	; 0x3c
    const uint32_t allbits = ~(uint32_t)0;
 800a95c:	f04f 33ff 	mov.w	r3, #4294967295
 800a960:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint32_t extension_range_start = 0;
 800a962:	2300      	movs	r3, #0
 800a964:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* 'fixed_count_field' and 'fixed_count_size' track position of a repeated fixed
     * count field. This can only handle _one_ repeated fixed count field that
     * is unpacked and unordered among other (non repeated fixed count) fields.
     */
    const pb_field_t *fixed_count_field = NULL;
 800a966:	2300      	movs	r3, #0
 800a968:	65bb      	str	r3, [r7, #88]	; 0x58
    pb_size_t fixed_count_size = 0;
 800a96a:	2300      	movs	r3, #0
 800a96c:	83fb      	strh	r3, [r7, #30]

    /* Return value ignored, as empty message types will be correctly handled by
     * pb_field_iter_find() anyway. */
    (void)pb_field_iter_begin(&iter, fields, dest_struct);
 800a96e:	f107 0320 	add.w	r3, r7, #32
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	68b9      	ldr	r1, [r7, #8]
 800a976:	4618      	mov	r0, r3
 800a978:	f7ff f832 	bl	80099e0 <pb_field_iter_begin>

    while (stream->bytes_left)
 800a97c:	e0bf      	b.n	800aafe <pb_decode_noinit+0x1b6>
    {
        uint32_t tag;
        pb_wire_type_t wire_type;
        bool eof;

        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 800a97e:	f107 0316 	add.w	r3, r7, #22
 800a982:	f107 0218 	add.w	r2, r7, #24
 800a986:	f107 0117 	add.w	r1, r7, #23
 800a98a:	68f8      	ldr	r0, [r7, #12]
 800a98c:	f7ff fb2b 	bl	8009fe6 <pb_decode_tag>
 800a990:	4603      	mov	r3, r0
 800a992:	f083 0301 	eor.w	r3, r3, #1
 800a996:	b2db      	uxtb	r3, r3
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d005      	beq.n	800a9a8 <pb_decode_noinit+0x60>
        {
            if (eof)
 800a99c:	7dbb      	ldrb	r3, [r7, #22]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	f040 80b3 	bne.w	800ab0a <pb_decode_noinit+0x1c2>
                break;
            else
                return false;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	e130      	b.n	800ac0a <pb_decode_noinit+0x2c2>
        }

        if (!pb_field_iter_find(&iter, tag))
 800a9a8:	69ba      	ldr	r2, [r7, #24]
 800a9aa:	f107 0320 	add.w	r3, r7, #32
 800a9ae:	4611      	mov	r1, r2
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f7ff f8d0 	bl	8009b56 <pb_field_iter_find>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	f083 0301 	eor.w	r3, r3, #1
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d03e      	beq.n	800aa40 <pb_decode_noinit+0xf8>
        {
            /* No match found, check if it matches an extension. */
            if (tag >= extension_range_start)
 800a9c2:	69bb      	ldr	r3, [r7, #24]
 800a9c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d82d      	bhi.n	800aa26 <pb_decode_noinit+0xde>
            {
                if (!find_extension_field(&iter))
 800a9ca:	f107 0320 	add.w	r3, r7, #32
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f7ff fece 	bl	800a770 <find_extension_field>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	f083 0301 	eor.w	r3, r3, #1
 800a9da:	b2db      	uxtb	r3, r3
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d003      	beq.n	800a9e8 <pb_decode_noinit+0xa0>
                    extension_range_start = (uint32_t)-1;
 800a9e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a9e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a9e6:	e003      	b.n	800a9f0 <pb_decode_noinit+0xa8>
                else
                    extension_range_start = iter.pos->tag;
 800a9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ea:	881b      	ldrh	r3, [r3, #0]
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	65fb      	str	r3, [r7, #92]	; 0x5c

                if (tag >= extension_range_start)
 800a9f0:	69bb      	ldr	r3, [r7, #24]
 800a9f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d816      	bhi.n	800aa26 <pb_decode_noinit+0xde>
                {
                    size_t pos = stream->bytes_left;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	689b      	ldr	r3, [r3, #8]
 800a9fc:	647b      	str	r3, [r7, #68]	; 0x44

                    if (!decode_extension(stream, tag, wire_type, &iter))
 800a9fe:	69b9      	ldr	r1, [r7, #24]
 800aa00:	7dfa      	ldrb	r2, [r7, #23]
 800aa02:	f107 0320 	add.w	r3, r7, #32
 800aa06:	68f8      	ldr	r0, [r7, #12]
 800aa08:	f7ff fe72 	bl	800a6f0 <decode_extension>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	f083 0301 	eor.w	r3, r3, #1
 800aa12:	b2db      	uxtb	r3, r3
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d001      	beq.n	800aa1c <pb_decode_noinit+0xd4>
                        return false;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	e0f6      	b.n	800ac0a <pb_decode_noinit+0x2c2>

                    if (pos != stream->bytes_left)
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	689b      	ldr	r3, [r3, #8]
 800aa20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d168      	bne.n	800aaf8 <pb_decode_noinit+0x1b0>
                    }
                }
            }

            /* No match found, skip data */
            if (!pb_skip_field(stream, wire_type))
 800aa26:	7dfb      	ldrb	r3, [r7, #23]
 800aa28:	4619      	mov	r1, r3
 800aa2a:	68f8      	ldr	r0, [r7, #12]
 800aa2c:	f7ff fb12 	bl	800a054 <pb_skip_field>
 800aa30:	4603      	mov	r3, r0
 800aa32:	f083 0301 	eor.w	r3, r3, #1
 800aa36:	b2db      	uxtb	r3, r3
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d05f      	beq.n	800aafc <pb_decode_noinit+0x1b4>
                return false;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	e0e4      	b.n	800ac0a <pb_decode_noinit+0x2c2>
        }

        /* If a repeated fixed count field was found, get size from
         * 'fixed_count_field' as there is no counter contained in the struct.
         */
        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REPEATED
 800aa40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa42:	789b      	ldrb	r3, [r3, #2]
 800aa44:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800aa48:	2b20      	cmp	r3, #32
 800aa4a:	d124      	bne.n	800aa96 <pb_decode_noinit+0x14e>
            && iter.pSize == iter.pData)
 800aa4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d120      	bne.n	800aa96 <pb_decode_noinit+0x14e>
        {
            if (fixed_count_field != iter.pos) {
 800aa54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d019      	beq.n	800aa90 <pb_decode_noinit+0x148>
                /* If the new fixed count field does not match the previous one,
                 * check that the previous one is NULL or that it finished
                 * receiving all the expected data.
                 */
                if (fixed_count_field != NULL &&
 800aa5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d012      	beq.n	800aa88 <pb_decode_noinit+0x140>
                    fixed_count_size != fixed_count_field->array_size)
 800aa62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa64:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800aa68:	b29a      	uxth	r2, r3
 800aa6a:	8bfb      	ldrh	r3, [r7, #30]
                if (fixed_count_field != NULL &&
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	d00b      	beq.n	800aa88 <pb_decode_noinit+0x140>
                {
                    PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	68db      	ldr	r3, [r3, #12]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d002      	beq.n	800aa7e <pb_decode_noinit+0x136>
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	68db      	ldr	r3, [r3, #12]
 800aa7c:	e000      	b.n	800aa80 <pb_decode_noinit+0x138>
 800aa7e:	4b65      	ldr	r3, [pc, #404]	; (800ac14 <pb_decode_noinit+0x2cc>)
 800aa80:	68fa      	ldr	r2, [r7, #12]
 800aa82:	60d3      	str	r3, [r2, #12]
 800aa84:	2300      	movs	r3, #0
 800aa86:	e0c0      	b.n	800ac0a <pb_decode_noinit+0x2c2>
                }

                fixed_count_field = iter.pos;
 800aa88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa8a:	65bb      	str	r3, [r7, #88]	; 0x58
                fixed_count_size = 0;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	83fb      	strh	r3, [r7, #30]
            }

            iter.pSize = &fixed_count_size;
 800aa90:	f107 031e 	add.w	r3, r7, #30
 800aa94:	637b      	str	r3, [r7, #52]	; 0x34
        }

        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REQUIRED
 800aa96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa98:	789b      	ldrb	r3, [r3, #2]
 800aa9a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d11b      	bne.n	800aada <pb_decode_noinit+0x192>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 800aaa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa4:	2b3f      	cmp	r3, #63	; 0x3f
 800aaa6:	d818      	bhi.n	800aada <pb_decode_noinit+0x192>
        {
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 800aaa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaaa:	f003 031f 	and.w	r3, r3, #31
 800aaae:	2201      	movs	r2, #1
 800aab0:	fa02 f303 	lsl.w	r3, r2, r3
 800aab4:	64bb      	str	r3, [r7, #72]	; 0x48
            fields_seen[iter.required_field_index >> 5] |= tmp;
 800aab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab8:	095b      	lsrs	r3, r3, #5
 800aaba:	009b      	lsls	r3, r3, #2
 800aabc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800aac0:	4413      	add	r3, r2
 800aac2:	f853 1c28 	ldr.w	r1, [r3, #-40]
 800aac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac8:	095b      	lsrs	r3, r3, #5
 800aaca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aacc:	430a      	orrs	r2, r1
 800aace:	009b      	lsls	r3, r3, #2
 800aad0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800aad4:	440b      	add	r3, r1
 800aad6:	f843 2c28 	str.w	r2, [r3, #-40]
        }

        if (!decode_field(stream, wire_type, &iter))
 800aada:	7dfb      	ldrb	r3, [r7, #23]
 800aadc:	f107 0220 	add.w	r2, r7, #32
 800aae0:	4619      	mov	r1, r3
 800aae2:	68f8      	ldr	r0, [r7, #12]
 800aae4:	f7ff fd78 	bl	800a5d8 <decode_field>
 800aae8:	4603      	mov	r3, r0
 800aaea:	f083 0301 	eor.w	r3, r3, #1
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d004      	beq.n	800aafe <pb_decode_noinit+0x1b6>
            return false;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	e088      	b.n	800ac0a <pb_decode_noinit+0x2c2>
                        continue;
 800aaf8:	bf00      	nop
 800aafa:	e000      	b.n	800aafe <pb_decode_noinit+0x1b6>
            continue;
 800aafc:	bf00      	nop
    while (stream->bytes_left)
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	689b      	ldr	r3, [r3, #8]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	f47f af3b 	bne.w	800a97e <pb_decode_noinit+0x36>
 800ab08:	e000      	b.n	800ab0c <pb_decode_noinit+0x1c4>
                break;
 800ab0a:	bf00      	nop
    }

    /* Check that all elements of the last decoded fixed count field were present. */
    if (fixed_count_field != NULL &&
 800ab0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d012      	beq.n	800ab38 <pb_decode_noinit+0x1f0>
        fixed_count_size != fixed_count_field->array_size)
 800ab12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ab14:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800ab18:	b29a      	uxth	r2, r3
 800ab1a:	8bfb      	ldrh	r3, [r7, #30]
    if (fixed_count_field != NULL &&
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d00b      	beq.n	800ab38 <pb_decode_noinit+0x1f0>
    {
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	68db      	ldr	r3, [r3, #12]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d002      	beq.n	800ab2e <pb_decode_noinit+0x1e6>
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	68db      	ldr	r3, [r3, #12]
 800ab2c:	e000      	b.n	800ab30 <pb_decode_noinit+0x1e8>
 800ab2e:	4b39      	ldr	r3, [pc, #228]	; (800ac14 <pb_decode_noinit+0x2cc>)
 800ab30:	68fa      	ldr	r2, [r7, #12]
 800ab32:	60d3      	str	r3, [r2, #12]
 800ab34:	2300      	movs	r3, #0
 800ab36:	e068      	b.n	800ac0a <pb_decode_noinit+0x2c2>
         */
        unsigned req_field_count;
        pb_type_t last_type;
        unsigned i;
        do {
            req_field_count = iter.required_field_index;
 800ab38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab3a:	657b      	str	r3, [r7, #84]	; 0x54
            last_type = iter.pos->type;
 800ab3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab3e:	789b      	ldrb	r3, [r3, #2]
 800ab40:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        } while (pb_field_iter_next(&iter));
 800ab44:	f107 0320 	add.w	r3, r7, #32
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f7fe ff7e 	bl	8009a4a <pb_field_iter_next>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d1f1      	bne.n	800ab38 <pb_decode_noinit+0x1f0>
        
        /* Fixup if last field was also required. */
        if (PB_HTYPE(last_type) == PB_HTYPE_REQUIRED && iter.pos->tag != 0)
 800ab54:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ab58:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d107      	bne.n	800ab70 <pb_decode_noinit+0x228>
 800ab60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab62:	881b      	ldrh	r3, [r3, #0]
 800ab64:	b29b      	uxth	r3, r3
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d002      	beq.n	800ab70 <pb_decode_noinit+0x228>
            req_field_count++;
 800ab6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab6c:	3301      	adds	r3, #1
 800ab6e:	657b      	str	r3, [r7, #84]	; 0x54
        
        if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 800ab70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab72:	2b40      	cmp	r3, #64	; 0x40
 800ab74:	d901      	bls.n	800ab7a <pb_decode_noinit+0x232>
            req_field_count = PB_MAX_REQUIRED_FIELDS;
 800ab76:	2340      	movs	r3, #64	; 0x40
 800ab78:	657b      	str	r3, [r7, #84]	; 0x54

        if (req_field_count > 0)
 800ab7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d043      	beq.n	800ac08 <pb_decode_noinit+0x2c0>
        {
            /* Check the whole words */
            for (i = 0; i < (req_field_count >> 5); i++)
 800ab80:	2300      	movs	r3, #0
 800ab82:	653b      	str	r3, [r7, #80]	; 0x50
 800ab84:	e018      	b.n	800abb8 <pb_decode_noinit+0x270>
            {
                if (fields_seen[i] != allbits)
 800ab86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800ab8e:	4413      	add	r3, r2
 800ab90:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800ab94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d00b      	beq.n	800abb2 <pb_decode_noinit+0x26a>
                    PB_RETURN_ERROR(stream, "missing required field");
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	68db      	ldr	r3, [r3, #12]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d002      	beq.n	800aba8 <pb_decode_noinit+0x260>
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	68db      	ldr	r3, [r3, #12]
 800aba6:	e000      	b.n	800abaa <pb_decode_noinit+0x262>
 800aba8:	4b1b      	ldr	r3, [pc, #108]	; (800ac18 <pb_decode_noinit+0x2d0>)
 800abaa:	68fa      	ldr	r2, [r7, #12]
 800abac:	60d3      	str	r3, [r2, #12]
 800abae:	2300      	movs	r3, #0
 800abb0:	e02b      	b.n	800ac0a <pb_decode_noinit+0x2c2>
            for (i = 0; i < (req_field_count >> 5); i++)
 800abb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abb4:	3301      	adds	r3, #1
 800abb6:	653b      	str	r3, [r7, #80]	; 0x50
 800abb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abba:	095b      	lsrs	r3, r3, #5
 800abbc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d3e1      	bcc.n	800ab86 <pb_decode_noinit+0x23e>
            }
            
            /* Check the remaining bits (if any) */
            if ((req_field_count & 31) != 0)
 800abc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abc4:	f003 031f 	and.w	r3, r3, #31
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d01d      	beq.n	800ac08 <pb_decode_noinit+0x2c0>
            {
                if (fields_seen[req_field_count >> 5] !=
 800abcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abce:	095b      	lsrs	r3, r3, #5
 800abd0:	009b      	lsls	r3, r3, #2
 800abd2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800abd6:	4413      	add	r3, r2
 800abd8:	f853 2c28 	ldr.w	r2, [r3, #-40]
                    (allbits >> (32 - (req_field_count & 31))))
 800abdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abde:	f003 031f 	and.w	r3, r3, #31
 800abe2:	f1c3 0320 	rsb	r3, r3, #32
 800abe6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800abe8:	fa21 f303 	lsr.w	r3, r1, r3
                if (fields_seen[req_field_count >> 5] !=
 800abec:	429a      	cmp	r2, r3
 800abee:	d00b      	beq.n	800ac08 <pb_decode_noinit+0x2c0>
                {
                    PB_RETURN_ERROR(stream, "missing required field");
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	68db      	ldr	r3, [r3, #12]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d002      	beq.n	800abfe <pb_decode_noinit+0x2b6>
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	68db      	ldr	r3, [r3, #12]
 800abfc:	e000      	b.n	800ac00 <pb_decode_noinit+0x2b8>
 800abfe:	4b06      	ldr	r3, [pc, #24]	; (800ac18 <pb_decode_noinit+0x2d0>)
 800ac00:	68fa      	ldr	r2, [r7, #12]
 800ac02:	60d3      	str	r3, [r2, #12]
 800ac04:	2300      	movs	r3, #0
 800ac06:	e000      	b.n	800ac0a <pb_decode_noinit+0x2c2>
                }
            }
        }
    }
    
    return true;
 800ac08:	2301      	movs	r3, #1
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3760      	adds	r7, #96	; 0x60
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}
 800ac12:	bf00      	nop
 800ac14:	08010f80 	.word	0x08010f80
 800ac18:	08010fa4 	.word	0x08010fa4

0800ac1c <pb_decode>:

bool checkreturn pb_decode(pb_istream_t *stream, const pb_field_t fields[], void *dest_struct)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b086      	sub	sp, #24
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	60f8      	str	r0, [r7, #12]
 800ac24:	60b9      	str	r1, [r7, #8]
 800ac26:	607a      	str	r2, [r7, #4]
    bool status;
    pb_message_set_to_defaults(fields, dest_struct);
 800ac28:	6879      	ldr	r1, [r7, #4]
 800ac2a:	68b8      	ldr	r0, [r7, #8]
 800ac2c:	f7ff fe68 	bl	800a900 <pb_message_set_to_defaults>
    status = pb_decode_noinit(stream, fields, dest_struct);
 800ac30:	687a      	ldr	r2, [r7, #4]
 800ac32:	68b9      	ldr	r1, [r7, #8]
 800ac34:	68f8      	ldr	r0, [r7, #12]
 800ac36:	f7ff fe87 	bl	800a948 <pb_decode_noinit>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	75fb      	strb	r3, [r7, #23]
#ifdef PB_ENABLE_MALLOC
    if (!status)
        pb_release(fields, dest_struct);
#endif
    
    return status;
 800ac3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3718      	adds	r7, #24
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <pb_decode_delimited>:
        return false;
    return status;
}

bool pb_decode_delimited(pb_istream_t *stream, const pb_field_t fields[], void *dest_struct)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b08a      	sub	sp, #40	; 0x28
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	60f8      	str	r0, [r7, #12]
 800ac50:	60b9      	str	r1, [r7, #8]
 800ac52:	607a      	str	r2, [r7, #4]
    pb_istream_t substream;
    bool status;
    
    if (!pb_make_string_substream(stream, &substream))
 800ac54:	f107 0314 	add.w	r3, r7, #20
 800ac58:	4619      	mov	r1, r3
 800ac5a:	68f8      	ldr	r0, [r7, #12]
 800ac5c:	f7ff fa98 	bl	800a190 <pb_make_string_substream>
 800ac60:	4603      	mov	r3, r0
 800ac62:	f083 0301 	eor.w	r3, r3, #1
 800ac66:	b2db      	uxtb	r3, r3
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d001      	beq.n	800ac70 <pb_decode_delimited+0x28>
        return false;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	e019      	b.n	800aca4 <pb_decode_delimited+0x5c>
    
    status = pb_decode(&substream, fields, dest_struct);
 800ac70:	f107 0314 	add.w	r3, r7, #20
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	68b9      	ldr	r1, [r7, #8]
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f7ff ffcf 	bl	800ac1c <pb_decode>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (!pb_close_string_substream(stream, &substream))
 800ac84:	f107 0314 	add.w	r3, r7, #20
 800ac88:	4619      	mov	r1, r3
 800ac8a:	68f8      	ldr	r0, [r7, #12]
 800ac8c:	f7ff faba 	bl	800a204 <pb_close_string_substream>
 800ac90:	4603      	mov	r3, r0
 800ac92:	f083 0301 	eor.w	r3, r3, #1
 800ac96:	b2db      	uxtb	r3, r3
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d001      	beq.n	800aca0 <pb_decode_delimited+0x58>
        return false;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	e001      	b.n	800aca4 <pb_decode_delimited+0x5c>
    return status;
 800aca0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3728      	adds	r7, #40	; 0x28
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}

0800acac <pb_decode_svarint>:
#endif

/* Field decoders */

bool pb_decode_svarint(pb_istream_t *stream, pb_int64_t *dest)
{
 800acac:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800acb0:	b084      	sub	sp, #16
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	6078      	str	r0, [r7, #4]
 800acb6:	6039      	str	r1, [r7, #0]
    pb_uint64_t value;
    if (!pb_decode_varint(stream, &value))
 800acb8:	f107 0308 	add.w	r3, r7, #8
 800acbc:	4619      	mov	r1, r3
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f7ff f8f6 	bl	8009eb0 <pb_decode_varint>
 800acc4:	4603      	mov	r3, r0
 800acc6:	f083 0301 	eor.w	r3, r3, #1
 800acca:	b2db      	uxtb	r3, r3
 800accc:	2b00      	cmp	r3, #0
 800acce:	d001      	beq.n	800acd4 <pb_decode_svarint+0x28>
        return false;
 800acd0:	2300      	movs	r3, #0
 800acd2:	e021      	b.n	800ad18 <pb_decode_svarint+0x6c>
    
    if (value & 1)
 800acd4:	e9d7 bc02 	ldrd	fp, ip, [r7, #8]
 800acd8:	f04f 0101 	mov.w	r1, #1
 800acdc:	f04f 0200 	mov.w	r2, #0
 800ace0:	ea0b 0301 	and.w	r3, fp, r1
 800ace4:	ea0c 0402 	and.w	r4, ip, r2
 800ace8:	4323      	orrs	r3, r4
 800acea:	d00c      	beq.n	800ad06 <pb_decode_svarint+0x5a>
        *dest = (pb_int64_t)(~(value >> 1));
 800acec:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800acf0:	0862      	lsrs	r2, r4, #1
 800acf2:	ea4f 0133 	mov.w	r1, r3, rrx
 800acf6:	ea6f 0301 	mvn.w	r3, r1
 800acfa:	ea6f 0402 	mvn.w	r4, r2
 800acfe:	683a      	ldr	r2, [r7, #0]
 800ad00:	e9c2 3400 	strd	r3, r4, [r2]
 800ad04:	e007      	b.n	800ad16 <pb_decode_svarint+0x6a>
    else
        *dest = (pb_int64_t)(value >> 1);
 800ad06:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800ad0a:	0864      	lsrs	r4, r4, #1
 800ad0c:	ea4f 0333 	mov.w	r3, r3, rrx
 800ad10:	683a      	ldr	r2, [r7, #0]
 800ad12:	e9c2 3400 	strd	r3, r4, [r2]
    
    return true;
 800ad16:	2301      	movs	r3, #1
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3710      	adds	r7, #16
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800ad22 <pb_decode_fixed32>:

bool pb_decode_fixed32(pb_istream_t *stream, void *dest)
{
 800ad22:	b580      	push	{r7, lr}
 800ad24:	b084      	sub	sp, #16
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
 800ad2a:	6039      	str	r1, [r7, #0]
    pb_byte_t bytes[4];

    if (!pb_read(stream, bytes, 4))
 800ad2c:	f107 030c 	add.w	r3, r7, #12
 800ad30:	2204      	movs	r2, #4
 800ad32:	4619      	mov	r1, r3
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f7fe ff5f 	bl	8009bf8 <pb_read>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	f083 0301 	eor.w	r3, r3, #1
 800ad40:	b2db      	uxtb	r3, r3
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d001      	beq.n	800ad4a <pb_decode_fixed32+0x28>
        return false;
 800ad46:	2300      	movs	r3, #0
 800ad48:	e00d      	b.n	800ad66 <pb_decode_fixed32+0x44>
    
    *(uint32_t*)dest = ((uint32_t)bytes[0] << 0) |
 800ad4a:	7b3b      	ldrb	r3, [r7, #12]
 800ad4c:	461a      	mov	r2, r3
                       ((uint32_t)bytes[1] << 8) |
 800ad4e:	7b7b      	ldrb	r3, [r7, #13]
 800ad50:	021b      	lsls	r3, r3, #8
    *(uint32_t*)dest = ((uint32_t)bytes[0] << 0) |
 800ad52:	431a      	orrs	r2, r3
                       ((uint32_t)bytes[2] << 16) |
 800ad54:	7bbb      	ldrb	r3, [r7, #14]
 800ad56:	041b      	lsls	r3, r3, #16
                       ((uint32_t)bytes[1] << 8) |
 800ad58:	431a      	orrs	r2, r3
                       ((uint32_t)bytes[3] << 24);
 800ad5a:	7bfb      	ldrb	r3, [r7, #15]
 800ad5c:	061b      	lsls	r3, r3, #24
                       ((uint32_t)bytes[2] << 16) |
 800ad5e:	431a      	orrs	r2, r3
    *(uint32_t*)dest = ((uint32_t)bytes[0] << 0) |
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	601a      	str	r2, [r3, #0]
    return true;
 800ad64:	2301      	movs	r3, #1
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3710      	adds	r7, #16
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}

0800ad6e <pb_decode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool pb_decode_fixed64(pb_istream_t *stream, void *dest)
{
 800ad6e:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 800ad72:	b084      	sub	sp, #16
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
    pb_byte_t bytes[8];

    if (!pb_read(stream, bytes, 8))
 800ad7a:	f107 0308 	add.w	r3, r7, #8
 800ad7e:	2208      	movs	r2, #8
 800ad80:	4619      	mov	r1, r3
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f7fe ff38 	bl	8009bf8 <pb_read>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	f083 0301 	eor.w	r3, r3, #1
 800ad8e:	b2db      	uxtb	r3, r3
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d001      	beq.n	800ad98 <pb_decode_fixed64+0x2a>
        return false;
 800ad94:	2300      	movs	r3, #0
 800ad96:	e06c      	b.n	800ae72 <pb_decode_fixed64+0x104>
    
    *(uint64_t*)dest = ((uint64_t)bytes[0] << 0) |
 800ad98:	7a3b      	ldrb	r3, [r7, #8]
 800ad9a:	fa5f fb83 	uxtb.w	fp, r3
 800ad9e:	f04f 0c00 	mov.w	ip, #0
                       ((uint64_t)bytes[1] << 8) |
 800ada2:	7a7b      	ldrb	r3, [r7, #9]
 800ada4:	b2d9      	uxtb	r1, r3
 800ada6:	f04f 0200 	mov.w	r2, #0
 800adaa:	f04f 0300 	mov.w	r3, #0
 800adae:	f04f 0400 	mov.w	r4, #0
 800adb2:	0214      	lsls	r4, r2, #8
 800adb4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800adb8:	020b      	lsls	r3, r1, #8
    *(uint64_t*)dest = ((uint64_t)bytes[0] << 0) |
 800adba:	ea4b 0803 	orr.w	r8, fp, r3
 800adbe:	ea4c 0904 	orr.w	r9, ip, r4
                       ((uint64_t)bytes[2] << 16) |
 800adc2:	7abb      	ldrb	r3, [r7, #10]
 800adc4:	b2d9      	uxtb	r1, r3
 800adc6:	f04f 0200 	mov.w	r2, #0
 800adca:	f04f 0300 	mov.w	r3, #0
 800adce:	f04f 0400 	mov.w	r4, #0
 800add2:	0414      	lsls	r4, r2, #16
 800add4:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 800add8:	040b      	lsls	r3, r1, #16
                       ((uint64_t)bytes[1] << 8) |
 800adda:	ea48 0103 	orr.w	r1, r8, r3
 800adde:	ea49 0204 	orr.w	r2, r9, r4
                       ((uint64_t)bytes[3] << 24) |
 800ade2:	7afb      	ldrb	r3, [r7, #11]
 800ade4:	b2db      	uxtb	r3, r3
 800ade6:	f04f 0400 	mov.w	r4, #0
 800adea:	0a1e      	lsrs	r6, r3, #8
 800adec:	061d      	lsls	r5, r3, #24
                       ((uint64_t)bytes[2] << 16) |
 800adee:	ea41 0805 	orr.w	r8, r1, r5
 800adf2:	ea42 0906 	orr.w	r9, r2, r6
                       ((uint64_t)bytes[4] << 32) |
 800adf6:	7b3b      	ldrb	r3, [r7, #12]
 800adf8:	b2dd      	uxtb	r5, r3
 800adfa:	f04f 0600 	mov.w	r6, #0
 800adfe:	f04f 0300 	mov.w	r3, #0
 800ae02:	f04f 0400 	mov.w	r4, #0
 800ae06:	002c      	movs	r4, r5
 800ae08:	2300      	movs	r3, #0
                       ((uint64_t)bytes[3] << 24) |
 800ae0a:	ea48 0103 	orr.w	r1, r8, r3
 800ae0e:	ea49 0204 	orr.w	r2, r9, r4
                       ((uint64_t)bytes[5] << 40) |
 800ae12:	7b7b      	ldrb	r3, [r7, #13]
 800ae14:	b2dd      	uxtb	r5, r3
 800ae16:	f04f 0600 	mov.w	r6, #0
 800ae1a:	f04f 0300 	mov.w	r3, #0
 800ae1e:	f04f 0400 	mov.w	r4, #0
 800ae22:	022c      	lsls	r4, r5, #8
 800ae24:	2300      	movs	r3, #0
                       ((uint64_t)bytes[4] << 32) |
 800ae26:	ea41 0803 	orr.w	r8, r1, r3
 800ae2a:	ea42 0904 	orr.w	r9, r2, r4
                       ((uint64_t)bytes[6] << 48) |
 800ae2e:	7bbb      	ldrb	r3, [r7, #14]
 800ae30:	b2dd      	uxtb	r5, r3
 800ae32:	f04f 0600 	mov.w	r6, #0
 800ae36:	f04f 0300 	mov.w	r3, #0
 800ae3a:	f04f 0400 	mov.w	r4, #0
 800ae3e:	042c      	lsls	r4, r5, #16
 800ae40:	2300      	movs	r3, #0
                       ((uint64_t)bytes[5] << 40) |
 800ae42:	ea48 0103 	orr.w	r1, r8, r3
 800ae46:	ea49 0204 	orr.w	r2, r9, r4
                       ((uint64_t)bytes[7] << 56);
 800ae4a:	7bfb      	ldrb	r3, [r7, #15]
 800ae4c:	b2dd      	uxtb	r5, r3
 800ae4e:	f04f 0600 	mov.w	r6, #0
 800ae52:	f04f 0800 	mov.w	r8, #0
 800ae56:	f04f 0900 	mov.w	r9, #0
 800ae5a:	ea4f 6905 	mov.w	r9, r5, lsl #24
 800ae5e:	f04f 0800 	mov.w	r8, #0
                       ((uint64_t)bytes[6] << 48) |
 800ae62:	ea48 0301 	orr.w	r3, r8, r1
 800ae66:	ea49 0402 	orr.w	r4, r9, r2
    *(uint64_t*)dest = ((uint64_t)bytes[0] << 0) |
 800ae6a:	683a      	ldr	r2, [r7, #0]
 800ae6c:	e9c2 3400 	strd	r3, r4, [r2]
    
    return true;
 800ae70:	2301      	movs	r3, #1
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3710      	adds	r7, #16
 800ae76:	46bd      	mov	sp, r7
 800ae78:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

0800ae7c <pb_dec_varint>:
#endif

static bool checkreturn pb_dec_varint(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800ae7c:	b590      	push	{r4, r7, lr}
 800ae7e:	b08b      	sub	sp, #44	; 0x2c
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	60f8      	str	r0, [r7, #12]
 800ae84:	60b9      	str	r1, [r7, #8]
 800ae86:	607a      	str	r2, [r7, #4]
    pb_uint64_t value;
    pb_int64_t svalue;
    pb_int64_t clamped;
    if (!pb_decode_varint(stream, &value))
 800ae88:	f107 0310 	add.w	r3, r7, #16
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	68f8      	ldr	r0, [r7, #12]
 800ae90:	f7ff f80e 	bl	8009eb0 <pb_decode_varint>
 800ae94:	4603      	mov	r3, r0
 800ae96:	f083 0301 	eor.w	r3, r3, #1
 800ae9a:	b2db      	uxtb	r3, r3
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d001      	beq.n	800aea4 <pb_dec_varint+0x28>
        return false;
 800aea0:	2300      	movs	r3, #0
 800aea2:	e078      	b.n	800af96 <pb_dec_varint+0x11a>
     * be cast as int32_t, instead of the int64_t that should be used when
     * encoding. Previous nanopb versions had a bug in encoding. In order to
     * not break decoding of such messages, we cast <=32 bit fields to
     * int32_t first to get the sign correct.
     */
    if (field->data_size == sizeof(pb_int64_t))
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800aeaa:	b29b      	uxth	r3, r3
 800aeac:	2b08      	cmp	r3, #8
 800aeae:	d104      	bne.n	800aeba <pb_dec_varint+0x3e>
        svalue = (pb_int64_t)value;
 800aeb0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800aeb4:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800aeb8:	e005      	b.n	800aec6 <pb_dec_varint+0x4a>
    else
        svalue = (int32_t)value;
 800aeba:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800aebe:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800aec2:	e9c7 3408 	strd	r3, r4, [r7, #32]

    /* Cast to the proper field size, while checking for overflows */
    if (field->data_size == sizeof(pb_int64_t))
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800aecc:	b29b      	uxth	r3, r3
 800aece:	2b08      	cmp	r3, #8
 800aed0:	d10a      	bne.n	800aee8 <pb_dec_varint+0x6c>
        clamped = *(pb_int64_t*)dest = svalue;
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800aed8:	e9c2 3400 	strd	r3, r4, [r2]
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aee2:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800aee6:	e041      	b.n	800af6c <pb_dec_varint+0xf0>
    else if (field->data_size == sizeof(int32_t))
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800aeee:	b29b      	uxth	r3, r3
 800aef0:	2b04      	cmp	r3, #4
 800aef2:	d109      	bne.n	800af08 <pb_dec_varint+0x8c>
        clamped = *(int32_t*)dest = (int32_t)svalue;
 800aef4:	6a3a      	ldr	r2, [r7, #32]
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	601a      	str	r2, [r3, #0]
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800af02:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800af06:	e031      	b.n	800af6c <pb_dec_varint+0xf0>
    else if (field->data_size == sizeof(int_least16_t))
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800af0e:	b29b      	uxth	r3, r3
 800af10:	2b02      	cmp	r3, #2
 800af12:	d10c      	bne.n	800af2e <pb_dec_varint+0xb2>
        clamped = *(int_least16_t*)dest = (int_least16_t)svalue;
 800af14:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	801a      	strh	r2, [r3, #0]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800af22:	b21b      	sxth	r3, r3
 800af24:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800af28:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800af2c:	e01e      	b.n	800af6c <pb_dec_varint+0xf0>
    else if (field->data_size == sizeof(int_least8_t))
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800af34:	b29b      	uxth	r3, r3
 800af36:	2b01      	cmp	r3, #1
 800af38:	d10c      	bne.n	800af54 <pb_dec_varint+0xd8>
        clamped = *(int_least8_t*)dest = (int_least8_t)svalue;
 800af3a:	f997 2020 	ldrsb.w	r2, [r7, #32]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	701a      	strb	r2, [r3, #0]
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f993 3000 	ldrsb.w	r3, [r3]
 800af48:	b25b      	sxtb	r3, r3
 800af4a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800af4e:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800af52:	e00b      	b.n	800af6c <pb_dec_varint+0xf0>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	68db      	ldr	r3, [r3, #12]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d002      	beq.n	800af62 <pb_dec_varint+0xe6>
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	68db      	ldr	r3, [r3, #12]
 800af60:	e000      	b.n	800af64 <pb_dec_varint+0xe8>
 800af62:	4b0f      	ldr	r3, [pc, #60]	; (800afa0 <pb_dec_varint+0x124>)
 800af64:	68fa      	ldr	r2, [r7, #12]
 800af66:	60d3      	str	r3, [r2, #12]
 800af68:	2300      	movs	r3, #0
 800af6a:	e014      	b.n	800af96 <pb_dec_varint+0x11a>

    if (clamped != svalue)
 800af6c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800af70:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800af74:	42a2      	cmp	r2, r4
 800af76:	bf08      	it	eq
 800af78:	4299      	cmpeq	r1, r3
 800af7a:	d00b      	beq.n	800af94 <pb_dec_varint+0x118>
        PB_RETURN_ERROR(stream, "integer too large");
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	68db      	ldr	r3, [r3, #12]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d002      	beq.n	800af8a <pb_dec_varint+0x10e>
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	68db      	ldr	r3, [r3, #12]
 800af88:	e000      	b.n	800af8c <pb_dec_varint+0x110>
 800af8a:	4b06      	ldr	r3, [pc, #24]	; (800afa4 <pb_dec_varint+0x128>)
 800af8c:	68fa      	ldr	r2, [r7, #12]
 800af8e:	60d3      	str	r3, [r2, #12]
 800af90:	2300      	movs	r3, #0
 800af92:	e000      	b.n	800af96 <pb_dec_varint+0x11a>
    
    return true;
 800af94:	2301      	movs	r3, #1
}
 800af96:	4618      	mov	r0, r3
 800af98:	372c      	adds	r7, #44	; 0x2c
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd90      	pop	{r4, r7, pc}
 800af9e:	bf00      	nop
 800afa0:	08010fbc 	.word	0x08010fbc
 800afa4:	08010fd0 	.word	0x08010fd0

0800afa8 <pb_dec_uvarint>:

static bool checkreturn pb_dec_uvarint(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800afa8:	b590      	push	{r4, r7, lr}
 800afaa:	b089      	sub	sp, #36	; 0x24
 800afac:	af00      	add	r7, sp, #0
 800afae:	60f8      	str	r0, [r7, #12]
 800afb0:	60b9      	str	r1, [r7, #8]
 800afb2:	607a      	str	r2, [r7, #4]
    pb_uint64_t value, clamped;
    if (!pb_decode_varint(stream, &value))
 800afb4:	f107 0310 	add.w	r3, r7, #16
 800afb8:	4619      	mov	r1, r3
 800afba:	68f8      	ldr	r0, [r7, #12]
 800afbc:	f7fe ff78 	bl	8009eb0 <pb_decode_varint>
 800afc0:	4603      	mov	r3, r0
 800afc2:	f083 0301 	eor.w	r3, r3, #1
 800afc6:	b2db      	uxtb	r3, r3
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d001      	beq.n	800afd0 <pb_dec_uvarint+0x28>
        return false;
 800afcc:	2300      	movs	r3, #0
 800afce:	e069      	b.n	800b0a4 <pb_dec_uvarint+0xfc>
    
    /* Cast to the proper field size, while checking for overflows */
    if (field->data_size == sizeof(pb_uint64_t))
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800afd6:	b29b      	uxth	r3, r3
 800afd8:	2b08      	cmp	r3, #8
 800afda:	d10a      	bne.n	800aff2 <pb_dec_uvarint+0x4a>
        clamped = *(pb_uint64_t*)dest = value;
 800afdc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800afe0:	687a      	ldr	r2, [r7, #4]
 800afe2:	e9c2 3400 	strd	r3, r4, [r2]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800afec:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800aff0:	e043      	b.n	800b07a <pb_dec_uvarint+0xd2>
    else if (field->data_size == sizeof(uint32_t))
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800aff8:	b29b      	uxth	r3, r3
 800affa:	2b04      	cmp	r3, #4
 800affc:	d10b      	bne.n	800b016 <pb_dec_uvarint+0x6e>
        clamped = *(uint32_t*)dest = (uint32_t)value;
 800affe:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800b002:	461a      	mov	r2, r3
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	601a      	str	r2, [r3, #0]
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f04f 0400 	mov.w	r4, #0
 800b010:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800b014:	e031      	b.n	800b07a <pb_dec_uvarint+0xd2>
    else if (field->data_size == sizeof(uint_least16_t))
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	2b02      	cmp	r3, #2
 800b020:	d10c      	bne.n	800b03c <pb_dec_uvarint+0x94>
        clamped = *(uint_least16_t*)dest = (uint_least16_t)value;
 800b022:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800b026:	b29a      	uxth	r2, r3
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	801a      	strh	r2, [r3, #0]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	881b      	ldrh	r3, [r3, #0]
 800b030:	b29b      	uxth	r3, r3
 800b032:	f04f 0400 	mov.w	r4, #0
 800b036:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800b03a:	e01e      	b.n	800b07a <pb_dec_uvarint+0xd2>
    else if (field->data_size == sizeof(uint_least8_t))
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800b042:	b29b      	uxth	r3, r3
 800b044:	2b01      	cmp	r3, #1
 800b046:	d10c      	bne.n	800b062 <pb_dec_uvarint+0xba>
        clamped = *(uint_least8_t*)dest = (uint_least8_t)value;
 800b048:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800b04c:	b2da      	uxtb	r2, r3
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	701a      	strb	r2, [r3, #0]
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	b2db      	uxtb	r3, r3
 800b058:	f04f 0400 	mov.w	r4, #0
 800b05c:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800b060:	e00b      	b.n	800b07a <pb_dec_uvarint+0xd2>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	68db      	ldr	r3, [r3, #12]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d002      	beq.n	800b070 <pb_dec_uvarint+0xc8>
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	68db      	ldr	r3, [r3, #12]
 800b06e:	e000      	b.n	800b072 <pb_dec_uvarint+0xca>
 800b070:	4b0e      	ldr	r3, [pc, #56]	; (800b0ac <pb_dec_uvarint+0x104>)
 800b072:	68fa      	ldr	r2, [r7, #12]
 800b074:	60d3      	str	r3, [r2, #12]
 800b076:	2300      	movs	r3, #0
 800b078:	e014      	b.n	800b0a4 <pb_dec_uvarint+0xfc>
    
    if (clamped != value)
 800b07a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800b07e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b082:	42a2      	cmp	r2, r4
 800b084:	bf08      	it	eq
 800b086:	4299      	cmpeq	r1, r3
 800b088:	d00b      	beq.n	800b0a2 <pb_dec_uvarint+0xfa>
        PB_RETURN_ERROR(stream, "integer too large");
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	68db      	ldr	r3, [r3, #12]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d002      	beq.n	800b098 <pb_dec_uvarint+0xf0>
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	68db      	ldr	r3, [r3, #12]
 800b096:	e000      	b.n	800b09a <pb_dec_uvarint+0xf2>
 800b098:	4b05      	ldr	r3, [pc, #20]	; (800b0b0 <pb_dec_uvarint+0x108>)
 800b09a:	68fa      	ldr	r2, [r7, #12]
 800b09c:	60d3      	str	r3, [r2, #12]
 800b09e:	2300      	movs	r3, #0
 800b0a0:	e000      	b.n	800b0a4 <pb_dec_uvarint+0xfc>

    return true;
 800b0a2:	2301      	movs	r3, #1
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3724      	adds	r7, #36	; 0x24
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd90      	pop	{r4, r7, pc}
 800b0ac:	08010fbc 	.word	0x08010fbc
 800b0b0:	08010fd0 	.word	0x08010fd0

0800b0b4 <pb_dec_svarint>:

static bool checkreturn pb_dec_svarint(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800b0b4:	b590      	push	{r4, r7, lr}
 800b0b6:	b089      	sub	sp, #36	; 0x24
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	60b9      	str	r1, [r7, #8]
 800b0be:	607a      	str	r2, [r7, #4]
    pb_int64_t value, clamped;
    if (!pb_decode_svarint(stream, &value))
 800b0c0:	f107 0310 	add.w	r3, r7, #16
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	68f8      	ldr	r0, [r7, #12]
 800b0c8:	f7ff fdf0 	bl	800acac <pb_decode_svarint>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	f083 0301 	eor.w	r3, r3, #1
 800b0d2:	b2db      	uxtb	r3, r3
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d001      	beq.n	800b0dc <pb_dec_svarint+0x28>
        return false;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	e06b      	b.n	800b1b4 <pb_dec_svarint+0x100>
    
    /* Cast to the proper field size, while checking for overflows */
    if (field->data_size == sizeof(pb_int64_t))
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800b0e2:	b29b      	uxth	r3, r3
 800b0e4:	2b08      	cmp	r3, #8
 800b0e6:	d10a      	bne.n	800b0fe <pb_dec_svarint+0x4a>
        clamped = *(pb_int64_t*)dest = value;
 800b0e8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800b0ec:	687a      	ldr	r2, [r7, #4]
 800b0ee:	e9c2 3400 	strd	r3, r4, [r2]
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b0f8:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800b0fc:	e045      	b.n	800b18a <pb_dec_svarint+0xd6>
    else if (field->data_size == sizeof(int32_t))
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800b104:	b29b      	uxth	r3, r3
 800b106:	2b04      	cmp	r3, #4
 800b108:	d10b      	bne.n	800b122 <pb_dec_svarint+0x6e>
        clamped = *(int32_t*)dest = (int32_t)value;
 800b10a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800b10e:	461a      	mov	r2, r3
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	601a      	str	r2, [r3, #0]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800b11c:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800b120:	e033      	b.n	800b18a <pb_dec_svarint+0xd6>
    else if (field->data_size == sizeof(int_least16_t))
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800b128:	b29b      	uxth	r3, r3
 800b12a:	2b02      	cmp	r3, #2
 800b12c:	d10d      	bne.n	800b14a <pb_dec_svarint+0x96>
        clamped = *(int_least16_t*)dest = (int_least16_t)value;
 800b12e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800b132:	b21a      	sxth	r2, r3
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	801a      	strh	r2, [r3, #0]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b13e:	b21b      	sxth	r3, r3
 800b140:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800b144:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800b148:	e01f      	b.n	800b18a <pb_dec_svarint+0xd6>
    else if (field->data_size == sizeof(int_least8_t))
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800b150:	b29b      	uxth	r3, r3
 800b152:	2b01      	cmp	r3, #1
 800b154:	d10d      	bne.n	800b172 <pb_dec_svarint+0xbe>
        clamped = *(int_least8_t*)dest = (int_least8_t)value;
 800b156:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800b15a:	b25a      	sxtb	r2, r3
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	701a      	strb	r2, [r3, #0]
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f993 3000 	ldrsb.w	r3, [r3]
 800b166:	b25b      	sxtb	r3, r3
 800b168:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800b16c:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800b170:	e00b      	b.n	800b18a <pb_dec_svarint+0xd6>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	68db      	ldr	r3, [r3, #12]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d002      	beq.n	800b180 <pb_dec_svarint+0xcc>
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	68db      	ldr	r3, [r3, #12]
 800b17e:	e000      	b.n	800b182 <pb_dec_svarint+0xce>
 800b180:	4b0e      	ldr	r3, [pc, #56]	; (800b1bc <pb_dec_svarint+0x108>)
 800b182:	68fa      	ldr	r2, [r7, #12]
 800b184:	60d3      	str	r3, [r2, #12]
 800b186:	2300      	movs	r3, #0
 800b188:	e014      	b.n	800b1b4 <pb_dec_svarint+0x100>

    if (clamped != value)
 800b18a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800b18e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b192:	42a2      	cmp	r2, r4
 800b194:	bf08      	it	eq
 800b196:	4299      	cmpeq	r1, r3
 800b198:	d00b      	beq.n	800b1b2 <pb_dec_svarint+0xfe>
        PB_RETURN_ERROR(stream, "integer too large");
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	68db      	ldr	r3, [r3, #12]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d002      	beq.n	800b1a8 <pb_dec_svarint+0xf4>
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	68db      	ldr	r3, [r3, #12]
 800b1a6:	e000      	b.n	800b1aa <pb_dec_svarint+0xf6>
 800b1a8:	4b05      	ldr	r3, [pc, #20]	; (800b1c0 <pb_dec_svarint+0x10c>)
 800b1aa:	68fa      	ldr	r2, [r7, #12]
 800b1ac:	60d3      	str	r3, [r2, #12]
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	e000      	b.n	800b1b4 <pb_dec_svarint+0x100>
    
    return true;
 800b1b2:	2301      	movs	r3, #1
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3724      	adds	r7, #36	; 0x24
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd90      	pop	{r4, r7, pc}
 800b1bc:	08010fbc 	.word	0x08010fbc
 800b1c0:	08010fd0 	.word	0x08010fd0

0800b1c4 <pb_dec_fixed32>:

static bool checkreturn pb_dec_fixed32(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b084      	sub	sp, #16
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	60f8      	str	r0, [r7, #12]
 800b1cc:	60b9      	str	r1, [r7, #8]
 800b1ce:	607a      	str	r2, [r7, #4]
    PB_UNUSED(field);
    return pb_decode_fixed32(stream, dest);
 800b1d0:	6879      	ldr	r1, [r7, #4]
 800b1d2:	68f8      	ldr	r0, [r7, #12]
 800b1d4:	f7ff fda5 	bl	800ad22 <pb_decode_fixed32>
 800b1d8:	4603      	mov	r3, r0
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3710      	adds	r7, #16
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}

0800b1e2 <pb_dec_fixed64>:

static bool checkreturn pb_dec_fixed64(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800b1e2:	b580      	push	{r7, lr}
 800b1e4:	b084      	sub	sp, #16
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	60f8      	str	r0, [r7, #12]
 800b1ea:	60b9      	str	r1, [r7, #8]
 800b1ec:	607a      	str	r2, [r7, #4]
    PB_UNUSED(field);
#ifndef PB_WITHOUT_64BIT
    return pb_decode_fixed64(stream, dest);
 800b1ee:	6879      	ldr	r1, [r7, #4]
 800b1f0:	68f8      	ldr	r0, [r7, #12]
 800b1f2:	f7ff fdbc 	bl	800ad6e <pb_decode_fixed64>
 800b1f6:	4603      	mov	r3, r0
#else
    PB_UNUSED(dest);
    PB_RETURN_ERROR(stream, "no 64bit support");
#endif
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	3710      	adds	r7, #16
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}

0800b200 <pb_dec_bytes>:

static bool checkreturn pb_dec_bytes(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b088      	sub	sp, #32
 800b204:	af00      	add	r7, sp, #0
 800b206:	60f8      	str	r0, [r7, #12]
 800b208:	60b9      	str	r1, [r7, #8]
 800b20a:	607a      	str	r2, [r7, #4]
    uint32_t size;
    size_t alloc_size;
    pb_bytes_array_t *bdest;
    
    if (!pb_decode_varint32(stream, &size))
 800b20c:	f107 0314 	add.w	r3, r7, #20
 800b210:	4619      	mov	r1, r3
 800b212:	68f8      	ldr	r0, [r7, #12]
 800b214:	f7fe fe3c 	bl	8009e90 <pb_decode_varint32>
 800b218:	4603      	mov	r3, r0
 800b21a:	f083 0301 	eor.w	r3, r3, #1
 800b21e:	b2db      	uxtb	r3, r3
 800b220:	2b00      	cmp	r3, #0
 800b222:	d001      	beq.n	800b228 <pb_dec_bytes+0x28>
        return false;
 800b224:	2300      	movs	r3, #0
 800b226:	e056      	b.n	800b2d6 <pb_dec_bytes+0xd6>
    
    if (size > PB_SIZE_MAX)
 800b228:	697b      	ldr	r3, [r7, #20]
 800b22a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b22e:	d30b      	bcc.n	800b248 <pb_dec_bytes+0x48>
        PB_RETURN_ERROR(stream, "bytes overflow");
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	68db      	ldr	r3, [r3, #12]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d002      	beq.n	800b23e <pb_dec_bytes+0x3e>
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	68db      	ldr	r3, [r3, #12]
 800b23c:	e000      	b.n	800b240 <pb_dec_bytes+0x40>
 800b23e:	4b28      	ldr	r3, [pc, #160]	; (800b2e0 <pb_dec_bytes+0xe0>)
 800b240:	68fa      	ldr	r2, [r7, #12]
 800b242:	60d3      	str	r3, [r2, #12]
 800b244:	2300      	movs	r3, #0
 800b246:	e046      	b.n	800b2d6 <pb_dec_bytes+0xd6>
    
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	3302      	adds	r3, #2
 800b24c:	61fb      	str	r3, [r7, #28]
    if (size > alloc_size)
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	69fa      	ldr	r2, [r7, #28]
 800b252:	429a      	cmp	r2, r3
 800b254:	d20b      	bcs.n	800b26e <pb_dec_bytes+0x6e>
        PB_RETURN_ERROR(stream, "size too large");
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	68db      	ldr	r3, [r3, #12]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d002      	beq.n	800b264 <pb_dec_bytes+0x64>
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	68db      	ldr	r3, [r3, #12]
 800b262:	e000      	b.n	800b266 <pb_dec_bytes+0x66>
 800b264:	4b1f      	ldr	r3, [pc, #124]	; (800b2e4 <pb_dec_bytes+0xe4>)
 800b266:	68fa      	ldr	r2, [r7, #12]
 800b268:	60d3      	str	r3, [r2, #12]
 800b26a:	2300      	movs	r3, #0
 800b26c:	e033      	b.n	800b2d6 <pb_dec_bytes+0xd6>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	789b      	ldrb	r3, [r3, #2]
 800b272:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b276:	2b80      	cmp	r3, #128	; 0x80
 800b278:	d10b      	bne.n	800b292 <pb_dec_bytes+0x92>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	68db      	ldr	r3, [r3, #12]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d002      	beq.n	800b288 <pb_dec_bytes+0x88>
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	68db      	ldr	r3, [r3, #12]
 800b286:	e000      	b.n	800b28a <pb_dec_bytes+0x8a>
 800b288:	4b17      	ldr	r3, [pc, #92]	; (800b2e8 <pb_dec_bytes+0xe8>)
 800b28a:	68fa      	ldr	r2, [r7, #12]
 800b28c:	60d3      	str	r3, [r2, #12]
 800b28e:	2300      	movs	r3, #0
 800b290:	e021      	b.n	800b2d6 <pb_dec_bytes+0xd6>
        bdest = *(pb_bytes_array_t**)dest;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800b298:	b29b      	uxth	r3, r3
 800b29a:	461a      	mov	r2, r3
 800b29c:	69fb      	ldr	r3, [r7, #28]
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d90b      	bls.n	800b2ba <pb_dec_bytes+0xba>
            PB_RETURN_ERROR(stream, "bytes overflow");
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	68db      	ldr	r3, [r3, #12]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d002      	beq.n	800b2b0 <pb_dec_bytes+0xb0>
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	68db      	ldr	r3, [r3, #12]
 800b2ae:	e000      	b.n	800b2b2 <pb_dec_bytes+0xb2>
 800b2b0:	4b0b      	ldr	r3, [pc, #44]	; (800b2e0 <pb_dec_bytes+0xe0>)
 800b2b2:	68fa      	ldr	r2, [r7, #12]
 800b2b4:	60d3      	str	r3, [r2, #12]
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	e00d      	b.n	800b2d6 <pb_dec_bytes+0xd6>
        bdest = (pb_bytes_array_t*)dest;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	61bb      	str	r3, [r7, #24]
    }

    bdest->size = (pb_size_t)size;
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	b29a      	uxth	r2, r3
 800b2c2:	69bb      	ldr	r3, [r7, #24]
 800b2c4:	801a      	strh	r2, [r3, #0]
    return pb_read(stream, bdest->bytes, size);
 800b2c6:	69bb      	ldr	r3, [r7, #24]
 800b2c8:	3302      	adds	r3, #2
 800b2ca:	697a      	ldr	r2, [r7, #20]
 800b2cc:	4619      	mov	r1, r3
 800b2ce:	68f8      	ldr	r0, [r7, #12]
 800b2d0:	f7fe fc92 	bl	8009bf8 <pb_read>
 800b2d4:	4603      	mov	r3, r0
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3720      	adds	r7, #32
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	08010fe4 	.word	0x08010fe4
 800b2e4:	08010ff4 	.word	0x08010ff4
 800b2e8:	08010f5c 	.word	0x08010f5c

0800b2ec <pb_dec_string>:

static bool checkreturn pb_dec_string(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b088      	sub	sp, #32
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	60f8      	str	r0, [r7, #12]
 800b2f4:	60b9      	str	r1, [r7, #8]
 800b2f6:	607a      	str	r2, [r7, #4]
    uint32_t size;
    size_t alloc_size;
    bool status;
    if (!pb_decode_varint32(stream, &size))
 800b2f8:	f107 0314 	add.w	r3, r7, #20
 800b2fc:	4619      	mov	r1, r3
 800b2fe:	68f8      	ldr	r0, [r7, #12]
 800b300:	f7fe fdc6 	bl	8009e90 <pb_decode_varint32>
 800b304:	4603      	mov	r3, r0
 800b306:	f083 0301 	eor.w	r3, r3, #1
 800b30a:	b2db      	uxtb	r3, r3
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d001      	beq.n	800b314 <pb_dec_string+0x28>
        return false;
 800b310:	2300      	movs	r3, #0
 800b312:	e046      	b.n	800b3a2 <pb_dec_string+0xb6>
    
    /* Space for null terminator */
    alloc_size = size + 1;
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	3301      	adds	r3, #1
 800b318:	61fb      	str	r3, [r7, #28]
    
    if (alloc_size < size)
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	69fa      	ldr	r2, [r7, #28]
 800b31e:	429a      	cmp	r2, r3
 800b320:	d20b      	bcs.n	800b33a <pb_dec_string+0x4e>
        PB_RETURN_ERROR(stream, "size too large");
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	68db      	ldr	r3, [r3, #12]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d002      	beq.n	800b330 <pb_dec_string+0x44>
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	68db      	ldr	r3, [r3, #12]
 800b32e:	e000      	b.n	800b332 <pb_dec_string+0x46>
 800b330:	4b1e      	ldr	r3, [pc, #120]	; (800b3ac <pb_dec_string+0xc0>)
 800b332:	68fa      	ldr	r2, [r7, #12]
 800b334:	60d3      	str	r3, [r2, #12]
 800b336:	2300      	movs	r3, #0
 800b338:	e033      	b.n	800b3a2 <pb_dec_string+0xb6>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	789b      	ldrb	r3, [r3, #2]
 800b33e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b342:	2b80      	cmp	r3, #128	; 0x80
 800b344:	d10b      	bne.n	800b35e <pb_dec_string+0x72>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	68db      	ldr	r3, [r3, #12]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d002      	beq.n	800b354 <pb_dec_string+0x68>
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	68db      	ldr	r3, [r3, #12]
 800b352:	e000      	b.n	800b356 <pb_dec_string+0x6a>
 800b354:	4b16      	ldr	r3, [pc, #88]	; (800b3b0 <pb_dec_string+0xc4>)
 800b356:	68fa      	ldr	r2, [r7, #12]
 800b358:	60d3      	str	r3, [r2, #12]
 800b35a:	2300      	movs	r3, #0
 800b35c:	e021      	b.n	800b3a2 <pb_dec_string+0xb6>
        dest = *(void**)dest;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800b364:	b29b      	uxth	r3, r3
 800b366:	461a      	mov	r2, r3
 800b368:	69fb      	ldr	r3, [r7, #28]
 800b36a:	4293      	cmp	r3, r2
 800b36c:	d90b      	bls.n	800b386 <pb_dec_string+0x9a>
            PB_RETURN_ERROR(stream, "string overflow");
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	68db      	ldr	r3, [r3, #12]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d002      	beq.n	800b37c <pb_dec_string+0x90>
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	68db      	ldr	r3, [r3, #12]
 800b37a:	e000      	b.n	800b37e <pb_dec_string+0x92>
 800b37c:	4b0d      	ldr	r3, [pc, #52]	; (800b3b4 <pb_dec_string+0xc8>)
 800b37e:	68fa      	ldr	r2, [r7, #12]
 800b380:	60d3      	str	r3, [r2, #12]
 800b382:	2300      	movs	r3, #0
 800b384:	e00d      	b.n	800b3a2 <pb_dec_string+0xb6>
    }
    
    status = pb_read(stream, (pb_byte_t*)dest, size);
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	461a      	mov	r2, r3
 800b38a:	6879      	ldr	r1, [r7, #4]
 800b38c:	68f8      	ldr	r0, [r7, #12]
 800b38e:	f7fe fc33 	bl	8009bf8 <pb_read>
 800b392:	4603      	mov	r3, r0
 800b394:	76fb      	strb	r3, [r7, #27]
    *((pb_byte_t*)dest + size) = 0;
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	687a      	ldr	r2, [r7, #4]
 800b39a:	4413      	add	r3, r2
 800b39c:	2200      	movs	r2, #0
 800b39e:	701a      	strb	r2, [r3, #0]
    return status;
 800b3a0:	7efb      	ldrb	r3, [r7, #27]
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3720      	adds	r7, #32
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}
 800b3aa:	bf00      	nop
 800b3ac:	08010ff4 	.word	0x08010ff4
 800b3b0:	08010f5c 	.word	0x08010f5c
 800b3b4:	08011004 	.word	0x08011004

0800b3b8 <pb_dec_submessage>:

static bool checkreturn pb_dec_submessage(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b08a      	sub	sp, #40	; 0x28
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	60f8      	str	r0, [r7, #12]
 800b3c0:	60b9      	str	r1, [r7, #8]
 800b3c2:	607a      	str	r2, [r7, #4]
    bool status;
    pb_istream_t substream;
    const pb_field_t* submsg_fields = (const pb_field_t*)field->ptr;
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	f8d3 300b 	ldr.w	r3, [r3, #11]
 800b3ca:	623b      	str	r3, [r7, #32]
    
    if (!pb_make_string_substream(stream, &substream))
 800b3cc:	f107 0310 	add.w	r3, r7, #16
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	68f8      	ldr	r0, [r7, #12]
 800b3d4:	f7fe fedc 	bl	800a190 <pb_make_string_substream>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	f083 0301 	eor.w	r3, r3, #1
 800b3de:	b2db      	uxtb	r3, r3
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d001      	beq.n	800b3e8 <pb_dec_submessage+0x30>
        return false;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	e03b      	b.n	800b460 <pb_dec_submessage+0xa8>
    
    if (field->ptr == NULL)
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	f8d3 300b 	ldr.w	r3, [r3, #11]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d10b      	bne.n	800b40a <pb_dec_submessage+0x52>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	68db      	ldr	r3, [r3, #12]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d002      	beq.n	800b400 <pb_dec_submessage+0x48>
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	68db      	ldr	r3, [r3, #12]
 800b3fe:	e000      	b.n	800b402 <pb_dec_submessage+0x4a>
 800b400:	4b19      	ldr	r3, [pc, #100]	; (800b468 <pb_dec_submessage+0xb0>)
 800b402:	68fa      	ldr	r2, [r7, #12]
 800b404:	60d3      	str	r3, [r2, #12]
 800b406:	2300      	movs	r3, #0
 800b408:	e02a      	b.n	800b460 <pb_dec_submessage+0xa8>
    
    /* New array entries need to be initialized, while required and optional
     * submessages have already been initialized in the top-level pb_decode. */
    if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	789b      	ldrb	r3, [r3, #2]
 800b40e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b412:	2b20      	cmp	r3, #32
 800b414:	d10a      	bne.n	800b42c <pb_dec_submessage+0x74>
        status = pb_decode(&substream, submsg_fields, dest);
 800b416:	f107 0310 	add.w	r3, r7, #16
 800b41a:	687a      	ldr	r2, [r7, #4]
 800b41c:	6a39      	ldr	r1, [r7, #32]
 800b41e:	4618      	mov	r0, r3
 800b420:	f7ff fbfc 	bl	800ac1c <pb_decode>
 800b424:	4603      	mov	r3, r0
 800b426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b42a:	e009      	b.n	800b440 <pb_dec_submessage+0x88>
    else
        status = pb_decode_noinit(&substream, submsg_fields, dest);
 800b42c:	f107 0310 	add.w	r3, r7, #16
 800b430:	687a      	ldr	r2, [r7, #4]
 800b432:	6a39      	ldr	r1, [r7, #32]
 800b434:	4618      	mov	r0, r3
 800b436:	f7ff fa87 	bl	800a948 <pb_decode_noinit>
 800b43a:	4603      	mov	r3, r0
 800b43c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    if (!pb_close_string_substream(stream, &substream))
 800b440:	f107 0310 	add.w	r3, r7, #16
 800b444:	4619      	mov	r1, r3
 800b446:	68f8      	ldr	r0, [r7, #12]
 800b448:	f7fe fedc 	bl	800a204 <pb_close_string_substream>
 800b44c:	4603      	mov	r3, r0
 800b44e:	f083 0301 	eor.w	r3, r3, #1
 800b452:	b2db      	uxtb	r3, r3
 800b454:	2b00      	cmp	r3, #0
 800b456:	d001      	beq.n	800b45c <pb_dec_submessage+0xa4>
        return false;
 800b458:	2300      	movs	r3, #0
 800b45a:	e001      	b.n	800b460 <pb_dec_submessage+0xa8>
    return status;
 800b45c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b460:	4618      	mov	r0, r3
 800b462:	3728      	adds	r7, #40	; 0x28
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}
 800b468:	08011014 	.word	0x08011014

0800b46c <pb_dec_fixed_length_bytes>:

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b086      	sub	sp, #24
 800b470:	af00      	add	r7, sp, #0
 800b472:	60f8      	str	r0, [r7, #12]
 800b474:	60b9      	str	r1, [r7, #8]
 800b476:	607a      	str	r2, [r7, #4]
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 800b478:	f107 0314 	add.w	r3, r7, #20
 800b47c:	4619      	mov	r1, r3
 800b47e:	68f8      	ldr	r0, [r7, #12]
 800b480:	f7fe fd06 	bl	8009e90 <pb_decode_varint32>
 800b484:	4603      	mov	r3, r0
 800b486:	f083 0301 	eor.w	r3, r3, #1
 800b48a:	b2db      	uxtb	r3, r3
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d001      	beq.n	800b494 <pb_dec_fixed_length_bytes+0x28>
        return false;
 800b490:	2300      	movs	r3, #0
 800b492:	e03b      	b.n	800b50c <pb_dec_fixed_length_bytes+0xa0>

    if (size > PB_SIZE_MAX)
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b49a:	d30b      	bcc.n	800b4b4 <pb_dec_fixed_length_bytes+0x48>
        PB_RETURN_ERROR(stream, "bytes overflow");
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	68db      	ldr	r3, [r3, #12]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d002      	beq.n	800b4aa <pb_dec_fixed_length_bytes+0x3e>
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	68db      	ldr	r3, [r3, #12]
 800b4a8:	e000      	b.n	800b4ac <pb_dec_fixed_length_bytes+0x40>
 800b4aa:	4b1a      	ldr	r3, [pc, #104]	; (800b514 <pb_dec_fixed_length_bytes+0xa8>)
 800b4ac:	68fa      	ldr	r2, [r7, #12]
 800b4ae:	60d3      	str	r3, [r2, #12]
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	e02b      	b.n	800b50c <pb_dec_fixed_length_bytes+0xa0>

    if (size == 0)
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d10a      	bne.n	800b4d0 <pb_dec_fixed_length_bytes+0x64>
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(dest, 0, field->data_size);
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800b4c0:	b29b      	uxth	r3, r3
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	2100      	movs	r1, #0
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f003 ff8b 	bl	800f3e2 <memset>
        return true;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	e01d      	b.n	800b50c <pb_dec_fixed_length_bytes+0xa0>
    }

    if (size != field->data_size)
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800b4d6:	b29b      	uxth	r3, r3
 800b4d8:	461a      	mov	r2, r3
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d00b      	beq.n	800b4f8 <pb_dec_fixed_length_bytes+0x8c>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	68db      	ldr	r3, [r3, #12]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d002      	beq.n	800b4ee <pb_dec_fixed_length_bytes+0x82>
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	68db      	ldr	r3, [r3, #12]
 800b4ec:	e000      	b.n	800b4f0 <pb_dec_fixed_length_bytes+0x84>
 800b4ee:	4b0a      	ldr	r3, [pc, #40]	; (800b518 <pb_dec_fixed_length_bytes+0xac>)
 800b4f0:	68fa      	ldr	r2, [r7, #12]
 800b4f2:	60d3      	str	r3, [r2, #12]
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	e009      	b.n	800b50c <pb_dec_fixed_length_bytes+0xa0>

    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800b4fe:	b29b      	uxth	r3, r3
 800b500:	461a      	mov	r2, r3
 800b502:	6879      	ldr	r1, [r7, #4]
 800b504:	68f8      	ldr	r0, [r7, #12]
 800b506:	f7fe fb77 	bl	8009bf8 <pb_read>
 800b50a:	4603      	mov	r3, r0
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3718      	adds	r7, #24
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}
 800b514:	08010fe4 	.word	0x08010fe4
 800b518:	08011030 	.word	0x08011030

0800b51c <pb_write>:
#endif
    return stream;
}

bool checkreturn pb_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b084      	sub	sp, #16
 800b520:	af00      	add	r7, sp, #0
 800b522:	60f8      	str	r0, [r7, #12]
 800b524:	60b9      	str	r1, [r7, #8]
 800b526:	607a      	str	r2, [r7, #4]
    if (stream->callback != NULL)
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d02b      	beq.n	800b588 <pb_write+0x6c>
    {
        if (stream->bytes_written + count > stream->max_size)
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	68da      	ldr	r2, [r3, #12]
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	441a      	add	r2, r3
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	689b      	ldr	r3, [r3, #8]
 800b53c:	429a      	cmp	r2, r3
 800b53e:	d90b      	bls.n	800b558 <pb_write+0x3c>
            PB_RETURN_ERROR(stream, "stream full");
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	691b      	ldr	r3, [r3, #16]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d002      	beq.n	800b54e <pb_write+0x32>
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	691b      	ldr	r3, [r3, #16]
 800b54c:	e000      	b.n	800b550 <pb_write+0x34>
 800b54e:	4b14      	ldr	r3, [pc, #80]	; (800b5a0 <pb_write+0x84>)
 800b550:	68fa      	ldr	r2, [r7, #12]
 800b552:	6113      	str	r3, [r2, #16]
 800b554:	2300      	movs	r3, #0
 800b556:	e01e      	b.n	800b596 <pb_write+0x7a>

#ifdef PB_BUFFER_ONLY
        if (!buf_write(stream, buf, count))
            PB_RETURN_ERROR(stream, "io error");
#else        
        if (!stream->callback(stream, buf, count))
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	687a      	ldr	r2, [r7, #4]
 800b55e:	68b9      	ldr	r1, [r7, #8]
 800b560:	68f8      	ldr	r0, [r7, #12]
 800b562:	4798      	blx	r3
 800b564:	4603      	mov	r3, r0
 800b566:	f083 0301 	eor.w	r3, r3, #1
 800b56a:	b2db      	uxtb	r3, r3
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d00b      	beq.n	800b588 <pb_write+0x6c>
            PB_RETURN_ERROR(stream, "io error");
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	691b      	ldr	r3, [r3, #16]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d002      	beq.n	800b57e <pb_write+0x62>
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	691b      	ldr	r3, [r3, #16]
 800b57c:	e000      	b.n	800b580 <pb_write+0x64>
 800b57e:	4b09      	ldr	r3, [pc, #36]	; (800b5a4 <pb_write+0x88>)
 800b580:	68fa      	ldr	r2, [r7, #12]
 800b582:	6113      	str	r3, [r2, #16]
 800b584:	2300      	movs	r3, #0
 800b586:	e006      	b.n	800b596 <pb_write+0x7a>
#endif
    }
    
    stream->bytes_written += count;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	68da      	ldr	r2, [r3, #12]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	441a      	add	r2, r3
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	60da      	str	r2, [r3, #12]
    return true;
 800b594:	2301      	movs	r3, #1
}
 800b596:	4618      	mov	r0, r3
 800b598:	3710      	adds	r7, #16
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}
 800b59e:	bf00      	nop
 800b5a0:	08011054 	.word	0x08011054
 800b5a4:	08011060 	.word	0x08011060

0800b5a8 <encode_array>:
 *************************/

/* Encode a static array. Handles the size calculations and possible packing. */
static bool checkreturn encode_array(pb_ostream_t *stream, const pb_field_t *field,
                         const void *pData, size_t count, pb_encoder_t func)
{
 800b5a8:	b590      	push	{r4, r7, lr}
 800b5aa:	b08d      	sub	sp, #52	; 0x34
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	60f8      	str	r0, [r7, #12]
 800b5b0:	60b9      	str	r1, [r7, #8]
 800b5b2:	607a      	str	r2, [r7, #4]
 800b5b4:	603b      	str	r3, [r7, #0]
    size_t i;
    const void *p;
    size_t size;
    
    if (count == 0)
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d101      	bne.n	800b5c0 <encode_array+0x18>
        return true;
 800b5bc:	2301      	movs	r3, #1
 800b5be:	e0fb      	b.n	800b7b8 <encode_array+0x210>

    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	789b      	ldrb	r3, [r3, #2]
 800b5c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b5c8:	2b80      	cmp	r3, #128	; 0x80
 800b5ca:	d013      	beq.n	800b5f4 <encode_array+0x4c>
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800b5d2:	b29b      	uxth	r3, r3
 800b5d4:	461a      	mov	r2, r3
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	d90b      	bls.n	800b5f4 <encode_array+0x4c>
        PB_RETURN_ERROR(stream, "array max size exceeded");
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	691b      	ldr	r3, [r3, #16]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d002      	beq.n	800b5ea <encode_array+0x42>
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	691b      	ldr	r3, [r3, #16]
 800b5e8:	e000      	b.n	800b5ec <encode_array+0x44>
 800b5ea:	4b75      	ldr	r3, [pc, #468]	; (800b7c0 <encode_array+0x218>)
 800b5ec:	68fa      	ldr	r2, [r7, #12]
 800b5ee:	6113      	str	r3, [r2, #16]
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	e0e1      	b.n	800b7b8 <encode_array+0x210>
    
    /* We always pack arrays if the datatype allows it. */
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	789b      	ldrb	r3, [r3, #2]
 800b5f8:	f003 030f 	and.w	r3, r3, #15
 800b5fc:	2b04      	cmp	r3, #4
 800b5fe:	f300 808d 	bgt.w	800b71c <encode_array+0x174>
    {
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	881b      	ldrh	r3, [r3, #0]
 800b606:	b29b      	uxth	r3, r3
 800b608:	461a      	mov	r2, r3
 800b60a:	2102      	movs	r1, #2
 800b60c:	68f8      	ldr	r0, [r7, #12]
 800b60e:	f000 fcb1 	bl	800bf74 <pb_encode_tag>
 800b612:	4603      	mov	r3, r0
 800b614:	f083 0301 	eor.w	r3, r3, #1
 800b618:	b2db      	uxtb	r3, r3
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d001      	beq.n	800b622 <encode_array+0x7a>
            return false;
 800b61e:	2300      	movs	r3, #0
 800b620:	e0ca      	b.n	800b7b8 <encode_array+0x210>
        
        /* Determine the total size of packed array. */
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	789b      	ldrb	r3, [r3, #2]
 800b626:	f003 030f 	and.w	r3, r3, #15
 800b62a:	2b03      	cmp	r3, #3
 800b62c:	d103      	bne.n	800b636 <encode_array+0x8e>
        {
            size = 4 * count;
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	009b      	lsls	r3, r3, #2
 800b632:	627b      	str	r3, [r7, #36]	; 0x24
 800b634:	e035      	b.n	800b6a2 <encode_array+0xfa>
        }
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	789b      	ldrb	r3, [r3, #2]
 800b63a:	f003 030f 	and.w	r3, r3, #15
 800b63e:	2b04      	cmp	r3, #4
 800b640:	d103      	bne.n	800b64a <encode_array+0xa2>
        {
            size = 8 * count;
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	00db      	lsls	r3, r3, #3
 800b646:	627b      	str	r3, [r7, #36]	; 0x24
 800b648:	e02b      	b.n	800b6a2 <encode_array+0xfa>
        }
        else
        { 
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 800b64a:	f107 0310 	add.w	r3, r7, #16
 800b64e:	2200      	movs	r2, #0
 800b650:	601a      	str	r2, [r3, #0]
 800b652:	605a      	str	r2, [r3, #4]
 800b654:	609a      	str	r2, [r3, #8]
 800b656:	60da      	str	r2, [r3, #12]
 800b658:	611a      	str	r2, [r3, #16]
            p = pData;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	62bb      	str	r3, [r7, #40]	; 0x28
            for (i = 0; i < count; i++)
 800b65e:	2300      	movs	r3, #0
 800b660:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b662:	e018      	b.n	800b696 <encode_array+0xee>
            {
                if (!func(&sizestream, field, p))
 800b664:	f107 0010 	add.w	r0, r7, #16
 800b668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b66a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b66c:	68b9      	ldr	r1, [r7, #8]
 800b66e:	4798      	blx	r3
 800b670:	4603      	mov	r3, r0
 800b672:	f083 0301 	eor.w	r3, r3, #1
 800b676:	b2db      	uxtb	r3, r3
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d001      	beq.n	800b680 <encode_array+0xd8>
                    return false;
 800b67c:	2300      	movs	r3, #0
 800b67e:	e09b      	b.n	800b7b8 <encode_array+0x210>
                p = (const char*)p + field->data_size;
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800b686:	b29b      	uxth	r3, r3
 800b688:	461a      	mov	r2, r3
 800b68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b68c:	4413      	add	r3, r2
 800b68e:	62bb      	str	r3, [r7, #40]	; 0x28
            for (i = 0; i < count; i++)
 800b690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b692:	3301      	adds	r3, #1
 800b694:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b696:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d3e2      	bcc.n	800b664 <encode_array+0xbc>
            }
            size = sizestream.bytes_written;
 800b69e:	69fb      	ldr	r3, [r7, #28]
 800b6a0:	627b      	str	r3, [r7, #36]	; 0x24
        }
        
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800b6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a4:	f04f 0400 	mov.w	r4, #0
 800b6a8:	461a      	mov	r2, r3
 800b6aa:	4623      	mov	r3, r4
 800b6ac:	68f8      	ldr	r0, [r7, #12]
 800b6ae:	f000 fb5c 	bl	800bd6a <pb_encode_varint>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	f083 0301 	eor.w	r3, r3, #1
 800b6b8:	b2db      	uxtb	r3, r3
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d001      	beq.n	800b6c2 <encode_array+0x11a>
            return false;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	e07a      	b.n	800b7b8 <encode_array+0x210>
        
        if (stream->callback == NULL)
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d106      	bne.n	800b6d8 <encode_array+0x130>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 800b6ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6cc:	2100      	movs	r1, #0
 800b6ce:	68f8      	ldr	r0, [r7, #12]
 800b6d0:	f7ff ff24 	bl	800b51c <pb_write>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	e06f      	b.n	800b7b8 <encode_array+0x210>
        
        /* Write the data */
        p = pData;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	62bb      	str	r3, [r7, #40]	; 0x28
        for (i = 0; i < count; i++)
 800b6dc:	2300      	movs	r3, #0
 800b6de:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b6e0:	e017      	b.n	800b712 <encode_array+0x16a>
        {
            if (!func(stream, field, p))
 800b6e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6e6:	68b9      	ldr	r1, [r7, #8]
 800b6e8:	68f8      	ldr	r0, [r7, #12]
 800b6ea:	4798      	blx	r3
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	f083 0301 	eor.w	r3, r3, #1
 800b6f2:	b2db      	uxtb	r3, r3
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d001      	beq.n	800b6fc <encode_array+0x154>
                return false;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	e05d      	b.n	800b7b8 <encode_array+0x210>
            p = (const char*)p + field->data_size;
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800b702:	b29b      	uxth	r3, r3
 800b704:	461a      	mov	r2, r3
 800b706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b708:	4413      	add	r3, r2
 800b70a:	62bb      	str	r3, [r7, #40]	; 0x28
        for (i = 0; i < count; i++)
 800b70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b70e:	3301      	adds	r3, #1
 800b710:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b712:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	429a      	cmp	r2, r3
 800b718:	d3e3      	bcc.n	800b6e2 <encode_array+0x13a>
 800b71a:	e04c      	b.n	800b7b6 <encode_array+0x20e>
        }
    }
    else
    {
        p = pData;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	62bb      	str	r3, [r7, #40]	; 0x28
        for (i = 0; i < count; i++)
 800b720:	2300      	movs	r3, #0
 800b722:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b724:	e043      	b.n	800b7ae <encode_array+0x206>
        {
            if (!pb_encode_tag_for_field(stream, field))
 800b726:	68b9      	ldr	r1, [r7, #8]
 800b728:	68f8      	ldr	r0, [r7, #12]
 800b72a:	f000 fc47 	bl	800bfbc <pb_encode_tag_for_field>
 800b72e:	4603      	mov	r3, r0
 800b730:	f083 0301 	eor.w	r3, r3, #1
 800b734:	b2db      	uxtb	r3, r3
 800b736:	2b00      	cmp	r3, #0
 800b738:	d001      	beq.n	800b73e <encode_array+0x196>
                return false;
 800b73a:	2300      	movs	r3, #0
 800b73c:	e03c      	b.n	800b7b8 <encode_array+0x210>

            /* Normally the data is stored directly in the array entries, but
             * for pointer-type string and bytes fields, the array entries are
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	789b      	ldrb	r3, [r3, #2]
 800b742:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b746:	2b80      	cmp	r3, #128	; 0x80
 800b748:	d119      	bne.n	800b77e <encode_array+0x1d6>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	789b      	ldrb	r3, [r3, #2]
 800b74e:	f003 030f 	and.w	r3, r3, #15
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 800b752:	2b06      	cmp	r3, #6
 800b754:	d005      	beq.n	800b762 <encode_array+0x1ba>
                 PB_LTYPE(field->type) == PB_LTYPE_BYTES))
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	789b      	ldrb	r3, [r3, #2]
 800b75a:	f003 030f 	and.w	r3, r3, #15
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 800b75e:	2b05      	cmp	r3, #5
 800b760:	d10d      	bne.n	800b77e <encode_array+0x1d6>
            {
                if (!func(stream, field, *(const void* const*)p))
 800b762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b764:	681a      	ldr	r2, [r3, #0]
 800b766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b768:	68b9      	ldr	r1, [r7, #8]
 800b76a:	68f8      	ldr	r0, [r7, #12]
 800b76c:	4798      	blx	r3
 800b76e:	4603      	mov	r3, r0
 800b770:	f083 0301 	eor.w	r3, r3, #1
 800b774:	b2db      	uxtb	r3, r3
 800b776:	2b00      	cmp	r3, #0
 800b778:	d00e      	beq.n	800b798 <encode_array+0x1f0>
                    return false;
 800b77a:	2300      	movs	r3, #0
 800b77c:	e01c      	b.n	800b7b8 <encode_array+0x210>
            }
            else
            {
                if (!func(stream, field, p))
 800b77e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b780:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b782:	68b9      	ldr	r1, [r7, #8]
 800b784:	68f8      	ldr	r0, [r7, #12]
 800b786:	4798      	blx	r3
 800b788:	4603      	mov	r3, r0
 800b78a:	f083 0301 	eor.w	r3, r3, #1
 800b78e:	b2db      	uxtb	r3, r3
 800b790:	2b00      	cmp	r3, #0
 800b792:	d001      	beq.n	800b798 <encode_array+0x1f0>
                    return false;
 800b794:	2300      	movs	r3, #0
 800b796:	e00f      	b.n	800b7b8 <encode_array+0x210>
            }
            p = (const char*)p + field->data_size;
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800b79e:	b29b      	uxth	r3, r3
 800b7a0:	461a      	mov	r2, r3
 800b7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a4:	4413      	add	r3, r2
 800b7a6:	62bb      	str	r3, [r7, #40]	; 0x28
        for (i = 0; i < count; i++)
 800b7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7aa:	3301      	adds	r3, #1
 800b7ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d3b7      	bcc.n	800b726 <encode_array+0x17e>
        }
    }
    
    return true;
 800b7b6:	2301      	movs	r3, #1
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3734      	adds	r7, #52	; 0x34
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd90      	pop	{r4, r7, pc}
 800b7c0:	0801106c 	.word	0x0801106c

0800b7c4 <pb_check_proto3_default_value>:

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool pb_check_proto3_default_value(const pb_field_t *field, const void *pData)
{
 800b7c4:	b590      	push	{r4, r7, lr}
 800b7c6:	b08d      	sub	sp, #52	; 0x34
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	6039      	str	r1, [r7, #0]
    pb_type_t type = field->type;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	789b      	ldrb	r3, [r3, #2]
 800b7d2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    const void *pSize = (const char*)pData + field->size_offset;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 800b7dc:	b21b      	sxth	r3, r3
 800b7de:	461a      	mov	r2, r3
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	4413      	add	r3, r2
 800b7e4:	62bb      	str	r3, [r7, #40]	; 0x28

    if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 800b7e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b7ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d101      	bne.n	800b7f6 <pb_check_proto3_default_value+0x32>
    {
        /* Required proto2 fields inside proto3 submessage, pretty rare case */
        return false;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	e0af      	b.n	800b956 <pb_check_proto3_default_value+0x192>
    }
    else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 800b7f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b7fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b7fe:	2b20      	cmp	r3, #32
 800b800:	d107      	bne.n	800b812 <pb_check_proto3_default_value+0x4e>
    {
        /* Repeated fields inside proto3 submessage: present if count != 0 */
        return *(const pb_size_t*)pSize == 0;
 800b802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b804:	881b      	ldrh	r3, [r3, #0]
 800b806:	2b00      	cmp	r3, #0
 800b808:	bf0c      	ite	eq
 800b80a:	2301      	moveq	r3, #1
 800b80c:	2300      	movne	r3, #0
 800b80e:	b2db      	uxtb	r3, r3
 800b810:	e0a1      	b.n	800b956 <pb_check_proto3_default_value+0x192>
    }
    else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 800b812:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b816:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b81a:	2b30      	cmp	r3, #48	; 0x30
 800b81c:	d107      	bne.n	800b82e <pb_check_proto3_default_value+0x6a>
    {
        /* Oneof fields */
        return *(const pb_size_t*)pSize == 0;
 800b81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b820:	881b      	ldrh	r3, [r3, #0]
 800b822:	2b00      	cmp	r3, #0
 800b824:	bf0c      	ite	eq
 800b826:	2301      	moveq	r3, #1
 800b828:	2300      	movne	r3, #0
 800b82a:	b2db      	uxtb	r3, r3
 800b82c:	e093      	b.n	800b956 <pb_check_proto3_default_value+0x192>
    }
    else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->size_offset)
 800b82e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b832:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b836:	2b10      	cmp	r3, #16
 800b838:	d113      	bne.n	800b862 <pb_check_proto3_default_value+0x9e>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 800b840:	b21b      	sxth	r3, r3
 800b842:	2b00      	cmp	r3, #0
 800b844:	d00d      	beq.n	800b862 <pb_check_proto3_default_value+0x9e>
    {
        /* Proto2 optional fields inside proto3 submessage */
        return *(const bool*)pSize == false;
 800b846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b848:	781b      	ldrb	r3, [r3, #0]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	bf14      	ite	ne
 800b84e:	2301      	movne	r3, #1
 800b850:	2300      	moveq	r3, #0
 800b852:	b2db      	uxtb	r3, r3
 800b854:	f083 0301 	eor.w	r3, r3, #1
 800b858:	b2db      	uxtb	r3, r3
 800b85a:	f003 0301 	and.w	r3, r3, #1
 800b85e:	b2db      	uxtb	r3, r3
 800b860:	e079      	b.n	800b956 <pb_check_proto3_default_value+0x192>
    }

    /* Rest is proto3 singular fields */

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 800b862:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b866:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d15b      	bne.n	800b926 <pb_check_proto3_default_value+0x162>
    {
        if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 800b86e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b872:	f003 030f 	and.w	r3, r3, #15
 800b876:	2b05      	cmp	r3, #5
 800b878:	d109      	bne.n	800b88e <pb_check_proto3_default_value+0xca>
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)pData;
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	627b      	str	r3, [r7, #36]	; 0x24
            return bytes->size == 0;
 800b87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b880:	881b      	ldrh	r3, [r3, #0]
 800b882:	2b00      	cmp	r3, #0
 800b884:	bf0c      	ite	eq
 800b886:	2301      	moveq	r3, #1
 800b888:	2300      	movne	r3, #0
 800b88a:	b2db      	uxtb	r3, r3
 800b88c:	e063      	b.n	800b956 <pb_check_proto3_default_value+0x192>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 800b88e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b892:	f003 030f 	and.w	r3, r3, #15
 800b896:	2b06      	cmp	r3, #6
 800b898:	d107      	bne.n	800b8aa <pb_check_proto3_default_value+0xe6>
        {
            return *(const char*)pData == '\0';
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	bf0c      	ite	eq
 800b8a2:	2301      	moveq	r3, #1
 800b8a4:	2300      	movne	r3, #0
 800b8a6:	b2db      	uxtb	r3, r3
 800b8a8:	e055      	b.n	800b956 <pb_check_proto3_default_value+0x192>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 800b8aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b8ae:	f003 030f 	and.w	r3, r3, #15
 800b8b2:	2b09      	cmp	r3, #9
 800b8b4:	d109      	bne.n	800b8ca <pb_check_proto3_default_value+0x106>
        {
            /* Fixed length bytes is only empty if its length is fixed
             * as 0. Which would be pretty strange, but we can check
             * it anyway. */
            return field->data_size == 0;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800b8bc:	b29b      	uxth	r3, r3
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	bf0c      	ite	eq
 800b8c2:	2301      	moveq	r3, #1
 800b8c4:	2300      	movne	r3, #0
 800b8c6:	b2db      	uxtb	r3, r3
 800b8c8:	e045      	b.n	800b956 <pb_check_proto3_default_value+0x192>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 800b8ca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b8ce:	f003 030f 	and.w	r3, r3, #15
 800b8d2:	2b07      	cmp	r3, #7
 800b8d4:	d127      	bne.n	800b926 <pb_check_proto3_default_value+0x162>
             * are non-zero. The comparison cannot be done byte-per-byte
             * because the C struct may contain padding bytes that must
             * be skipped.
             */
            pb_field_iter_t iter;
            if (pb_field_iter_begin(&iter, (const pb_field_t*)field->ptr, pb_const_cast(pData)))
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f8d3 400b 	ldr.w	r4, [r3, #11]
 800b8dc:	6838      	ldr	r0, [r7, #0]
 800b8de:	f000 f9f0 	bl	800bcc2 <pb_const_cast>
 800b8e2:	4602      	mov	r2, r0
 800b8e4:	f107 0308 	add.w	r3, r7, #8
 800b8e8:	4621      	mov	r1, r4
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f7fe f878 	bl	80099e0 <pb_field_iter_begin>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d015      	beq.n	800b922 <pb_check_proto3_default_value+0x15e>
            {
                do
                {
                    if (!pb_check_proto3_default_value(iter.pos, iter.pData))
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	69ba      	ldr	r2, [r7, #24]
 800b8fa:	4611      	mov	r1, r2
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f7ff ff61 	bl	800b7c4 <pb_check_proto3_default_value>
 800b902:	4603      	mov	r3, r0
 800b904:	f083 0301 	eor.w	r3, r3, #1
 800b908:	b2db      	uxtb	r3, r3
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d001      	beq.n	800b912 <pb_check_proto3_default_value+0x14e>
                    {
                        return false;
 800b90e:	2300      	movs	r3, #0
 800b910:	e021      	b.n	800b956 <pb_check_proto3_default_value+0x192>
                    }
                } while (pb_field_iter_next(&iter));
 800b912:	f107 0308 	add.w	r3, r7, #8
 800b916:	4618      	mov	r0, r3
 800b918:	f7fe f897 	bl	8009a4a <pb_field_iter_next>
 800b91c:	4603      	mov	r3, r0
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d1e9      	bne.n	800b8f6 <pb_check_proto3_default_value+0x132>
            }
            return true;
 800b922:	2301      	movs	r3, #1
 800b924:	e017      	b.n	800b956 <pb_check_proto3_default_value+0x192>
	     * UVARINT, SVARINT, FIXED32, FIXED64, EXTENSION fields, and also
	     * callback fields. These all have integer or pointer value which
	     * can be compared with 0.
	     */
	    pb_size_t i;
	    const char *p = (const char*)pData;
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	623b      	str	r3, [r7, #32]
	    for (i = 0; i < field->data_size; i++)
 800b92a:	2300      	movs	r3, #0
 800b92c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b92e:	e00a      	b.n	800b946 <pb_check_proto3_default_value+0x182>
	    {
	        if (p[i] != 0)
 800b930:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b932:	6a3a      	ldr	r2, [r7, #32]
 800b934:	4413      	add	r3, r2
 800b936:	781b      	ldrb	r3, [r3, #0]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d001      	beq.n	800b940 <pb_check_proto3_default_value+0x17c>
	        {
	            return false;
 800b93c:	2300      	movs	r3, #0
 800b93e:	e00a      	b.n	800b956 <pb_check_proto3_default_value+0x192>
	    for (i = 0; i < field->data_size; i++)
 800b940:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b942:	3301      	adds	r3, #1
 800b944:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800b94c:	b29b      	uxth	r3, r3
 800b94e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b950:	429a      	cmp	r2, r3
 800b952:	d3ed      	bcc.n	800b930 <pb_check_proto3_default_value+0x16c>
	        }
	    }

	    return true;
 800b954:	2301      	movs	r3, #1
	}
}
 800b956:	4618      	mov	r0, r3
 800b958:	3734      	adds	r7, #52	; 0x34
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd90      	pop	{r4, r7, pc}
	...

0800b960 <encode_basic_field>:

/* Encode a field with static or pointer allocation, i.e. one whose data
 * is available to the encoder directly. */
static bool checkreturn encode_basic_field(pb_ostream_t *stream,
    const pb_field_t *field, const void *pData)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b08a      	sub	sp, #40	; 0x28
 800b964:	af02      	add	r7, sp, #8
 800b966:	60f8      	str	r0, [r7, #12]
 800b968:	60b9      	str	r1, [r7, #8]
 800b96a:	607a      	str	r2, [r7, #4]
    pb_encoder_t func;
    bool implicit_has;
    const void *pSize = &implicit_has;
 800b96c:	f107 0313 	add.w	r3, r7, #19
 800b970:	61fb      	str	r3, [r7, #28]
    
    func = PB_ENCODERS[PB_LTYPE(field->type)];
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	789b      	ldrb	r3, [r3, #2]
 800b976:	f003 030f 	and.w	r3, r3, #15
 800b97a:	4a75      	ldr	r2, [pc, #468]	; (800bb50 <encode_basic_field+0x1f0>)
 800b97c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b980:	617b      	str	r3, [r7, #20]
    
    if (field->size_offset)
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 800b988:	b21b      	sxth	r3, r3
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d008      	beq.n	800b9a0 <encode_basic_field+0x40>
    {
        /* Static optional, repeated or oneof field */
        pSize = (const char*)pData + field->size_offset;
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 800b994:	b21b      	sxth	r3, r3
 800b996:	461a      	mov	r2, r3
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	4413      	add	r3, r2
 800b99c:	61fb      	str	r3, [r7, #28]
 800b99e:	e019      	b.n	800b9d4 <encode_basic_field+0x74>
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	789b      	ldrb	r3, [r3, #2]
 800b9a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b9a8:	2b10      	cmp	r3, #16
 800b9aa:	d111      	bne.n	800b9d0 <encode_basic_field+0x70>
    {
        /* Proto3 style field, optional but without explicit has_ field. */
        implicit_has = !pb_check_proto3_default_value(field, pData);
 800b9ac:	6879      	ldr	r1, [r7, #4]
 800b9ae:	68b8      	ldr	r0, [r7, #8]
 800b9b0:	f7ff ff08 	bl	800b7c4 <pb_check_proto3_default_value>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	bf14      	ite	ne
 800b9ba:	2301      	movne	r3, #1
 800b9bc:	2300      	moveq	r3, #0
 800b9be:	b2db      	uxtb	r3, r3
 800b9c0:	f083 0301 	eor.w	r3, r3, #1
 800b9c4:	b2db      	uxtb	r3, r3
 800b9c6:	f003 0301 	and.w	r3, r3, #1
 800b9ca:	b2db      	uxtb	r3, r3
 800b9cc:	74fb      	strb	r3, [r7, #19]
 800b9ce:	e001      	b.n	800b9d4 <encode_basic_field+0x74>
    }
    else
    {
        /* Required field, always present */
        implicit_has = true;
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	74fb      	strb	r3, [r7, #19]
    }

    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	789b      	ldrb	r3, [r3, #2]
 800b9d8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b9dc:	2b80      	cmp	r3, #128	; 0x80
 800b9de:	d109      	bne.n	800b9f4 <encode_basic_field+0x94>
    {
        /* pData is a pointer to the field, which contains pointer to
         * the data. If the 2nd pointer is NULL, it is interpreted as if
         * the has_field was false.
         */
        pData = *(const void* const*)pData;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	607b      	str	r3, [r7, #4]
        implicit_has = (pData != NULL);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	bf14      	ite	ne
 800b9ec:	2301      	movne	r3, #1
 800b9ee:	2300      	moveq	r3, #0
 800b9f0:	b2db      	uxtb	r3, r3
 800b9f2:	74fb      	strb	r3, [r7, #19]
    }

    switch (PB_HTYPE(field->type))
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	789b      	ldrb	r3, [r3, #2]
 800b9f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b9fc:	2b10      	cmp	r3, #16
 800b9fe:	d031      	beq.n	800ba64 <encode_basic_field+0x104>
 800ba00:	2b10      	cmp	r3, #16
 800ba02:	dc02      	bgt.n	800ba0a <encode_basic_field+0xaa>
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d005      	beq.n	800ba14 <encode_basic_field+0xb4>
 800ba08:	e08a      	b.n	800bb20 <encode_basic_field+0x1c0>
 800ba0a:	2b20      	cmp	r3, #32
 800ba0c:	d047      	beq.n	800ba9e <encode_basic_field+0x13e>
 800ba0e:	2b30      	cmp	r3, #48	; 0x30
 800ba10:	d066      	beq.n	800bae0 <encode_basic_field+0x180>
 800ba12:	e085      	b.n	800bb20 <encode_basic_field+0x1c0>
    {
        case PB_HTYPE_REQUIRED:
            if (!pData)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d10b      	bne.n	800ba32 <encode_basic_field+0xd2>
                PB_RETURN_ERROR(stream, "missing required field");
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	691b      	ldr	r3, [r3, #16]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d002      	beq.n	800ba28 <encode_basic_field+0xc8>
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	691b      	ldr	r3, [r3, #16]
 800ba26:	e000      	b.n	800ba2a <encode_basic_field+0xca>
 800ba28:	4b4a      	ldr	r3, [pc, #296]	; (800bb54 <encode_basic_field+0x1f4>)
 800ba2a:	68fa      	ldr	r2, [r7, #12]
 800ba2c:	6113      	str	r3, [r2, #16]
 800ba2e:	2300      	movs	r3, #0
 800ba30:	e08a      	b.n	800bb48 <encode_basic_field+0x1e8>
            if (!pb_encode_tag_for_field(stream, field))
 800ba32:	68b9      	ldr	r1, [r7, #8]
 800ba34:	68f8      	ldr	r0, [r7, #12]
 800ba36:	f000 fac1 	bl	800bfbc <pb_encode_tag_for_field>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	f083 0301 	eor.w	r3, r3, #1
 800ba40:	b2db      	uxtb	r3, r3
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d001      	beq.n	800ba4a <encode_basic_field+0xea>
                return false;
 800ba46:	2300      	movs	r3, #0
 800ba48:	e07e      	b.n	800bb48 <encode_basic_field+0x1e8>
            if (!func(stream, field, pData))
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	687a      	ldr	r2, [r7, #4]
 800ba4e:	68b9      	ldr	r1, [r7, #8]
 800ba50:	68f8      	ldr	r0, [r7, #12]
 800ba52:	4798      	blx	r3
 800ba54:	4603      	mov	r3, r0
 800ba56:	f083 0301 	eor.w	r3, r3, #1
 800ba5a:	b2db      	uxtb	r3, r3
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d06b      	beq.n	800bb38 <encode_basic_field+0x1d8>
                return false;
 800ba60:	2300      	movs	r3, #0
 800ba62:	e071      	b.n	800bb48 <encode_basic_field+0x1e8>
            break;
        
        case PB_HTYPE_OPTIONAL:
            if (*(const bool*)pSize)
 800ba64:	69fb      	ldr	r3, [r7, #28]
 800ba66:	781b      	ldrb	r3, [r3, #0]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d067      	beq.n	800bb3c <encode_basic_field+0x1dc>
            {
                if (!pb_encode_tag_for_field(stream, field))
 800ba6c:	68b9      	ldr	r1, [r7, #8]
 800ba6e:	68f8      	ldr	r0, [r7, #12]
 800ba70:	f000 faa4 	bl	800bfbc <pb_encode_tag_for_field>
 800ba74:	4603      	mov	r3, r0
 800ba76:	f083 0301 	eor.w	r3, r3, #1
 800ba7a:	b2db      	uxtb	r3, r3
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d001      	beq.n	800ba84 <encode_basic_field+0x124>
                    return false;
 800ba80:	2300      	movs	r3, #0
 800ba82:	e061      	b.n	800bb48 <encode_basic_field+0x1e8>
            
                if (!func(stream, field, pData))
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	687a      	ldr	r2, [r7, #4]
 800ba88:	68b9      	ldr	r1, [r7, #8]
 800ba8a:	68f8      	ldr	r0, [r7, #12]
 800ba8c:	4798      	blx	r3
 800ba8e:	4603      	mov	r3, r0
 800ba90:	f083 0301 	eor.w	r3, r3, #1
 800ba94:	b2db      	uxtb	r3, r3
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d050      	beq.n	800bb3c <encode_basic_field+0x1dc>
                    return false;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	e054      	b.n	800bb48 <encode_basic_field+0x1e8>
            }
            break;
        
        case PB_HTYPE_REPEATED: {
            pb_size_t count;
            if (field->size_offset != 0) {
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 800baa4:	b21b      	sxth	r3, r3
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d003      	beq.n	800bab2 <encode_basic_field+0x152>
                count = *(const pb_size_t*)pSize;
 800baaa:	69fb      	ldr	r3, [r7, #28]
 800baac:	881b      	ldrh	r3, [r3, #0]
 800baae:	837b      	strh	r3, [r7, #26]
 800bab0:	e005      	b.n	800babe <encode_basic_field+0x15e>
            } else {
                count = field->array_size;
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	7a5a      	ldrb	r2, [r3, #9]
 800bab6:	7a9b      	ldrb	r3, [r3, #10]
 800bab8:	021b      	lsls	r3, r3, #8
 800baba:	4313      	orrs	r3, r2
 800babc:	837b      	strh	r3, [r7, #26]
            }
            if (!encode_array(stream, field, pData, count, func))
 800babe:	8b7a      	ldrh	r2, [r7, #26]
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	9300      	str	r3, [sp, #0]
 800bac4:	4613      	mov	r3, r2
 800bac6:	687a      	ldr	r2, [r7, #4]
 800bac8:	68b9      	ldr	r1, [r7, #8]
 800baca:	68f8      	ldr	r0, [r7, #12]
 800bacc:	f7ff fd6c 	bl	800b5a8 <encode_array>
 800bad0:	4603      	mov	r3, r0
 800bad2:	f083 0301 	eor.w	r3, r3, #1
 800bad6:	b2db      	uxtb	r3, r3
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d031      	beq.n	800bb40 <encode_basic_field+0x1e0>
                return false;
 800badc:	2300      	movs	r3, #0
 800bade:	e033      	b.n	800bb48 <encode_basic_field+0x1e8>
            break;
        }
        
        case PB_HTYPE_ONEOF:
            if (*(const pb_size_t*)pSize == field->tag)
 800bae0:	69fb      	ldr	r3, [r7, #28]
 800bae2:	881a      	ldrh	r2, [r3, #0]
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	881b      	ldrh	r3, [r3, #0]
 800bae8:	b29b      	uxth	r3, r3
 800baea:	429a      	cmp	r2, r3
 800baec:	d12a      	bne.n	800bb44 <encode_basic_field+0x1e4>
            {
                if (!pb_encode_tag_for_field(stream, field))
 800baee:	68b9      	ldr	r1, [r7, #8]
 800baf0:	68f8      	ldr	r0, [r7, #12]
 800baf2:	f000 fa63 	bl	800bfbc <pb_encode_tag_for_field>
 800baf6:	4603      	mov	r3, r0
 800baf8:	f083 0301 	eor.w	r3, r3, #1
 800bafc:	b2db      	uxtb	r3, r3
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d001      	beq.n	800bb06 <encode_basic_field+0x1a6>
                    return false;
 800bb02:	2300      	movs	r3, #0
 800bb04:	e020      	b.n	800bb48 <encode_basic_field+0x1e8>

                if (!func(stream, field, pData))
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	687a      	ldr	r2, [r7, #4]
 800bb0a:	68b9      	ldr	r1, [r7, #8]
 800bb0c:	68f8      	ldr	r0, [r7, #12]
 800bb0e:	4798      	blx	r3
 800bb10:	4603      	mov	r3, r0
 800bb12:	f083 0301 	eor.w	r3, r3, #1
 800bb16:	b2db      	uxtb	r3, r3
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d013      	beq.n	800bb44 <encode_basic_field+0x1e4>
                    return false;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	e013      	b.n	800bb48 <encode_basic_field+0x1e8>
            }
            break;
            
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	691b      	ldr	r3, [r3, #16]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d002      	beq.n	800bb2e <encode_basic_field+0x1ce>
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	691b      	ldr	r3, [r3, #16]
 800bb2c:	e000      	b.n	800bb30 <encode_basic_field+0x1d0>
 800bb2e:	4b0a      	ldr	r3, [pc, #40]	; (800bb58 <encode_basic_field+0x1f8>)
 800bb30:	68fa      	ldr	r2, [r7, #12]
 800bb32:	6113      	str	r3, [r2, #16]
 800bb34:	2300      	movs	r3, #0
 800bb36:	e007      	b.n	800bb48 <encode_basic_field+0x1e8>
            break;
 800bb38:	bf00      	nop
 800bb3a:	e004      	b.n	800bb46 <encode_basic_field+0x1e6>
            break;
 800bb3c:	bf00      	nop
 800bb3e:	e002      	b.n	800bb46 <encode_basic_field+0x1e6>
            break;
 800bb40:	bf00      	nop
 800bb42:	e000      	b.n	800bb46 <encode_basic_field+0x1e6>
            break;
 800bb44:	bf00      	nop
    }
    
    return true;
 800bb46:	2301      	movs	r3, #1
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3720      	adds	r7, #32
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}
 800bb50:	0801b46c 	.word	0x0801b46c
 800bb54:	08011084 	.word	0x08011084
 800bb58:	0801109c 	.word	0x0801109c

0800bb5c <encode_callback_field>:

/* Encode a field with callback semantics. This means that a user function is
 * called to provide and encode the actual data. */
static bool checkreturn encode_callback_field(pb_ostream_t *stream,
    const pb_field_t *field, const void *pData)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b086      	sub	sp, #24
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	60f8      	str	r0, [r7, #12]
 800bb64:	60b9      	str	r1, [r7, #8]
 800bb66:	607a      	str	r2, [r7, #4]
    const pb_callback_t *callback = (const pb_callback_t*)pData;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	617b      	str	r3, [r7, #20]
    
#ifdef PB_OLD_CALLBACK_STYLE
    const void *arg = callback->arg;
#else
    void * const *arg = &(callback->arg);
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	3304      	adds	r3, #4
 800bb70:	613b      	str	r3, [r7, #16]
#endif    
    
    if (callback->funcs.encode != NULL)
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d017      	beq.n	800bbaa <encode_callback_field+0x4e>
    {
        if (!callback->funcs.encode(stream, field, arg))
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	693a      	ldr	r2, [r7, #16]
 800bb80:	68b9      	ldr	r1, [r7, #8]
 800bb82:	68f8      	ldr	r0, [r7, #12]
 800bb84:	4798      	blx	r3
 800bb86:	4603      	mov	r3, r0
 800bb88:	f083 0301 	eor.w	r3, r3, #1
 800bb8c:	b2db      	uxtb	r3, r3
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d00b      	beq.n	800bbaa <encode_callback_field+0x4e>
            PB_RETURN_ERROR(stream, "callback error");
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	691b      	ldr	r3, [r3, #16]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d002      	beq.n	800bba0 <encode_callback_field+0x44>
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	691b      	ldr	r3, [r3, #16]
 800bb9e:	e000      	b.n	800bba2 <encode_callback_field+0x46>
 800bba0:	4b04      	ldr	r3, [pc, #16]	; (800bbb4 <encode_callback_field+0x58>)
 800bba2:	68fa      	ldr	r2, [r7, #12]
 800bba4:	6113      	str	r3, [r2, #16]
 800bba6:	2300      	movs	r3, #0
 800bba8:	e000      	b.n	800bbac <encode_callback_field+0x50>
    }
    return true;
 800bbaa:	2301      	movs	r3, #1
}
 800bbac:	4618      	mov	r0, r3
 800bbae:	3718      	adds	r7, #24
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}
 800bbb4:	080110b0 	.word	0x080110b0

0800bbb8 <encode_field>:

/* Encode a single field of any callback or static type. */
static bool checkreturn encode_field(pb_ostream_t *stream,
    const pb_field_t *field, const void *pData)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b084      	sub	sp, #16
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	60f8      	str	r0, [r7, #12]
 800bbc0:	60b9      	str	r1, [r7, #8]
 800bbc2:	607a      	str	r2, [r7, #4]
    switch (PB_ATYPE(field->type))
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	789b      	ldrb	r3, [r3, #2]
 800bbc8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bbcc:	2b40      	cmp	r3, #64	; 0x40
 800bbce:	d00a      	beq.n	800bbe6 <encode_field+0x2e>
 800bbd0:	2b80      	cmp	r3, #128	; 0x80
 800bbd2:	d001      	beq.n	800bbd8 <encode_field+0x20>
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d10d      	bne.n	800bbf4 <encode_field+0x3c>
    {
        case PB_ATYPE_STATIC:
        case PB_ATYPE_POINTER:
            return encode_basic_field(stream, field, pData);
 800bbd8:	687a      	ldr	r2, [r7, #4]
 800bbda:	68b9      	ldr	r1, [r7, #8]
 800bbdc:	68f8      	ldr	r0, [r7, #12]
 800bbde:	f7ff febf 	bl	800b960 <encode_basic_field>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	e011      	b.n	800bc0a <encode_field+0x52>
        
        case PB_ATYPE_CALLBACK:
            return encode_callback_field(stream, field, pData);
 800bbe6:	687a      	ldr	r2, [r7, #4]
 800bbe8:	68b9      	ldr	r1, [r7, #8]
 800bbea:	68f8      	ldr	r0, [r7, #12]
 800bbec:	f7ff ffb6 	bl	800bb5c <encode_callback_field>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	e00a      	b.n	800bc0a <encode_field+0x52>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	691b      	ldr	r3, [r3, #16]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d002      	beq.n	800bc02 <encode_field+0x4a>
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	691b      	ldr	r3, [r3, #16]
 800bc00:	e000      	b.n	800bc04 <encode_field+0x4c>
 800bc02:	4b04      	ldr	r3, [pc, #16]	; (800bc14 <encode_field+0x5c>)
 800bc04:	68fa      	ldr	r2, [r7, #12]
 800bc06:	6113      	str	r3, [r2, #16]
 800bc08:	2300      	movs	r3, #0
    }
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3710      	adds	r7, #16
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}
 800bc12:	bf00      	nop
 800bc14:	0801109c 	.word	0x0801109c

0800bc18 <default_extension_encoder>:

/* Default handler for extension fields. Expects to have a pb_field_t
 * pointer in the extension->type->arg field. */
static bool checkreturn default_extension_encoder(pb_ostream_t *stream,
    const pb_extension_t *extension)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b084      	sub	sp, #16
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
 800bc20:	6039      	str	r1, [r7, #0]
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	689b      	ldr	r3, [r3, #8]
 800bc28:	60fb      	str	r3, [r7, #12]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	789b      	ldrb	r3, [r3, #2]
 800bc2e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bc32:	2b80      	cmp	r3, #128	; 0x80
 800bc34:	d108      	bne.n	800bc48 <default_extension_encoder+0x30>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        return encode_field(stream, field, &extension->dest);
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	3304      	adds	r3, #4
 800bc3a:	461a      	mov	r2, r3
 800bc3c:	68f9      	ldr	r1, [r7, #12]
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f7ff ffba 	bl	800bbb8 <encode_field>
 800bc44:	4603      	mov	r3, r0
 800bc46:	e007      	b.n	800bc58 <default_extension_encoder+0x40>
    }
    else
    {
        return encode_field(stream, field, extension->dest);
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	461a      	mov	r2, r3
 800bc4e:	68f9      	ldr	r1, [r7, #12]
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f7ff ffb1 	bl	800bbb8 <encode_field>
 800bc56:	4603      	mov	r3, r0
    }
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3710      	adds	r7, #16
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}

0800bc60 <encode_extension_field>:

/* Walk through all the registered extensions and give them a chance
 * to encode themselves. */
static bool checkreturn encode_extension_field(pb_ostream_t *stream,
    const pb_field_t *field, const void *pData)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b086      	sub	sp, #24
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	60f8      	str	r0, [r7, #12]
 800bc68:	60b9      	str	r1, [r7, #8]
 800bc6a:	607a      	str	r2, [r7, #4]
    const pb_extension_t *extension = *(const pb_extension_t* const *)pData;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	617b      	str	r3, [r7, #20]
    PB_UNUSED(field);
    
    while (extension)
 800bc72:	e01e      	b.n	800bcb2 <encode_extension_field+0x52>
    {
        bool status;
        if (extension->type->encode)
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	685b      	ldr	r3, [r3, #4]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d008      	beq.n	800bc90 <encode_extension_field+0x30>
            status = extension->type->encode(stream, extension);
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	6979      	ldr	r1, [r7, #20]
 800bc86:	68f8      	ldr	r0, [r7, #12]
 800bc88:	4798      	blx	r3
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	74fb      	strb	r3, [r7, #19]
 800bc8e:	e005      	b.n	800bc9c <encode_extension_field+0x3c>
        else
            status = default_extension_encoder(stream, extension);
 800bc90:	6979      	ldr	r1, [r7, #20]
 800bc92:	68f8      	ldr	r0, [r7, #12]
 800bc94:	f7ff ffc0 	bl	800bc18 <default_extension_encoder>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	74fb      	strb	r3, [r7, #19]

        if (!status)
 800bc9c:	7cfb      	ldrb	r3, [r7, #19]
 800bc9e:	f083 0301 	eor.w	r3, r3, #1
 800bca2:	b2db      	uxtb	r3, r3
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d001      	beq.n	800bcac <encode_extension_field+0x4c>
            return false;
 800bca8:	2300      	movs	r3, #0
 800bcaa:	e006      	b.n	800bcba <encode_extension_field+0x5a>
        
        extension = extension->next;
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	689b      	ldr	r3, [r3, #8]
 800bcb0:	617b      	str	r3, [r7, #20]
    while (extension)
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d1dd      	bne.n	800bc74 <encode_extension_field+0x14>
    }
    
    return true;
 800bcb8:	2301      	movs	r3, #1
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3718      	adds	r7, #24
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}

0800bcc2 <pb_const_cast>:
/*********************
 * Encode all fields *
 *********************/

static void *pb_const_cast(const void *p)
{
 800bcc2:	b480      	push	{r7}
 800bcc4:	b085      	sub	sp, #20
 800bcc6:	af00      	add	r7, sp, #0
 800bcc8:	6078      	str	r0, [r7, #4]
     * logic for both encoding and decoding. */
    union {
        void *p1;
        const void *p2;
    } t;
    t.p2 = p;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	60fb      	str	r3, [r7, #12]
    return t.p1;
 800bcce:	68fb      	ldr	r3, [r7, #12]
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	3714      	adds	r7, #20
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcda:	4770      	bx	lr

0800bcdc <pb_encode>:

bool checkreturn pb_encode(pb_ostream_t *stream, const pb_field_t fields[], const void *src_struct)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b08a      	sub	sp, #40	; 0x28
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	60f8      	str	r0, [r7, #12]
 800bce4:	60b9      	str	r1, [r7, #8]
 800bce6:	607a      	str	r2, [r7, #4]
    pb_field_iter_t iter;
    if (!pb_field_iter_begin(&iter, fields, pb_const_cast(src_struct)))
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f7ff ffea 	bl	800bcc2 <pb_const_cast>
 800bcee:	4602      	mov	r2, r0
 800bcf0:	f107 0310 	add.w	r3, r7, #16
 800bcf4:	68b9      	ldr	r1, [r7, #8]
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7fd fe72 	bl	80099e0 <pb_field_iter_begin>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	f083 0301 	eor.w	r3, r3, #1
 800bd02:	b2db      	uxtb	r3, r3
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d001      	beq.n	800bd0c <pb_encode+0x30>
        return true; /* Empty message type */
 800bd08:	2301      	movs	r3, #1
 800bd0a:	e02a      	b.n	800bd62 <pb_encode+0x86>
    
    do {
        if (PB_LTYPE(iter.pos->type) == PB_LTYPE_EXTENSION)
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	789b      	ldrb	r3, [r3, #2]
 800bd10:	f003 030f 	and.w	r3, r3, #15
 800bd14:	2b08      	cmp	r3, #8
 800bd16:	d10d      	bne.n	800bd34 <pb_encode+0x58>
        {
            /* Special case for the extension field placeholder */
            if (!encode_extension_field(stream, iter.pos, iter.pData))
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	6a3a      	ldr	r2, [r7, #32]
 800bd1c:	4619      	mov	r1, r3
 800bd1e:	68f8      	ldr	r0, [r7, #12]
 800bd20:	f7ff ff9e 	bl	800bc60 <encode_extension_field>
 800bd24:	4603      	mov	r3, r0
 800bd26:	f083 0301 	eor.w	r3, r3, #1
 800bd2a:	b2db      	uxtb	r3, r3
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d00f      	beq.n	800bd50 <pb_encode+0x74>
                return false;
 800bd30:	2300      	movs	r3, #0
 800bd32:	e016      	b.n	800bd62 <pb_encode+0x86>
        }
        else
        {
            /* Regular field */
            if (!encode_field(stream, iter.pos, iter.pData))
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	6a3a      	ldr	r2, [r7, #32]
 800bd38:	4619      	mov	r1, r3
 800bd3a:	68f8      	ldr	r0, [r7, #12]
 800bd3c:	f7ff ff3c 	bl	800bbb8 <encode_field>
 800bd40:	4603      	mov	r3, r0
 800bd42:	f083 0301 	eor.w	r3, r3, #1
 800bd46:	b2db      	uxtb	r3, r3
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d001      	beq.n	800bd50 <pb_encode+0x74>
                return false;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	e008      	b.n	800bd62 <pb_encode+0x86>
        }
    } while (pb_field_iter_next(&iter));
 800bd50:	f107 0310 	add.w	r3, r7, #16
 800bd54:	4618      	mov	r0, r3
 800bd56:	f7fd fe78 	bl	8009a4a <pb_field_iter_next>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d1d5      	bne.n	800bd0c <pb_encode+0x30>
    
    return true;
 800bd60:	2301      	movs	r3, #1
}
 800bd62:	4618      	mov	r0, r3
 800bd64:	3728      	adds	r7, #40	; 0x28
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}

0800bd6a <pb_encode_varint>:
  return pb_write(stream, buffer, i);
}
#endif

bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
 800bd6a:	b590      	push	{r4, r7, lr}
 800bd6c:	b08b      	sub	sp, #44	; 0x2c
 800bd6e:	af00      	add	r7, sp, #0
 800bd70:	60f8      	str	r0, [r7, #12]
 800bd72:	e9c7 2300 	strd	r2, r3, [r7]
    pb_byte_t buffer[10];
    size_t i = 0;
 800bd76:	2300      	movs	r3, #0
 800bd78:	627b      	str	r3, [r7, #36]	; 0x24
    
    if (value <= 0x7F)
 800bd7a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800bd7e:	2c00      	cmp	r4, #0
 800bd80:	bf08      	it	eq
 800bd82:	2b80      	cmpeq	r3, #128	; 0x80
 800bd84:	d223      	bcs.n	800bdce <pb_encode_varint+0x64>
    {
        pb_byte_t v = (pb_byte_t)value;
 800bd86:	783b      	ldrb	r3, [r7, #0]
 800bd88:	75fb      	strb	r3, [r7, #23]
        return pb_write(stream, &v, 1);
 800bd8a:	f107 0317 	add.w	r3, r7, #23
 800bd8e:	2201      	movs	r2, #1
 800bd90:	4619      	mov	r1, r3
 800bd92:	68f8      	ldr	r0, [r7, #12]
 800bd94:	f7ff fbc2 	bl	800b51c <pb_write>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	e035      	b.n	800be08 <pb_encode_varint+0x9e>
    }
    
    while (value)
    {
        buffer[i] = (pb_byte_t)((value & 0x7F) | 0x80);
 800bd9c:	783b      	ldrb	r3, [r7, #0]
 800bd9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bda2:	b2d9      	uxtb	r1, r3
 800bda4:	f107 0218 	add.w	r2, r7, #24
 800bda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdaa:	4413      	add	r3, r2
 800bdac:	460a      	mov	r2, r1
 800bdae:	701a      	strb	r2, [r3, #0]
        value >>= 7;
 800bdb0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bdb4:	f04f 0300 	mov.w	r3, #0
 800bdb8:	f04f 0400 	mov.w	r4, #0
 800bdbc:	09cb      	lsrs	r3, r1, #7
 800bdbe:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800bdc2:	09d4      	lsrs	r4, r2, #7
 800bdc4:	e9c7 3400 	strd	r3, r4, [r7]
        i++;
 800bdc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdca:	3301      	adds	r3, #1
 800bdcc:	627b      	str	r3, [r7, #36]	; 0x24
    while (value)
 800bdce:	e9d7 3400 	ldrd	r3, r4, [r7]
 800bdd2:	4323      	orrs	r3, r4
 800bdd4:	d1e2      	bne.n	800bd9c <pb_encode_varint+0x32>
    }
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
 800bdd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd8:	3b01      	subs	r3, #1
 800bdda:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800bdde:	4413      	add	r3, r2
 800bde0:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800bde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde6:	3b01      	subs	r3, #1
 800bde8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bdec:	b2d2      	uxtb	r2, r2
 800bdee:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800bdf2:	440b      	add	r3, r1
 800bdf4:	f803 2c10 	strb.w	r2, [r3, #-16]
    
    return pb_write(stream, buffer, i);
 800bdf8:	f107 0318 	add.w	r3, r7, #24
 800bdfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdfe:	4619      	mov	r1, r3
 800be00:	68f8      	ldr	r0, [r7, #12]
 800be02:	f7ff fb8b 	bl	800b51c <pb_write>
 800be06:	4603      	mov	r3, r0
}
 800be08:	4618      	mov	r0, r3
 800be0a:	372c      	adds	r7, #44	; 0x2c
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd90      	pop	{r4, r7, pc}

0800be10 <pb_encode_svarint>:

bool checkreturn pb_encode_svarint(pb_ostream_t *stream, pb_int64_t value)
{
 800be10:	b590      	push	{r4, r7, lr}
 800be12:	b087      	sub	sp, #28
 800be14:	af00      	add	r7, sp, #0
 800be16:	60f8      	str	r0, [r7, #12]
 800be18:	e9c7 2300 	strd	r2, r3, [r7]
    pb_uint64_t zigzagged;
    if (value < 0)
 800be1c:	e9d7 3400 	ldrd	r3, r4, [r7]
 800be20:	2b00      	cmp	r3, #0
 800be22:	f174 0300 	sbcs.w	r3, r4, #0
 800be26:	da0d      	bge.n	800be44 <pb_encode_svarint+0x34>
        zigzagged = ~((pb_uint64_t)value << 1);
 800be28:	e9d7 1200 	ldrd	r1, r2, [r7]
 800be2c:	184b      	adds	r3, r1, r1
 800be2e:	eb42 0402 	adc.w	r4, r2, r2
 800be32:	4619      	mov	r1, r3
 800be34:	4622      	mov	r2, r4
 800be36:	ea6f 0301 	mvn.w	r3, r1
 800be3a:	ea6f 0402 	mvn.w	r4, r2
 800be3e:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800be42:	e006      	b.n	800be52 <pb_encode_svarint+0x42>
    else
        zigzagged = (pb_uint64_t)value << 1;
 800be44:	e9d7 1200 	ldrd	r1, r2, [r7]
 800be48:	184b      	adds	r3, r1, r1
 800be4a:	eb42 0402 	adc.w	r4, r2, r2
 800be4e:	e9c7 3404 	strd	r3, r4, [r7, #16]
    
    return pb_encode_varint(stream, zigzagged);
 800be52:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800be56:	68f8      	ldr	r0, [r7, #12]
 800be58:	f7ff ff87 	bl	800bd6a <pb_encode_varint>
 800be5c:	4603      	mov	r3, r0
}
 800be5e:	4618      	mov	r0, r3
 800be60:	371c      	adds	r7, #28
 800be62:	46bd      	mov	sp, r7
 800be64:	bd90      	pop	{r4, r7, pc}

0800be66 <pb_encode_fixed32>:

bool checkreturn pb_encode_fixed32(pb_ostream_t *stream, const void *value)
{
 800be66:	b580      	push	{r7, lr}
 800be68:	b084      	sub	sp, #16
 800be6a:	af00      	add	r7, sp, #0
 800be6c:	6078      	str	r0, [r7, #4]
 800be6e:	6039      	str	r1, [r7, #0]
    uint32_t val = *(const uint32_t*)value;
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	60fb      	str	r3, [r7, #12]
    pb_byte_t bytes[4];
    bytes[0] = (pb_byte_t)(val & 0xFF);
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	b2db      	uxtb	r3, r3
 800be7a:	723b      	strb	r3, [r7, #8]
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	0a1b      	lsrs	r3, r3, #8
 800be80:	b2db      	uxtb	r3, r3
 800be82:	727b      	strb	r3, [r7, #9]
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	0c1b      	lsrs	r3, r3, #16
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	72bb      	strb	r3, [r7, #10]
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	0e1b      	lsrs	r3, r3, #24
 800be90:	b2db      	uxtb	r3, r3
 800be92:	72fb      	strb	r3, [r7, #11]
    return pb_write(stream, bytes, 4);
 800be94:	f107 0308 	add.w	r3, r7, #8
 800be98:	2204      	movs	r2, #4
 800be9a:	4619      	mov	r1, r3
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f7ff fb3d 	bl	800b51c <pb_write>
 800bea2:	4603      	mov	r3, r0
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	3710      	adds	r7, #16
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}

0800beac <pb_encode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_encode_fixed64(pb_ostream_t *stream, const void *value)
{
 800beac:	b590      	push	{r4, r7, lr}
 800beae:	b087      	sub	sp, #28
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
 800beb4:	6039      	str	r1, [r7, #0]
    uint64_t val = *(const uint64_t*)value;
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bebc:	e9c7 3404 	strd	r3, r4, [r7, #16]
    pb_byte_t bytes[8];
    bytes[0] = (pb_byte_t)(val & 0xFF);
 800bec0:	7c3b      	ldrb	r3, [r7, #16]
 800bec2:	723b      	strb	r3, [r7, #8]
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 800bec4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bec8:	f04f 0300 	mov.w	r3, #0
 800becc:	f04f 0400 	mov.w	r4, #0
 800bed0:	0a0b      	lsrs	r3, r1, #8
 800bed2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bed6:	0a14      	lsrs	r4, r2, #8
 800bed8:	b2db      	uxtb	r3, r3
 800beda:	727b      	strb	r3, [r7, #9]
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 800bedc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bee0:	f04f 0300 	mov.w	r3, #0
 800bee4:	f04f 0400 	mov.w	r4, #0
 800bee8:	0c0b      	lsrs	r3, r1, #16
 800beea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800beee:	0c14      	lsrs	r4, r2, #16
 800bef0:	b2db      	uxtb	r3, r3
 800bef2:	72bb      	strb	r3, [r7, #10]
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 800bef4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bef8:	f04f 0300 	mov.w	r3, #0
 800befc:	f04f 0400 	mov.w	r4, #0
 800bf00:	0e0b      	lsrs	r3, r1, #24
 800bf02:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bf06:	0e14      	lsrs	r4, r2, #24
 800bf08:	b2db      	uxtb	r3, r3
 800bf0a:	72fb      	strb	r3, [r7, #11]
    bytes[4] = (pb_byte_t)((val >> 32) & 0xFF);
 800bf0c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bf10:	f04f 0300 	mov.w	r3, #0
 800bf14:	f04f 0400 	mov.w	r4, #0
 800bf18:	0013      	movs	r3, r2
 800bf1a:	2400      	movs	r4, #0
 800bf1c:	b2db      	uxtb	r3, r3
 800bf1e:	733b      	strb	r3, [r7, #12]
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
 800bf20:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bf24:	f04f 0300 	mov.w	r3, #0
 800bf28:	f04f 0400 	mov.w	r4, #0
 800bf2c:	0a13      	lsrs	r3, r2, #8
 800bf2e:	2400      	movs	r4, #0
 800bf30:	b2db      	uxtb	r3, r3
 800bf32:	737b      	strb	r3, [r7, #13]
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 800bf34:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bf38:	f04f 0300 	mov.w	r3, #0
 800bf3c:	f04f 0400 	mov.w	r4, #0
 800bf40:	0c13      	lsrs	r3, r2, #16
 800bf42:	2400      	movs	r4, #0
 800bf44:	b2db      	uxtb	r3, r3
 800bf46:	73bb      	strb	r3, [r7, #14]
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 800bf48:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bf4c:	f04f 0300 	mov.w	r3, #0
 800bf50:	f04f 0400 	mov.w	r4, #0
 800bf54:	0e13      	lsrs	r3, r2, #24
 800bf56:	2400      	movs	r4, #0
 800bf58:	b2db      	uxtb	r3, r3
 800bf5a:	73fb      	strb	r3, [r7, #15]
    return pb_write(stream, bytes, 8);
 800bf5c:	f107 0308 	add.w	r3, r7, #8
 800bf60:	2208      	movs	r2, #8
 800bf62:	4619      	mov	r1, r3
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f7ff fad9 	bl	800b51c <pb_write>
 800bf6a:	4603      	mov	r3, r0
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	371c      	adds	r7, #28
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd90      	pop	{r4, r7, pc}

0800bf74 <pb_encode_tag>:
#endif

bool checkreturn pb_encode_tag(pb_ostream_t *stream, pb_wire_type_t wiretype, uint32_t field_number)
{
 800bf74:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800bf78:	b086      	sub	sp, #24
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	60f8      	str	r0, [r7, #12]
 800bf7e:	607a      	str	r2, [r7, #4]
 800bf80:	460a      	mov	r2, r1
 800bf82:	72fa      	strb	r2, [r7, #11]
    pb_uint64_t tag = ((pb_uint64_t)field_number << 3) | wiretype;
 800bf84:	687a      	ldr	r2, [r7, #4]
 800bf86:	4611      	mov	r1, r2
 800bf88:	f04f 0200 	mov.w	r2, #0
 800bf8c:	ea4f 7c51 	mov.w	ip, r1, lsr #29
 800bf90:	ea4f 0bc1 	mov.w	fp, r1, lsl #3
 800bf94:	7af9      	ldrb	r1, [r7, #11]
 800bf96:	f04f 0200 	mov.w	r2, #0
 800bf9a:	ea4b 0301 	orr.w	r3, fp, r1
 800bf9e:	ea4c 0402 	orr.w	r4, ip, r2
 800bfa2:	e9c7 3404 	strd	r3, r4, [r7, #16]
    return pb_encode_varint(stream, tag);
 800bfa6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bfaa:	68f8      	ldr	r0, [r7, #12]
 800bfac:	f7ff fedd 	bl	800bd6a <pb_encode_varint>
 800bfb0:	4603      	mov	r3, r0
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3718      	adds	r7, #24
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800bfbc <pb_encode_tag_for_field>:

bool checkreturn pb_encode_tag_for_field(pb_ostream_t *stream, const pb_field_t *field)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b084      	sub	sp, #16
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	6039      	str	r1, [r7, #0]
    pb_wire_type_t wiretype;
    switch (PB_LTYPE(field->type))
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	789b      	ldrb	r3, [r3, #2]
 800bfca:	f003 030f 	and.w	r3, r3, #15
 800bfce:	2b09      	cmp	r3, #9
 800bfd0:	d822      	bhi.n	800c018 <pb_encode_tag_for_field+0x5c>
 800bfd2:	a201      	add	r2, pc, #4	; (adr r2, 800bfd8 <pb_encode_tag_for_field+0x1c>)
 800bfd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfd8:	0800c001 	.word	0x0800c001
 800bfdc:	0800c001 	.word	0x0800c001
 800bfe0:	0800c001 	.word	0x0800c001
 800bfe4:	0800c007 	.word	0x0800c007
 800bfe8:	0800c00d 	.word	0x0800c00d
 800bfec:	0800c013 	.word	0x0800c013
 800bff0:	0800c013 	.word	0x0800c013
 800bff4:	0800c013 	.word	0x0800c013
 800bff8:	0800c019 	.word	0x0800c019
 800bffc:	0800c013 	.word	0x0800c013
    {
        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            wiretype = PB_WT_VARINT;
 800c000:	2300      	movs	r3, #0
 800c002:	73fb      	strb	r3, [r7, #15]
            break;
 800c004:	e014      	b.n	800c030 <pb_encode_tag_for_field+0x74>
        
        case PB_LTYPE_FIXED32:
            wiretype = PB_WT_32BIT;
 800c006:	2305      	movs	r3, #5
 800c008:	73fb      	strb	r3, [r7, #15]
            break;
 800c00a:	e011      	b.n	800c030 <pb_encode_tag_for_field+0x74>
        
        case PB_LTYPE_FIXED64:
            wiretype = PB_WT_64BIT;
 800c00c:	2301      	movs	r3, #1
 800c00e:	73fb      	strb	r3, [r7, #15]
            break;
 800c010:	e00e      	b.n	800c030 <pb_encode_tag_for_field+0x74>
        
        case PB_LTYPE_BYTES:
        case PB_LTYPE_STRING:
        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_FIXED_LENGTH_BYTES:
            wiretype = PB_WT_STRING;
 800c012:	2302      	movs	r3, #2
 800c014:	73fb      	strb	r3, [r7, #15]
            break;
 800c016:	e00b      	b.n	800c030 <pb_encode_tag_for_field+0x74>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	691b      	ldr	r3, [r3, #16]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d002      	beq.n	800c026 <pb_encode_tag_for_field+0x6a>
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	691b      	ldr	r3, [r3, #16]
 800c024:	e000      	b.n	800c028 <pb_encode_tag_for_field+0x6c>
 800c026:	4b09      	ldr	r3, [pc, #36]	; (800c04c <pb_encode_tag_for_field+0x90>)
 800c028:	687a      	ldr	r2, [r7, #4]
 800c02a:	6113      	str	r3, [r2, #16]
 800c02c:	2300      	movs	r3, #0
 800c02e:	e009      	b.n	800c044 <pb_encode_tag_for_field+0x88>
    }
    
    return pb_encode_tag(stream, wiretype, field->tag);
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	881b      	ldrh	r3, [r3, #0]
 800c034:	b29b      	uxth	r3, r3
 800c036:	461a      	mov	r2, r3
 800c038:	7bfb      	ldrb	r3, [r7, #15]
 800c03a:	4619      	mov	r1, r3
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f7ff ff99 	bl	800bf74 <pb_encode_tag>
 800c042:	4603      	mov	r3, r0
}
 800c044:	4618      	mov	r0, r3
 800c046:	3710      	adds	r7, #16
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}
 800c04c:	0801109c 	.word	0x0801109c

0800c050 <pb_encode_string>:

bool checkreturn pb_encode_string(pb_ostream_t *stream, const pb_byte_t *buffer, size_t size)
{
 800c050:	b590      	push	{r4, r7, lr}
 800c052:	b085      	sub	sp, #20
 800c054:	af00      	add	r7, sp, #0
 800c056:	60f8      	str	r0, [r7, #12]
 800c058:	60b9      	str	r1, [r7, #8]
 800c05a:	607a      	str	r2, [r7, #4]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f04f 0400 	mov.w	r4, #0
 800c062:	461a      	mov	r2, r3
 800c064:	4623      	mov	r3, r4
 800c066:	68f8      	ldr	r0, [r7, #12]
 800c068:	f7ff fe7f 	bl	800bd6a <pb_encode_varint>
 800c06c:	4603      	mov	r3, r0
 800c06e:	f083 0301 	eor.w	r3, r3, #1
 800c072:	b2db      	uxtb	r3, r3
 800c074:	2b00      	cmp	r3, #0
 800c076:	d001      	beq.n	800c07c <pb_encode_string+0x2c>
        return false;
 800c078:	2300      	movs	r3, #0
 800c07a:	e005      	b.n	800c088 <pb_encode_string+0x38>
    
    return pb_write(stream, buffer, size);
 800c07c:	687a      	ldr	r2, [r7, #4]
 800c07e:	68b9      	ldr	r1, [r7, #8]
 800c080:	68f8      	ldr	r0, [r7, #12]
 800c082:	f7ff fa4b 	bl	800b51c <pb_write>
 800c086:	4603      	mov	r3, r0
}
 800c088:	4618      	mov	r0, r3
 800c08a:	3714      	adds	r7, #20
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd90      	pop	{r4, r7, pc}

0800c090 <pb_encode_submessage>:

bool checkreturn pb_encode_submessage(pb_ostream_t *stream, const pb_field_t fields[], const void *src_struct)
{
 800c090:	b590      	push	{r4, r7, lr}
 800c092:	b08d      	sub	sp, #52	; 0x34
 800c094:	af00      	add	r7, sp, #0
 800c096:	60f8      	str	r0, [r7, #12]
 800c098:	60b9      	str	r1, [r7, #8]
 800c09a:	607a      	str	r2, [r7, #4]
    /* First calculate the message size using a non-writing substream. */
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 800c09c:	f107 0314 	add.w	r3, r7, #20
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	601a      	str	r2, [r3, #0]
 800c0a4:	605a      	str	r2, [r3, #4]
 800c0a6:	609a      	str	r2, [r3, #8]
 800c0a8:	60da      	str	r2, [r3, #12]
 800c0aa:	611a      	str	r2, [r3, #16]
    size_t size;
    bool status;
    
    if (!pb_encode(&substream, fields, src_struct))
 800c0ac:	f107 0314 	add.w	r3, r7, #20
 800c0b0:	687a      	ldr	r2, [r7, #4]
 800c0b2:	68b9      	ldr	r1, [r7, #8]
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f7ff fe11 	bl	800bcdc <pb_encode>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	f083 0301 	eor.w	r3, r3, #1
 800c0c0:	b2db      	uxtb	r3, r3
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d004      	beq.n	800c0d0 <pb_encode_submessage+0x40>
    {
#ifndef PB_NO_ERRMSG
        stream->errmsg = substream.errmsg;
 800c0c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	611a      	str	r2, [r3, #16]
#endif
        return false;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	e064      	b.n	800c19a <pb_encode_submessage+0x10a>
    }
    
    size = substream.bytes_written;
 800c0d0:	6a3b      	ldr	r3, [r7, #32]
 800c0d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800c0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d6:	f04f 0400 	mov.w	r4, #0
 800c0da:	461a      	mov	r2, r3
 800c0dc:	4623      	mov	r3, r4
 800c0de:	68f8      	ldr	r0, [r7, #12]
 800c0e0:	f7ff fe43 	bl	800bd6a <pb_encode_varint>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	f083 0301 	eor.w	r3, r3, #1
 800c0ea:	b2db      	uxtb	r3, r3
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d001      	beq.n	800c0f4 <pb_encode_submessage+0x64>
        return false;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	e052      	b.n	800c19a <pb_encode_submessage+0x10a>
    
    if (stream->callback == NULL)
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d106      	bne.n	800c10a <pb_encode_submessage+0x7a>
        return pb_write(stream, NULL, size); /* Just sizing */
 800c0fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0fe:	2100      	movs	r1, #0
 800c100:	68f8      	ldr	r0, [r7, #12]
 800c102:	f7ff fa0b 	bl	800b51c <pb_write>
 800c106:	4603      	mov	r3, r0
 800c108:	e047      	b.n	800c19a <pb_encode_submessage+0x10a>
    
    if (stream->bytes_written + size > stream->max_size)
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	68da      	ldr	r2, [r3, #12]
 800c10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c110:	441a      	add	r2, r3
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	689b      	ldr	r3, [r3, #8]
 800c116:	429a      	cmp	r2, r3
 800c118:	d90b      	bls.n	800c132 <pb_encode_submessage+0xa2>
        PB_RETURN_ERROR(stream, "stream full");
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	691b      	ldr	r3, [r3, #16]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d002      	beq.n	800c128 <pb_encode_submessage+0x98>
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	691b      	ldr	r3, [r3, #16]
 800c126:	e000      	b.n	800c12a <pb_encode_submessage+0x9a>
 800c128:	4b1e      	ldr	r3, [pc, #120]	; (800c1a4 <pb_encode_submessage+0x114>)
 800c12a:	68fa      	ldr	r2, [r7, #12]
 800c12c:	6113      	str	r3, [r2, #16]
 800c12e:	2300      	movs	r3, #0
 800c130:	e033      	b.n	800c19a <pb_encode_submessage+0x10a>
        
    /* Use a substream to verify that a callback doesn't write more than
     * what it did the first time. */
    substream.callback = stream->callback;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	617b      	str	r3, [r7, #20]
    substream.state = stream->state;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	685b      	ldr	r3, [r3, #4]
 800c13c:	61bb      	str	r3, [r7, #24]
    substream.max_size = size;
 800c13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c140:	61fb      	str	r3, [r7, #28]
    substream.bytes_written = 0;
 800c142:	2300      	movs	r3, #0
 800c144:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    substream.errmsg = NULL;
 800c146:	2300      	movs	r3, #0
 800c148:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    
    status = pb_encode(&substream, fields, src_struct);
 800c14a:	f107 0314 	add.w	r3, r7, #20
 800c14e:	687a      	ldr	r2, [r7, #4]
 800c150:	68b9      	ldr	r1, [r7, #8]
 800c152:	4618      	mov	r0, r3
 800c154:	f7ff fdc2 	bl	800bcdc <pb_encode>
 800c158:	4603      	mov	r3, r0
 800c15a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    
    stream->bytes_written += substream.bytes_written;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	68da      	ldr	r2, [r3, #12]
 800c162:	6a3b      	ldr	r3, [r7, #32]
 800c164:	441a      	add	r2, r3
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	60da      	str	r2, [r3, #12]
    stream->state = substream.state;
 800c16a:	69ba      	ldr	r2, [r7, #24]
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	605a      	str	r2, [r3, #4]
#ifndef PB_NO_ERRMSG
    stream->errmsg = substream.errmsg;
 800c170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	611a      	str	r2, [r3, #16]
#endif
    
    if (substream.bytes_written != size)
 800c176:	6a3b      	ldr	r3, [r7, #32]
 800c178:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c17a:	429a      	cmp	r2, r3
 800c17c:	d00b      	beq.n	800c196 <pb_encode_submessage+0x106>
        PB_RETURN_ERROR(stream, "submsg size changed");
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	691b      	ldr	r3, [r3, #16]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d002      	beq.n	800c18c <pb_encode_submessage+0xfc>
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	691b      	ldr	r3, [r3, #16]
 800c18a:	e000      	b.n	800c18e <pb_encode_submessage+0xfe>
 800c18c:	4b06      	ldr	r3, [pc, #24]	; (800c1a8 <pb_encode_submessage+0x118>)
 800c18e:	68fa      	ldr	r2, [r7, #12]
 800c190:	6113      	str	r3, [r2, #16]
 800c192:	2300      	movs	r3, #0
 800c194:	e001      	b.n	800c19a <pb_encode_submessage+0x10a>
    
    return status;
 800c196:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	3734      	adds	r7, #52	; 0x34
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd90      	pop	{r4, r7, pc}
 800c1a2:	bf00      	nop
 800c1a4:	08011054 	.word	0x08011054
 800c1a8:	080110c0 	.word	0x080110c0

0800c1ac <pb_enc_varint>:

/* Field encoders */

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 800c1ac:	b590      	push	{r4, r7, lr}
 800c1ae:	b087      	sub	sp, #28
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	60f8      	str	r0, [r7, #12]
 800c1b4:	60b9      	str	r1, [r7, #8]
 800c1b6:	607a      	str	r2, [r7, #4]
    pb_int64_t value = 0;
 800c1b8:	f04f 0300 	mov.w	r3, #0
 800c1bc:	f04f 0400 	mov.w	r4, #0
 800c1c0:	e9c7 3404 	strd	r3, r4, [r7, #16]
    
    if (field->data_size == sizeof(int_least8_t))
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800c1ca:	b29b      	uxth	r3, r3
 800c1cc:	2b01      	cmp	r3, #1
 800c1ce:	d108      	bne.n	800c1e2 <pb_enc_varint+0x36>
        value = *(const int_least8_t*)src;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f993 3000 	ldrsb.w	r3, [r3]
 800c1d6:	b25b      	sxtb	r3, r3
 800c1d8:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800c1dc:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800c1e0:	e033      	b.n	800c24a <pb_enc_varint+0x9e>
    else if (field->data_size == sizeof(int_least16_t))
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800c1e8:	b29b      	uxth	r3, r3
 800c1ea:	2b02      	cmp	r3, #2
 800c1ec:	d108      	bne.n	800c200 <pb_enc_varint+0x54>
        value = *(const int_least16_t*)src;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c1f4:	b21b      	sxth	r3, r3
 800c1f6:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800c1fa:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800c1fe:	e024      	b.n	800c24a <pb_enc_varint+0x9e>
    else if (field->data_size == sizeof(int32_t))
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800c206:	b29b      	uxth	r3, r3
 800c208:	2b04      	cmp	r3, #4
 800c20a:	d106      	bne.n	800c21a <pb_enc_varint+0x6e>
        value = *(const int32_t*)src;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800c214:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800c218:	e017      	b.n	800c24a <pb_enc_varint+0x9e>
    else if (field->data_size == sizeof(pb_int64_t))
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800c220:	b29b      	uxth	r3, r3
 800c222:	2b08      	cmp	r3, #8
 800c224:	d105      	bne.n	800c232 <pb_enc_varint+0x86>
        value = *(const pb_int64_t*)src;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c22c:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800c230:	e00b      	b.n	800c24a <pb_enc_varint+0x9e>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	691b      	ldr	r3, [r3, #16]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d002      	beq.n	800c240 <pb_enc_varint+0x94>
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	691b      	ldr	r3, [r3, #16]
 800c23e:	e000      	b.n	800c242 <pb_enc_varint+0x96>
 800c240:	4b08      	ldr	r3, [pc, #32]	; (800c264 <pb_enc_varint+0xb8>)
 800c242:	68fa      	ldr	r2, [r7, #12]
 800c244:	6113      	str	r3, [r2, #16]
 800c246:	2300      	movs	r3, #0
 800c248:	e007      	b.n	800c25a <pb_enc_varint+0xae>
#ifdef PB_WITHOUT_64BIT
    if (value < 0)
      return pb_encode_negative_varint(stream, (pb_uint64_t)value);
    else
#endif
      return pb_encode_varint(stream, (pb_uint64_t)value);
 800c24a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c24e:	461a      	mov	r2, r3
 800c250:	4623      	mov	r3, r4
 800c252:	68f8      	ldr	r0, [r7, #12]
 800c254:	f7ff fd89 	bl	800bd6a <pb_encode_varint>
 800c258:	4603      	mov	r3, r0
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	371c      	adds	r7, #28
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd90      	pop	{r4, r7, pc}
 800c262:	bf00      	nop
 800c264:	080110d4 	.word	0x080110d4

0800c268 <pb_enc_uvarint>:

static bool checkreturn pb_enc_uvarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 800c268:	b590      	push	{r4, r7, lr}
 800c26a:	b087      	sub	sp, #28
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	60f8      	str	r0, [r7, #12]
 800c270:	60b9      	str	r1, [r7, #8]
 800c272:	607a      	str	r2, [r7, #4]
    pb_uint64_t value = 0;
 800c274:	f04f 0300 	mov.w	r3, #0
 800c278:	f04f 0400 	mov.w	r4, #0
 800c27c:	e9c7 3404 	strd	r3, r4, [r7, #16]
    
    if (field->data_size == sizeof(uint_least8_t))
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800c286:	b29b      	uxth	r3, r3
 800c288:	2b01      	cmp	r3, #1
 800c28a:	d107      	bne.n	800c29c <pb_enc_uvarint+0x34>
        value = *(const uint_least8_t*)src;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	781b      	ldrb	r3, [r3, #0]
 800c290:	b2db      	uxtb	r3, r3
 800c292:	f04f 0400 	mov.w	r4, #0
 800c296:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800c29a:	e032      	b.n	800c302 <pb_enc_uvarint+0x9a>
    else if (field->data_size == sizeof(uint_least16_t))
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800c2a2:	b29b      	uxth	r3, r3
 800c2a4:	2b02      	cmp	r3, #2
 800c2a6:	d107      	bne.n	800c2b8 <pb_enc_uvarint+0x50>
        value = *(const uint_least16_t*)src;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	881b      	ldrh	r3, [r3, #0]
 800c2ac:	b29b      	uxth	r3, r3
 800c2ae:	f04f 0400 	mov.w	r4, #0
 800c2b2:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800c2b6:	e024      	b.n	800c302 <pb_enc_uvarint+0x9a>
    else if (field->data_size == sizeof(uint32_t))
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800c2be:	b29b      	uxth	r3, r3
 800c2c0:	2b04      	cmp	r3, #4
 800c2c2:	d106      	bne.n	800c2d2 <pb_enc_uvarint+0x6a>
        value = *(const uint32_t*)src;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f04f 0400 	mov.w	r4, #0
 800c2cc:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800c2d0:	e017      	b.n	800c302 <pb_enc_uvarint+0x9a>
    else if (field->data_size == sizeof(pb_uint64_t))
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800c2d8:	b29b      	uxth	r3, r3
 800c2da:	2b08      	cmp	r3, #8
 800c2dc:	d105      	bne.n	800c2ea <pb_enc_uvarint+0x82>
        value = *(const pb_uint64_t*)src;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c2e4:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800c2e8:	e00b      	b.n	800c302 <pb_enc_uvarint+0x9a>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	691b      	ldr	r3, [r3, #16]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d002      	beq.n	800c2f8 <pb_enc_uvarint+0x90>
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	691b      	ldr	r3, [r3, #16]
 800c2f6:	e000      	b.n	800c2fa <pb_enc_uvarint+0x92>
 800c2f8:	4b07      	ldr	r3, [pc, #28]	; (800c318 <pb_enc_uvarint+0xb0>)
 800c2fa:	68fa      	ldr	r2, [r7, #12]
 800c2fc:	6113      	str	r3, [r2, #16]
 800c2fe:	2300      	movs	r3, #0
 800c300:	e005      	b.n	800c30e <pb_enc_uvarint+0xa6>
    
    return pb_encode_varint(stream, value);
 800c302:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c306:	68f8      	ldr	r0, [r7, #12]
 800c308:	f7ff fd2f 	bl	800bd6a <pb_encode_varint>
 800c30c:	4603      	mov	r3, r0
}
 800c30e:	4618      	mov	r0, r3
 800c310:	371c      	adds	r7, #28
 800c312:	46bd      	mov	sp, r7
 800c314:	bd90      	pop	{r4, r7, pc}
 800c316:	bf00      	nop
 800c318:	080110d4 	.word	0x080110d4

0800c31c <pb_enc_svarint>:

static bool checkreturn pb_enc_svarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 800c31c:	b590      	push	{r4, r7, lr}
 800c31e:	b087      	sub	sp, #28
 800c320:	af00      	add	r7, sp, #0
 800c322:	60f8      	str	r0, [r7, #12]
 800c324:	60b9      	str	r1, [r7, #8]
 800c326:	607a      	str	r2, [r7, #4]
    pb_int64_t value = 0;
 800c328:	f04f 0300 	mov.w	r3, #0
 800c32c:	f04f 0400 	mov.w	r4, #0
 800c330:	e9c7 3404 	strd	r3, r4, [r7, #16]
    
    if (field->data_size == sizeof(int_least8_t))
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800c33a:	b29b      	uxth	r3, r3
 800c33c:	2b01      	cmp	r3, #1
 800c33e:	d108      	bne.n	800c352 <pb_enc_svarint+0x36>
        value = *(const int_least8_t*)src;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f993 3000 	ldrsb.w	r3, [r3]
 800c346:	b25b      	sxtb	r3, r3
 800c348:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800c34c:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800c350:	e033      	b.n	800c3ba <pb_enc_svarint+0x9e>
    else if (field->data_size == sizeof(int_least16_t))
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800c358:	b29b      	uxth	r3, r3
 800c35a:	2b02      	cmp	r3, #2
 800c35c:	d108      	bne.n	800c370 <pb_enc_svarint+0x54>
        value = *(const int_least16_t*)src;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c364:	b21b      	sxth	r3, r3
 800c366:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800c36a:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800c36e:	e024      	b.n	800c3ba <pb_enc_svarint+0x9e>
    else if (field->data_size == sizeof(int32_t))
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800c376:	b29b      	uxth	r3, r3
 800c378:	2b04      	cmp	r3, #4
 800c37a:	d106      	bne.n	800c38a <pb_enc_svarint+0x6e>
        value = *(const int32_t*)src;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800c384:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800c388:	e017      	b.n	800c3ba <pb_enc_svarint+0x9e>
    else if (field->data_size == sizeof(pb_int64_t))
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800c390:	b29b      	uxth	r3, r3
 800c392:	2b08      	cmp	r3, #8
 800c394:	d105      	bne.n	800c3a2 <pb_enc_svarint+0x86>
        value = *(const pb_int64_t*)src;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c39c:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800c3a0:	e00b      	b.n	800c3ba <pb_enc_svarint+0x9e>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	691b      	ldr	r3, [r3, #16]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d002      	beq.n	800c3b0 <pb_enc_svarint+0x94>
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	691b      	ldr	r3, [r3, #16]
 800c3ae:	e000      	b.n	800c3b2 <pb_enc_svarint+0x96>
 800c3b0:	4b07      	ldr	r3, [pc, #28]	; (800c3d0 <pb_enc_svarint+0xb4>)
 800c3b2:	68fa      	ldr	r2, [r7, #12]
 800c3b4:	6113      	str	r3, [r2, #16]
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	e005      	b.n	800c3c6 <pb_enc_svarint+0xaa>
    
    return pb_encode_svarint(stream, value);
 800c3ba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c3be:	68f8      	ldr	r0, [r7, #12]
 800c3c0:	f7ff fd26 	bl	800be10 <pb_encode_svarint>
 800c3c4:	4603      	mov	r3, r0
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	371c      	adds	r7, #28
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd90      	pop	{r4, r7, pc}
 800c3ce:	bf00      	nop
 800c3d0:	080110d4 	.word	0x080110d4

0800c3d4 <pb_enc_fixed64>:

static bool checkreturn pb_enc_fixed64(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b084      	sub	sp, #16
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	60f8      	str	r0, [r7, #12]
 800c3dc:	60b9      	str	r1, [r7, #8]
 800c3de:	607a      	str	r2, [r7, #4]
    PB_UNUSED(field);
#ifndef PB_WITHOUT_64BIT
    return pb_encode_fixed64(stream, src);
 800c3e0:	6879      	ldr	r1, [r7, #4]
 800c3e2:	68f8      	ldr	r0, [r7, #12]
 800c3e4:	f7ff fd62 	bl	800beac <pb_encode_fixed64>
 800c3e8:	4603      	mov	r3, r0
#else
    PB_UNUSED(src);
    PB_RETURN_ERROR(stream, "no 64bit support");
#endif
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3710      	adds	r7, #16
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}

0800c3f2 <pb_enc_fixed32>:

static bool checkreturn pb_enc_fixed32(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 800c3f2:	b580      	push	{r7, lr}
 800c3f4:	b084      	sub	sp, #16
 800c3f6:	af00      	add	r7, sp, #0
 800c3f8:	60f8      	str	r0, [r7, #12]
 800c3fa:	60b9      	str	r1, [r7, #8]
 800c3fc:	607a      	str	r2, [r7, #4]
    PB_UNUSED(field);
    return pb_encode_fixed32(stream, src);
 800c3fe:	6879      	ldr	r1, [r7, #4]
 800c400:	68f8      	ldr	r0, [r7, #12]
 800c402:	f7ff fd30 	bl	800be66 <pb_encode_fixed32>
 800c406:	4603      	mov	r3, r0
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3710      	adds	r7, #16
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}

0800c410 <pb_enc_bytes>:

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b086      	sub	sp, #24
 800c414:	af00      	add	r7, sp, #0
 800c416:	60f8      	str	r0, [r7, #12]
 800c418:	60b9      	str	r1, [r7, #8]
 800c41a:	607a      	str	r2, [r7, #4]
    const pb_bytes_array_t *bytes = NULL;
 800c41c:	2300      	movs	r3, #0
 800c41e:	617b      	str	r3, [r7, #20]

    bytes = (const pb_bytes_array_t*)src;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	617b      	str	r3, [r7, #20]
    
    if (src == NULL)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d106      	bne.n	800c438 <pb_enc_bytes+0x28>
    {
        /* Treat null pointer as an empty bytes field */
        return pb_encode_string(stream, NULL, 0);
 800c42a:	2200      	movs	r2, #0
 800c42c:	2100      	movs	r1, #0
 800c42e:	68f8      	ldr	r0, [r7, #12]
 800c430:	f7ff fe0e 	bl	800c050 <pb_encode_string>
 800c434:	4603      	mov	r3, r0
 800c436:	e023      	b.n	800c480 <pb_enc_bytes+0x70>
    }
    
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	789b      	ldrb	r3, [r3, #2]
 800c43c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c440:	2b00      	cmp	r3, #0
 800c442:	d114      	bne.n	800c46e <pb_enc_bytes+0x5e>
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	881b      	ldrh	r3, [r3, #0]
 800c448:	3302      	adds	r3, #2
 800c44a:	68ba      	ldr	r2, [r7, #8]
 800c44c:	f8b2 2007 	ldrh.w	r2, [r2, #7]
 800c450:	b292      	uxth	r2, r2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 800c452:	4293      	cmp	r3, r2
 800c454:	d90b      	bls.n	800c46e <pb_enc_bytes+0x5e>
    {
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	691b      	ldr	r3, [r3, #16]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d002      	beq.n	800c464 <pb_enc_bytes+0x54>
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	691b      	ldr	r3, [r3, #16]
 800c462:	e000      	b.n	800c466 <pb_enc_bytes+0x56>
 800c464:	4b08      	ldr	r3, [pc, #32]	; (800c488 <pb_enc_bytes+0x78>)
 800c466:	68fa      	ldr	r2, [r7, #12]
 800c468:	6113      	str	r3, [r2, #16]
 800c46a:	2300      	movs	r3, #0
 800c46c:	e008      	b.n	800c480 <pb_enc_bytes+0x70>
    }
    
    return pb_encode_string(stream, bytes->bytes, bytes->size);
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	1c99      	adds	r1, r3, #2
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	881b      	ldrh	r3, [r3, #0]
 800c476:	461a      	mov	r2, r3
 800c478:	68f8      	ldr	r0, [r7, #12]
 800c47a:	f7ff fde9 	bl	800c050 <pb_encode_string>
 800c47e:	4603      	mov	r3, r0
}
 800c480:	4618      	mov	r0, r3
 800c482:	3718      	adds	r7, #24
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}
 800c488:	080110e8 	.word	0x080110e8

0800c48c <pb_enc_string>:

static bool checkreturn pb_enc_string(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b088      	sub	sp, #32
 800c490:	af00      	add	r7, sp, #0
 800c492:	60f8      	str	r0, [r7, #12]
 800c494:	60b9      	str	r1, [r7, #8]
 800c496:	607a      	str	r2, [r7, #4]
    size_t size = 0;
 800c498:	2300      	movs	r3, #0
 800c49a:	61fb      	str	r3, [r7, #28]
    size_t max_size = field->data_size;
 800c49c:	68bb      	ldr	r3, [r7, #8]
 800c49e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800c4a2:	b29b      	uxth	r3, r3
 800c4a4:	61bb      	str	r3, [r7, #24]
    const char *p = (const char*)src;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	617b      	str	r3, [r7, #20]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	789b      	ldrb	r3, [r3, #2]
 800c4ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c4b2:	2b80      	cmp	r3, #128	; 0x80
 800c4b4:	d102      	bne.n	800c4bc <pb_enc_string+0x30>
        max_size = (size_t)-1;
 800c4b6:	f04f 33ff 	mov.w	r3, #4294967295
 800c4ba:	61bb      	str	r3, [r7, #24]

    if (src == NULL)
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d108      	bne.n	800c4d4 <pb_enc_string+0x48>
    {
        size = 0; /* Treat null pointer as an empty string */
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	61fb      	str	r3, [r7, #28]
 800c4c6:	e00d      	b.n	800c4e4 <pb_enc_string+0x58>
    else
    {
        /* strnlen() is not always available, so just use a loop */
        while (size < max_size && *p != '\0')
        {
            size++;
 800c4c8:	69fb      	ldr	r3, [r7, #28]
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	61fb      	str	r3, [r7, #28]
            p++;
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	3301      	adds	r3, #1
 800c4d2:	617b      	str	r3, [r7, #20]
        while (size < max_size && *p != '\0')
 800c4d4:	69fa      	ldr	r2, [r7, #28]
 800c4d6:	69bb      	ldr	r3, [r7, #24]
 800c4d8:	429a      	cmp	r2, r3
 800c4da:	d203      	bcs.n	800c4e4 <pb_enc_string+0x58>
 800c4dc:	697b      	ldr	r3, [r7, #20]
 800c4de:	781b      	ldrb	r3, [r3, #0]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d1f1      	bne.n	800c4c8 <pb_enc_string+0x3c>
        }
    }

    return pb_encode_string(stream, (const pb_byte_t*)src, size);
 800c4e4:	69fa      	ldr	r2, [r7, #28]
 800c4e6:	6879      	ldr	r1, [r7, #4]
 800c4e8:	68f8      	ldr	r0, [r7, #12]
 800c4ea:	f7ff fdb1 	bl	800c050 <pb_encode_string>
 800c4ee:	4603      	mov	r3, r0
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	3720      	adds	r7, #32
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}

0800c4f8 <pb_enc_submessage>:

static bool checkreturn pb_enc_submessage(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b084      	sub	sp, #16
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	60f8      	str	r0, [r7, #12]
 800c500:	60b9      	str	r1, [r7, #8]
 800c502:	607a      	str	r2, [r7, #4]
    if (field->ptr == NULL)
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	f8d3 300b 	ldr.w	r3, [r3, #11]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d10b      	bne.n	800c526 <pb_enc_submessage+0x2e>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	691b      	ldr	r3, [r3, #16]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d002      	beq.n	800c51c <pb_enc_submessage+0x24>
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	691b      	ldr	r3, [r3, #16]
 800c51a:	e000      	b.n	800c51e <pb_enc_submessage+0x26>
 800c51c:	4b08      	ldr	r3, [pc, #32]	; (800c540 <pb_enc_submessage+0x48>)
 800c51e:	68fa      	ldr	r2, [r7, #12]
 800c520:	6113      	str	r3, [r2, #16]
 800c522:	2300      	movs	r3, #0
 800c524:	e008      	b.n	800c538 <pb_enc_submessage+0x40>
    
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	f8d3 300b 	ldr.w	r3, [r3, #11]
 800c52c:	687a      	ldr	r2, [r7, #4]
 800c52e:	4619      	mov	r1, r3
 800c530:	68f8      	ldr	r0, [r7, #12]
 800c532:	f7ff fdad 	bl	800c090 <pb_encode_submessage>
 800c536:	4603      	mov	r3, r0
}
 800c538:	4618      	mov	r0, r3
 800c53a:	3710      	adds	r7, #16
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}
 800c540:	080110fc 	.word	0x080110fc

0800c544 <pb_enc_fixed_length_bytes>:

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b084      	sub	sp, #16
 800c548:	af00      	add	r7, sp, #0
 800c54a:	60f8      	str	r0, [r7, #12]
 800c54c:	60b9      	str	r1, [r7, #8]
 800c54e:	607a      	str	r2, [r7, #4]
    return pb_encode_string(stream, (const pb_byte_t*)src, field->data_size);
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800c556:	b29b      	uxth	r3, r3
 800c558:	461a      	mov	r2, r3
 800c55a:	6879      	ldr	r1, [r7, #4]
 800c55c:	68f8      	ldr	r0, [r7, #12]
 800c55e:	f7ff fd77 	bl	800c050 <pb_encode_string>
 800c562:	4603      	mov	r3, r0
}
 800c564:	4618      	mov	r0, r3
 800c566:	3710      	adds	r7, #16
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}

0800c56c <_platform_observer_node_exec_cb>:
 800c56c:	2a00      	cmp	r2, #0
 800c56e:	d057      	beq.n	800c620 <_platform_observer_node_exec_cb+0xb4>
 800c570:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c572:	6816      	ldr	r6, [r2, #0]
 800c574:	b085      	sub	sp, #20
 800c576:	2e00      	cmp	r6, #0
 800c578:	d058      	beq.n	800c62c <_platform_observer_node_exec_cb+0xc0>
 800c57a:	8995      	ldrh	r5, [r2, #12]
 800c57c:	b355      	cbz	r5, 800c5d4 <_platform_observer_node_exec_cb+0x68>
 800c57e:	89d3      	ldrh	r3, [r2, #14]
 800c580:	3b01      	subs	r3, #1
 800c582:	42ab      	cmp	r3, r5
 800c584:	f240 2c02 	movw	ip, #514	; 0x202
 800c588:	f240 2701 	movw	r7, #513	; 0x201
 800c58c:	bf0f      	iteee	eq
 800c58e:	f44f 7e01 	moveq.w	lr, #516	; 0x204
 800c592:	f04f 0e04 	movne.w	lr, #4
 800c596:	f04f 0c02 	movne.w	ip, #2
 800c59a:	2701      	movne	r7, #1
 800c59c:	4614      	mov	r4, r2
 800c59e:	460b      	mov	r3, r1
 800c5a0:	bb10      	cbnz	r0, 800c5e8 <_platform_observer_node_exec_cb+0x7c>
 800c5a2:	6892      	ldr	r2, [r2, #8]
 800c5a4:	07d1      	lsls	r1, r2, #31
 800c5a6:	d510      	bpl.n	800c5ca <_platform_observer_node_exec_cb+0x5e>
 800c5a8:	881a      	ldrh	r2, [r3, #0]
 800c5aa:	f8b3 c002 	ldrh.w	ip, [r3, #2]
 800c5ae:	695b      	ldr	r3, [r3, #20]
 800c5b0:	f8ad 5000 	strh.w	r5, [sp]
 800c5b4:	9002      	str	r0, [sp, #8]
 800c5b6:	f8ad 2002 	strh.w	r2, [sp, #2]
 800c5ba:	4639      	mov	r1, r7
 800c5bc:	f8ad c004 	strh.w	ip, [sp, #4]
 800c5c0:	9303      	str	r3, [sp, #12]
 800c5c2:	466a      	mov	r2, sp
 800c5c4:	6860      	ldr	r0, [r4, #4]
 800c5c6:	47b0      	blx	r6
 800c5c8:	89a5      	ldrh	r5, [r4, #12]
 800c5ca:	1c6b      	adds	r3, r5, #1
 800c5cc:	81a3      	strh	r3, [r4, #12]
 800c5ce:	2000      	movs	r0, #0
 800c5d0:	b005      	add	sp, #20
 800c5d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5d4:	f44f 7e82 	mov.w	lr, #260	; 0x104
 800c5d8:	f44f 7c81 	mov.w	ip, #258	; 0x102
 800c5dc:	f240 1701 	movw	r7, #257	; 0x101
 800c5e0:	4614      	mov	r4, r2
 800c5e2:	460b      	mov	r3, r1
 800c5e4:	2800      	cmp	r0, #0
 800c5e6:	d0dc      	beq.n	800c5a2 <_platform_observer_node_exec_cb+0x36>
 800c5e8:	2801      	cmp	r0, #1
 800c5ea:	d01b      	beq.n	800c624 <_platform_observer_node_exec_cb+0xb8>
 800c5ec:	2802      	cmp	r0, #2
 800c5ee:	d020      	beq.n	800c632 <_platform_observer_node_exec_cb+0xc6>
 800c5f0:	2803      	cmp	r0, #3
 800c5f2:	d1ec      	bne.n	800c5ce <_platform_observer_node_exec_cb+0x62>
 800c5f4:	6893      	ldr	r3, [r2, #8]
 800c5f6:	075b      	lsls	r3, r3, #29
 800c5f8:	d5e7      	bpl.n	800c5ca <_platform_observer_node_exec_cb+0x5e>
 800c5fa:	6913      	ldr	r3, [r2, #16]
 800c5fc:	f8ad 5000 	strh.w	r5, [sp]
 800c600:	885a      	ldrh	r2, [r3, #2]
 800c602:	f8ad 2004 	strh.w	r2, [sp, #4]
 800c606:	881a      	ldrh	r2, [r3, #0]
 800c608:	f8ad 2002 	strh.w	r2, [sp, #2]
 800c60c:	695b      	ldr	r3, [r3, #20]
 800c60e:	9303      	str	r3, [sp, #12]
 800c610:	2300      	movs	r3, #0
 800c612:	4671      	mov	r1, lr
 800c614:	9302      	str	r3, [sp, #8]
 800c616:	466a      	mov	r2, sp
 800c618:	6860      	ldr	r0, [r4, #4]
 800c61a:	47b0      	blx	r6
 800c61c:	89a5      	ldrh	r5, [r4, #12]
 800c61e:	e7d4      	b.n	800c5ca <_platform_observer_node_exec_cb+0x5e>
 800c620:	2001      	movs	r0, #1
 800c622:	4770      	bx	lr
 800c624:	2000      	movs	r0, #0
 800c626:	6121      	str	r1, [r4, #16]
 800c628:	8190      	strh	r0, [r2, #12]
 800c62a:	e7d1      	b.n	800c5d0 <_platform_observer_node_exec_cb+0x64>
 800c62c:	2001      	movs	r0, #1
 800c62e:	b005      	add	sp, #20
 800c630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c632:	6892      	ldr	r2, [r2, #8]
 800c634:	6121      	str	r1, [r4, #16]
 800c636:	0792      	lsls	r2, r2, #30
 800c638:	d5c9      	bpl.n	800c5ce <_platform_observer_node_exec_cb+0x62>
 800c63a:	881a      	ldrh	r2, [r3, #0]
 800c63c:	695b      	ldr	r3, [r3, #20]
 800c63e:	8849      	ldrh	r1, [r1, #2]
 800c640:	6860      	ldr	r0, [r4, #4]
 800c642:	f8ad 1004 	strh.w	r1, [sp, #4]
 800c646:	2400      	movs	r4, #0
 800c648:	f8ad 2002 	strh.w	r2, [sp, #2]
 800c64c:	f8ad 5000 	strh.w	r5, [sp]
 800c650:	4661      	mov	r1, ip
 800c652:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800c656:	466a      	mov	r2, sp
 800c658:	47b0      	blx	r6
 800c65a:	4620      	mov	r0, r4
 800c65c:	e7b8      	b.n	800c5d0 <_platform_observer_node_exec_cb+0x64>
 800c65e:	bf00      	nop

0800c660 <_ai_platform_get_io_buffers_info>:
 800c660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c664:	2400      	movs	r4, #0
 800c666:	b083      	sub	sp, #12
 800c668:	4606      	mov	r6, r0
 800c66a:	4688      	mov	r8, r1
 800c66c:	46a3      	mov	fp, r4
 800c66e:	f04f 0a18 	mov.w	sl, #24
 800c672:	f04f 0901 	mov.w	r9, #1
 800c676:	b2a0      	uxth	r0, r4
 800c678:	b936      	cbnz	r6, 800c688 <_ai_platform_get_io_buffers_info+0x28>
 800c67a:	2800      	cmp	r0, #0
 800c67c:	d03b      	beq.n	800c6f6 <_ai_platform_get_io_buffers_info+0x96>
 800c67e:	68b3      	ldr	r3, [r6, #8]
 800c680:	685b      	ldr	r3, [r3, #4]
 800c682:	f8c8 3000 	str.w	r3, [r8]
 800c686:	e036      	b.n	800c6f6 <_ai_platform_get_io_buffers_info+0x96>
 800c688:	8833      	ldrh	r3, [r6, #0]
 800c68a:	429c      	cmp	r4, r3
 800c68c:	d2f5      	bcs.n	800c67a <_ai_platform_get_io_buffers_info+0x1a>
 800c68e:	6873      	ldr	r3, [r6, #4]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d0f2      	beq.n	800c67a <_ai_platform_get_io_buffers_info+0x1a>
 800c694:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 800c698:	2d00      	cmp	r5, #0
 800c69a:	d0ee      	beq.n	800c67a <_ai_platform_get_io_buffers_info+0x1a>
 800c69c:	68b3      	ldr	r3, [r6, #8]
 800c69e:	69aa      	ldr	r2, [r5, #24]
 800c6a0:	6859      	ldr	r1, [r3, #4]
 800c6a2:	6810      	ldr	r0, [r2, #0]
 800c6a4:	689f      	ldr	r7, [r3, #8]
 800c6a6:	9101      	str	r1, [sp, #4]
 800c6a8:	f002 fde8 	bl	800f27c <ai_array_to_buffer_fmt>
 800c6ac:	9901      	ldr	r1, [sp, #4]
 800c6ae:	fb0a f304 	mul.w	r3, sl, r4
 800c6b2:	18ca      	adds	r2, r1, r3
 800c6b4:	50c8      	str	r0, [r1, r3]
 800c6b6:	f8a2 9004 	strh.w	r9, [r2, #4]
 800c6ba:	68eb      	ldr	r3, [r5, #12]
 800c6bc:	68db      	ldr	r3, [r3, #12]
 800c6be:	80d3      	strh	r3, [r2, #6]
 800c6c0:	68eb      	ldr	r3, [r5, #12]
 800c6c2:	689b      	ldr	r3, [r3, #8]
 800c6c4:	8113      	strh	r3, [r2, #8]
 800c6c6:	68eb      	ldr	r3, [r5, #12]
 800c6c8:	685b      	ldr	r3, [r3, #4]
 800c6ca:	60d3      	str	r3, [r2, #12]
 800c6cc:	69ab      	ldr	r3, [r5, #24]
 800c6ce:	00e1      	lsls	r1, r4, #3
 800c6d0:	689b      	ldr	r3, [r3, #8]
 800c6d2:	6113      	str	r3, [r2, #16]
 800c6d4:	1878      	adds	r0, r7, r1
 800c6d6:	b150      	cbz	r0, 800c6ee <_ai_platform_get_io_buffers_info+0x8e>
 800c6d8:	f847 b034 	str.w	fp, [r7, r4, lsl #3]
 800c6dc:	682b      	ldr	r3, [r5, #0]
 800c6de:	6043      	str	r3, [r0, #4]
 800c6e0:	b11b      	cbz	r3, 800c6ea <_ai_platform_get_io_buffers_info+0x8a>
 800c6e2:	885b      	ldrh	r3, [r3, #2]
 800c6e4:	3300      	adds	r3, #0
 800c6e6:	bf18      	it	ne
 800c6e8:	2301      	movne	r3, #1
 800c6ea:	507b      	str	r3, [r7, r1]
 800c6ec:	b903      	cbnz	r3, 800c6f0 <_ai_platform_get_io_buffers_info+0x90>
 800c6ee:	2000      	movs	r0, #0
 800c6f0:	6150      	str	r0, [r2, #20]
 800c6f2:	3401      	adds	r4, #1
 800c6f4:	e7bf      	b.n	800c676 <_ai_platform_get_io_buffers_info+0x16>
 800c6f6:	b003      	add	sp, #12
 800c6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c6fc <_platform_network_state_setup.isra.1>:
 800c6fc:	b430      	push	{r4, r5}
 800c6fe:	68dd      	ldr	r5, [r3, #12]
 800c700:	695c      	ldr	r4, [r3, #20]
 800c702:	68ed      	ldr	r5, [r5, #12]
 800c704:	68e4      	ldr	r4, [r4, #12]
 800c706:	fb04 f405 	mul.w	r4, r4, r5
 800c70a:	6084      	str	r4, [r0, #8]
 800c70c:	8809      	ldrh	r1, [r1, #0]
 800c70e:	fb04 f401 	mul.w	r4, r4, r1
 800c712:	60c4      	str	r4, [r0, #12]
 800c714:	6811      	ldr	r1, [r2, #0]
 800c716:	6041      	str	r1, [r0, #4]
 800c718:	6812      	ldr	r2, [r2, #0]
 800c71a:	4414      	add	r4, r2
 800c71c:	6004      	str	r4, [r0, #0]
 800c71e:	699a      	ldr	r2, [r3, #24]
 800c720:	6814      	ldr	r4, [r2, #0]
 800c722:	00a4      	lsls	r4, r4, #2
 800c724:	d407      	bmi.n	800c736 <_platform_network_state_setup.isra.1+0x3a>
 800c726:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 800c72a:	1b64      	subs	r4, r4, r5
 800c72c:	4421      	add	r1, r4
 800c72e:	6091      	str	r1, [r2, #8]
 800c730:	699b      	ldr	r3, [r3, #24]
 800c732:	6842      	ldr	r2, [r0, #4]
 800c734:	60da      	str	r2, [r3, #12]
 800c736:	bc30      	pop	{r4, r5}
 800c738:	4770      	bx	lr
	...

0800c73c <ai_platform_runtime_get_revision>:
 800c73c:	490a      	ldr	r1, [pc, #40]	; (800c768 <ai_platform_runtime_get_revision+0x2c>)
 800c73e:	4a0b      	ldr	r2, [pc, #44]	; (800c76c <ai_platform_runtime_get_revision+0x30>)
 800c740:	680b      	ldr	r3, [r1, #0]
 800c742:	2001      	movs	r0, #1
 800c744:	f023 0301 	bic.w	r3, r3, #1
 800c748:	600b      	str	r3, [r1, #0]
 800c74a:	4613      	mov	r3, r2
 800c74c:	6010      	str	r0, [r2, #0]
 800c74e:	681a      	ldr	r2, [r3, #0]
 800c750:	2a00      	cmp	r2, #0
 800c752:	d1fc      	bne.n	800c74e <ai_platform_runtime_get_revision+0x12>
 800c754:	4b06      	ldr	r3, [pc, #24]	; (800c770 <ai_platform_runtime_get_revision+0x34>)
 800c756:	4a07      	ldr	r2, [pc, #28]	; (800c774 <ai_platform_runtime_get_revision+0x38>)
 800c758:	601a      	str	r2, [r3, #0]
 800c75a:	681a      	ldr	r2, [r3, #0]
 800c75c:	4b06      	ldr	r3, [pc, #24]	; (800c778 <ai_platform_runtime_get_revision+0x3c>)
 800c75e:	429a      	cmp	r2, r3
 800c760:	d000      	beq.n	800c764 <ai_platform_runtime_get_revision+0x28>
 800c762:	e7fe      	b.n	800c762 <ai_platform_runtime_get_revision+0x26>
 800c764:	4805      	ldr	r0, [pc, #20]	; (800c77c <ai_platform_runtime_get_revision+0x40>)
 800c766:	4770      	bx	lr
 800c768:	e0002000 	.word	0xe0002000
 800c76c:	40023008 	.word	0x40023008
 800c770:	40023000 	.word	0x40023000
 800c774:	f407a5c2 	.word	0xf407a5c2
 800c778:	b5e8b5cd 	.word	0xb5e8b5cd
 800c77c:	0801b910 	.word	0x0801b910

0800c780 <ai_platform_runtime_get_version>:
 800c780:	4913      	ldr	r1, [pc, #76]	; (800c7d0 <ai_platform_runtime_get_version+0x50>)
 800c782:	4a14      	ldr	r2, [pc, #80]	; (800c7d4 <ai_platform_runtime_get_version+0x54>)
 800c784:	680b      	ldr	r3, [r1, #0]
 800c786:	2001      	movs	r0, #1
 800c788:	f023 0301 	bic.w	r3, r3, #1
 800c78c:	600b      	str	r3, [r1, #0]
 800c78e:	b082      	sub	sp, #8
 800c790:	4613      	mov	r3, r2
 800c792:	6010      	str	r0, [r2, #0]
 800c794:	6818      	ldr	r0, [r3, #0]
 800c796:	2800      	cmp	r0, #0
 800c798:	d1fc      	bne.n	800c794 <ai_platform_runtime_get_version+0x14>
 800c79a:	4b0f      	ldr	r3, [pc, #60]	; (800c7d8 <ai_platform_runtime_get_version+0x58>)
 800c79c:	4a0f      	ldr	r2, [pc, #60]	; (800c7dc <ai_platform_runtime_get_version+0x5c>)
 800c79e:	601a      	str	r2, [r3, #0]
 800c7a0:	681a      	ldr	r2, [r3, #0]
 800c7a2:	4b0f      	ldr	r3, [pc, #60]	; (800c7e0 <ai_platform_runtime_get_version+0x60>)
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d000      	beq.n	800c7aa <ai_platform_runtime_get_version+0x2a>
 800c7a8:	e7fe      	b.n	800c7a8 <ai_platform_runtime_get_version+0x28>
 800c7aa:	4b0e      	ldr	r3, [pc, #56]	; (800c7e4 <ai_platform_runtime_get_version+0x64>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	b2da      	uxtb	r2, r3
 800c7b0:	f362 0007 	bfi	r0, r2, #0, #8
 800c7b4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800c7b8:	f362 200f 	bfi	r0, r2, #8, #8
 800c7bc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800c7c0:	f362 4017 	bfi	r0, r2, #16, #8
 800c7c4:	0e1b      	lsrs	r3, r3, #24
 800c7c6:	f363 601f 	bfi	r0, r3, #24, #8
 800c7ca:	b002      	add	sp, #8
 800c7cc:	4770      	bx	lr
 800c7ce:	bf00      	nop
 800c7d0:	e0002000 	.word	0xe0002000
 800c7d4:	40023008 	.word	0x40023008
 800c7d8:	40023000 	.word	0x40023000
 800c7dc:	f407a5c2 	.word	0xf407a5c2
 800c7e0:	b5e8b5cd 	.word	0xb5e8b5cd
 800c7e4:	0801b914 	.word	0x0801b914

0800c7e8 <ai_platform_api_get_version>:
 800c7e8:	4913      	ldr	r1, [pc, #76]	; (800c838 <ai_platform_api_get_version+0x50>)
 800c7ea:	4a14      	ldr	r2, [pc, #80]	; (800c83c <ai_platform_api_get_version+0x54>)
 800c7ec:	680b      	ldr	r3, [r1, #0]
 800c7ee:	2001      	movs	r0, #1
 800c7f0:	f023 0301 	bic.w	r3, r3, #1
 800c7f4:	600b      	str	r3, [r1, #0]
 800c7f6:	b082      	sub	sp, #8
 800c7f8:	4613      	mov	r3, r2
 800c7fa:	6010      	str	r0, [r2, #0]
 800c7fc:	6818      	ldr	r0, [r3, #0]
 800c7fe:	2800      	cmp	r0, #0
 800c800:	d1fc      	bne.n	800c7fc <ai_platform_api_get_version+0x14>
 800c802:	4b0f      	ldr	r3, [pc, #60]	; (800c840 <ai_platform_api_get_version+0x58>)
 800c804:	4a0f      	ldr	r2, [pc, #60]	; (800c844 <ai_platform_api_get_version+0x5c>)
 800c806:	601a      	str	r2, [r3, #0]
 800c808:	681a      	ldr	r2, [r3, #0]
 800c80a:	4b0f      	ldr	r3, [pc, #60]	; (800c848 <ai_platform_api_get_version+0x60>)
 800c80c:	429a      	cmp	r2, r3
 800c80e:	d000      	beq.n	800c812 <ai_platform_api_get_version+0x2a>
 800c810:	e7fe      	b.n	800c810 <ai_platform_api_get_version+0x28>
 800c812:	4b0e      	ldr	r3, [pc, #56]	; (800c84c <ai_platform_api_get_version+0x64>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	b2da      	uxtb	r2, r3
 800c818:	f362 0007 	bfi	r0, r2, #0, #8
 800c81c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800c820:	f362 200f 	bfi	r0, r2, #8, #8
 800c824:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800c828:	f362 4017 	bfi	r0, r2, #16, #8
 800c82c:	0e1b      	lsrs	r3, r3, #24
 800c82e:	f363 601f 	bfi	r0, r3, #24, #8
 800c832:	b002      	add	sp, #8
 800c834:	4770      	bx	lr
 800c836:	bf00      	nop
 800c838:	e0002000 	.word	0xe0002000
 800c83c:	40023008 	.word	0x40023008
 800c840:	40023000 	.word	0x40023000
 800c844:	f407a5c2 	.word	0xf407a5c2
 800c848:	b5e8b5cd 	.word	0xb5e8b5cd
 800c84c:	0801b918 	.word	0x0801b918

0800c850 <ai_platform_interface_api_get_version>:
 800c850:	4913      	ldr	r1, [pc, #76]	; (800c8a0 <ai_platform_interface_api_get_version+0x50>)
 800c852:	4a14      	ldr	r2, [pc, #80]	; (800c8a4 <ai_platform_interface_api_get_version+0x54>)
 800c854:	680b      	ldr	r3, [r1, #0]
 800c856:	2001      	movs	r0, #1
 800c858:	f023 0301 	bic.w	r3, r3, #1
 800c85c:	600b      	str	r3, [r1, #0]
 800c85e:	b082      	sub	sp, #8
 800c860:	4613      	mov	r3, r2
 800c862:	6010      	str	r0, [r2, #0]
 800c864:	6818      	ldr	r0, [r3, #0]
 800c866:	2800      	cmp	r0, #0
 800c868:	d1fc      	bne.n	800c864 <ai_platform_interface_api_get_version+0x14>
 800c86a:	4b0f      	ldr	r3, [pc, #60]	; (800c8a8 <ai_platform_interface_api_get_version+0x58>)
 800c86c:	4a0f      	ldr	r2, [pc, #60]	; (800c8ac <ai_platform_interface_api_get_version+0x5c>)
 800c86e:	601a      	str	r2, [r3, #0]
 800c870:	681a      	ldr	r2, [r3, #0]
 800c872:	4b0f      	ldr	r3, [pc, #60]	; (800c8b0 <ai_platform_interface_api_get_version+0x60>)
 800c874:	429a      	cmp	r2, r3
 800c876:	d000      	beq.n	800c87a <ai_platform_interface_api_get_version+0x2a>
 800c878:	e7fe      	b.n	800c878 <ai_platform_interface_api_get_version+0x28>
 800c87a:	4b0e      	ldr	r3, [pc, #56]	; (800c8b4 <ai_platform_interface_api_get_version+0x64>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	b2da      	uxtb	r2, r3
 800c880:	f362 0007 	bfi	r0, r2, #0, #8
 800c884:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800c888:	f362 200f 	bfi	r0, r2, #8, #8
 800c88c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800c890:	f362 4017 	bfi	r0, r2, #16, #8
 800c894:	0e1b      	lsrs	r3, r3, #24
 800c896:	f363 601f 	bfi	r0, r3, #24, #8
 800c89a:	b002      	add	sp, #8
 800c89c:	4770      	bx	lr
 800c89e:	bf00      	nop
 800c8a0:	e0002000 	.word	0xe0002000
 800c8a4:	40023008 	.word	0x40023008
 800c8a8:	40023000 	.word	0x40023000
 800c8ac:	f407a5c2 	.word	0xf407a5c2
 800c8b0:	b5e8b5cd 	.word	0xb5e8b5cd
 800c8b4:	0801b91c 	.word	0x0801b91c

0800c8b8 <ai_platform_context_acquire>:
 800c8b8:	b410      	push	{r4}
 800c8ba:	b120      	cbz	r0, 800c8c6 <ai_platform_context_acquire+0xe>
 800c8bc:	4b0d      	ldr	r3, [pc, #52]	; (800c8f4 <ai_platform_context_acquire+0x3c>)
 800c8be:	6802      	ldr	r2, [r0, #0]
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	bf18      	it	ne
 800c8c4:	2000      	movne	r0, #0
 800c8c6:	490c      	ldr	r1, [pc, #48]	; (800c8f8 <ai_platform_context_acquire+0x40>)
 800c8c8:	4a0c      	ldr	r2, [pc, #48]	; (800c8fc <ai_platform_context_acquire+0x44>)
 800c8ca:	680b      	ldr	r3, [r1, #0]
 800c8cc:	2401      	movs	r4, #1
 800c8ce:	f023 0301 	bic.w	r3, r3, #1
 800c8d2:	600b      	str	r3, [r1, #0]
 800c8d4:	4613      	mov	r3, r2
 800c8d6:	6014      	str	r4, [r2, #0]
 800c8d8:	681a      	ldr	r2, [r3, #0]
 800c8da:	2a00      	cmp	r2, #0
 800c8dc:	d1fc      	bne.n	800c8d8 <ai_platform_context_acquire+0x20>
 800c8de:	4b08      	ldr	r3, [pc, #32]	; (800c900 <ai_platform_context_acquire+0x48>)
 800c8e0:	4a08      	ldr	r2, [pc, #32]	; (800c904 <ai_platform_context_acquire+0x4c>)
 800c8e2:	601a      	str	r2, [r3, #0]
 800c8e4:	681a      	ldr	r2, [r3, #0]
 800c8e6:	4b08      	ldr	r3, [pc, #32]	; (800c908 <ai_platform_context_acquire+0x50>)
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	d000      	beq.n	800c8ee <ai_platform_context_acquire+0x36>
 800c8ec:	e7fe      	b.n	800c8ec <ai_platform_context_acquire+0x34>
 800c8ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8f2:	4770      	bx	lr
 800c8f4:	a1c00100 	.word	0xa1c00100
 800c8f8:	e0002000 	.word	0xe0002000
 800c8fc:	40023008 	.word	0x40023008
 800c900:	40023000 	.word	0x40023000
 800c904:	f407a5c2 	.word	0xf407a5c2
 800c908:	b5e8b5cd 	.word	0xb5e8b5cd

0800c90c <ai_platform_network_get_error>:
 800c90c:	b410      	push	{r4}
 800c90e:	b120      	cbz	r0, 800c91a <ai_platform_network_get_error+0xe>
 800c910:	4b11      	ldr	r3, [pc, #68]	; (800c958 <ai_platform_network_get_error+0x4c>)
 800c912:	6802      	ldr	r2, [r0, #0]
 800c914:	429a      	cmp	r2, r3
 800c916:	bf18      	it	ne
 800c918:	2000      	movne	r0, #0
 800c91a:	4910      	ldr	r1, [pc, #64]	; (800c95c <ai_platform_network_get_error+0x50>)
 800c91c:	4a10      	ldr	r2, [pc, #64]	; (800c960 <ai_platform_network_get_error+0x54>)
 800c91e:	680b      	ldr	r3, [r1, #0]
 800c920:	2401      	movs	r4, #1
 800c922:	f023 0301 	bic.w	r3, r3, #1
 800c926:	600b      	str	r3, [r1, #0]
 800c928:	4613      	mov	r3, r2
 800c92a:	6014      	str	r4, [r2, #0]
 800c92c:	681a      	ldr	r2, [r3, #0]
 800c92e:	2a00      	cmp	r2, #0
 800c930:	d1fc      	bne.n	800c92c <ai_platform_network_get_error+0x20>
 800c932:	4b0c      	ldr	r3, [pc, #48]	; (800c964 <ai_platform_network_get_error+0x58>)
 800c934:	4a0c      	ldr	r2, [pc, #48]	; (800c968 <ai_platform_network_get_error+0x5c>)
 800c936:	601a      	str	r2, [r3, #0]
 800c938:	681a      	ldr	r2, [r3, #0]
 800c93a:	4b0c      	ldr	r3, [pc, #48]	; (800c96c <ai_platform_network_get_error+0x60>)
 800c93c:	429a      	cmp	r2, r3
 800c93e:	d000      	beq.n	800c942 <ai_platform_network_get_error+0x36>
 800c940:	e7fe      	b.n	800c940 <ai_platform_network_get_error+0x34>
 800c942:	b120      	cbz	r0, 800c94e <ai_platform_network_get_error+0x42>
 800c944:	3010      	adds	r0, #16
 800c946:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c94a:	f000 bce9 	b.w	800d320 <core_get_error>
 800c94e:	f241 0010 	movw	r0, #4112	; 0x1010
 800c952:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c956:	4770      	bx	lr
 800c958:	a1c00100 	.word	0xa1c00100
 800c95c:	e0002000 	.word	0xe0002000
 800c960:	40023008 	.word	0x40023008
 800c964:	40023000 	.word	0x40023000
 800c968:	f407a5c2 	.word	0xf407a5c2
 800c96c:	b5e8b5cd 	.word	0xb5e8b5cd

0800c970 <ai_platform_api_get_network_report>:
 800c970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c972:	460e      	mov	r6, r1
 800c974:	4604      	mov	r4, r0
 800c976:	b120      	cbz	r0, 800c982 <ai_platform_api_get_network_report+0x12>
 800c978:	4b6b      	ldr	r3, [pc, #428]	; (800cb28 <ai_platform_api_get_network_report+0x1b8>)
 800c97a:	6802      	ldr	r2, [r0, #0]
 800c97c:	429a      	cmp	r2, r3
 800c97e:	bf18      	it	ne
 800c980:	2400      	movne	r4, #0
 800c982:	496a      	ldr	r1, [pc, #424]	; (800cb2c <ai_platform_api_get_network_report+0x1bc>)
 800c984:	4a6a      	ldr	r2, [pc, #424]	; (800cb30 <ai_platform_api_get_network_report+0x1c0>)
 800c986:	680b      	ldr	r3, [r1, #0]
 800c988:	2001      	movs	r0, #1
 800c98a:	f023 0301 	bic.w	r3, r3, #1
 800c98e:	600b      	str	r3, [r1, #0]
 800c990:	4611      	mov	r1, r2
 800c992:	6010      	str	r0, [r2, #0]
 800c994:	680b      	ldr	r3, [r1, #0]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d1fc      	bne.n	800c994 <ai_platform_api_get_network_report+0x24>
 800c99a:	4a66      	ldr	r2, [pc, #408]	; (800cb34 <ai_platform_api_get_network_report+0x1c4>)
 800c99c:	4966      	ldr	r1, [pc, #408]	; (800cb38 <ai_platform_api_get_network_report+0x1c8>)
 800c99e:	6011      	str	r1, [r2, #0]
 800c9a0:	6811      	ldr	r1, [r2, #0]
 800c9a2:	4a66      	ldr	r2, [pc, #408]	; (800cb3c <ai_platform_api_get_network_report+0x1cc>)
 800c9a4:	4291      	cmp	r1, r2
 800c9a6:	d000      	beq.n	800c9aa <ai_platform_api_get_network_report+0x3a>
 800c9a8:	e7fe      	b.n	800c9a8 <ai_platform_api_get_network_report+0x38>
 800c9aa:	2c00      	cmp	r4, #0
 800c9ac:	d061      	beq.n	800ca72 <ai_platform_api_get_network_report+0x102>
 800c9ae:	2e00      	cmp	r6, #0
 800c9b0:	d061      	beq.n	800ca76 <ai_platform_api_get_network_report+0x106>
 800c9b2:	66f3      	str	r3, [r6, #108]	; 0x6c
 800c9b4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800c9b6:	2a00      	cmp	r2, #0
 800c9b8:	d055      	beq.n	800ca66 <ai_platform_api_get_network_report+0xf6>
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	66f3      	str	r3, [r6, #108]	; 0x6c
 800c9be:	68d3      	ldr	r3, [r2, #12]
 800c9c0:	429a      	cmp	r2, r3
 800c9c2:	d00c      	beq.n	800c9de <ai_platform_api_get_network_report+0x6e>
 800c9c4:	b15b      	cbz	r3, 800c9de <ai_platform_api_get_network_report+0x6e>
 800c9c6:	2202      	movs	r2, #2
 800c9c8:	e003      	b.n	800c9d2 <ai_platform_api_get_network_report+0x62>
 800c9ca:	1c50      	adds	r0, r2, #1
 800c9cc:	460b      	mov	r3, r1
 800c9ce:	b121      	cbz	r1, 800c9da <ai_platform_api_get_network_report+0x6a>
 800c9d0:	4602      	mov	r2, r0
 800c9d2:	66f2      	str	r2, [r6, #108]	; 0x6c
 800c9d4:	68d9      	ldr	r1, [r3, #12]
 800c9d6:	4299      	cmp	r1, r3
 800c9d8:	d1f7      	bne.n	800c9ca <ai_platform_api_get_network_report+0x5a>
 800c9da:	2a00      	cmp	r2, #0
 800c9dc:	d043      	beq.n	800ca66 <ai_platform_api_get_network_report+0xf6>
 800c9de:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 800c9e2:	b100      	cbz	r0, 800c9e6 <ai_platform_api_get_network_report+0x76>
 800c9e4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800c9e6:	f106 0134 	add.w	r1, r6, #52	; 0x34
 800c9ea:	f7ff fe39 	bl	800c660 <_ai_platform_get_io_buffers_info>
 800c9ee:	4605      	mov	r5, r0
 800c9f0:	8630      	strh	r0, [r6, #48]	; 0x30
 800c9f2:	2800      	cmp	r0, #0
 800c9f4:	d05e      	beq.n	800cab4 <ai_platform_api_get_network_report+0x144>
 800c9f6:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800c9fa:	2b01      	cmp	r3, #1
 800c9fc:	bf8a      	itet	hi
 800c9fe:	6ce0      	ldrhi	r0, [r4, #76]	; 0x4c
 800ca00:	2000      	movls	r0, #0
 800ca02:	300c      	addhi	r0, #12
 800ca04:	f106 0138 	add.w	r1, r6, #56	; 0x38
 800ca08:	f7ff fe2a 	bl	800c660 <_ai_platform_get_io_buffers_info>
 800ca0c:	4605      	mov	r5, r0
 800ca0e:	8670      	strh	r0, [r6, #50]	; 0x32
 800ca10:	2800      	cmp	r0, #0
 800ca12:	d047      	beq.n	800caa4 <ai_platform_api_get_network_report+0x134>
 800ca14:	6863      	ldr	r3, [r4, #4]
 800ca16:	6733      	str	r3, [r6, #112]	; 0x70
 800ca18:	f104 0730 	add.w	r7, r4, #48	; 0x30
 800ca1c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ca1e:	f106 053c 	add.w	r5, r6, #60	; 0x3c
 800ca22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ca24:	e897 0003 	ldmia.w	r7, {r0, r1}
 800ca28:	e885 0003 	stmia.w	r5, {r0, r1}
 800ca2c:	3418      	adds	r4, #24
 800ca2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ca30:	f106 0554 	add.w	r5, r6, #84	; 0x54
 800ca34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ca36:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ca3a:	e885 0003 	stmia.w	r5, {r0, r1}
 800ca3e:	4a3b      	ldr	r2, [pc, #236]	; (800cb2c <ai_platform_api_get_network_report+0x1bc>)
 800ca40:	493b      	ldr	r1, [pc, #236]	; (800cb30 <ai_platform_api_get_network_report+0x1c0>)
 800ca42:	6813      	ldr	r3, [r2, #0]
 800ca44:	2001      	movs	r0, #1
 800ca46:	f023 0301 	bic.w	r3, r3, #1
 800ca4a:	6013      	str	r3, [r2, #0]
 800ca4c:	460a      	mov	r2, r1
 800ca4e:	6008      	str	r0, [r1, #0]
 800ca50:	6813      	ldr	r3, [r2, #0]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d1fc      	bne.n	800ca50 <ai_platform_api_get_network_report+0xe0>
 800ca56:	4b37      	ldr	r3, [pc, #220]	; (800cb34 <ai_platform_api_get_network_report+0x1c4>)
 800ca58:	4937      	ldr	r1, [pc, #220]	; (800cb38 <ai_platform_api_get_network_report+0x1c8>)
 800ca5a:	6019      	str	r1, [r3, #0]
 800ca5c:	6819      	ldr	r1, [r3, #0]
 800ca5e:	4b37      	ldr	r3, [pc, #220]	; (800cb3c <ai_platform_api_get_network_report+0x1cc>)
 800ca60:	4299      	cmp	r1, r3
 800ca62:	d00a      	beq.n	800ca7a <ai_platform_api_get_network_report+0x10a>
 800ca64:	e7fe      	b.n	800ca64 <ai_platform_api_get_network_report+0xf4>
 800ca66:	f104 0010 	add.w	r0, r4, #16
 800ca6a:	2218      	movs	r2, #24
 800ca6c:	2111      	movs	r1, #17
 800ca6e:	f000 fc5d 	bl	800d32c <core_set_error>
 800ca72:	2000      	movs	r0, #0
 800ca74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca76:	4630      	mov	r0, r6
 800ca78:	e7fc      	b.n	800ca74 <ai_platform_api_get_network_report+0x104>
 800ca7a:	4b31      	ldr	r3, [pc, #196]	; (800cb40 <ai_platform_api_get_network_report+0x1d0>)
 800ca7c:	482b      	ldr	r0, [pc, #172]	; (800cb2c <ai_platform_api_get_network_report+0x1bc>)
 800ca7e:	6133      	str	r3, [r6, #16]
 800ca80:	6803      	ldr	r3, [r0, #0]
 800ca82:	492b      	ldr	r1, [pc, #172]	; (800cb30 <ai_platform_api_get_network_report+0x1c0>)
 800ca84:	f023 0301 	bic.w	r3, r3, #1
 800ca88:	2401      	movs	r4, #1
 800ca8a:	6003      	str	r3, [r0, #0]
 800ca8c:	6014      	str	r4, [r2, #0]
 800ca8e:	680b      	ldr	r3, [r1, #0]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d1fc      	bne.n	800ca8e <ai_platform_api_get_network_report+0x11e>
 800ca94:	4b27      	ldr	r3, [pc, #156]	; (800cb34 <ai_platform_api_get_network_report+0x1c4>)
 800ca96:	4a28      	ldr	r2, [pc, #160]	; (800cb38 <ai_platform_api_get_network_report+0x1c8>)
 800ca98:	601a      	str	r2, [r3, #0]
 800ca9a:	681a      	ldr	r2, [r3, #0]
 800ca9c:	4b27      	ldr	r3, [pc, #156]	; (800cb3c <ai_platform_api_get_network_report+0x1cc>)
 800ca9e:	429a      	cmp	r2, r3
 800caa0:	d010      	beq.n	800cac4 <ai_platform_api_get_network_report+0x154>
 800caa2:	e7fe      	b.n	800caa2 <ai_platform_api_get_network_report+0x132>
 800caa4:	f104 0010 	add.w	r0, r4, #16
 800caa8:	2218      	movs	r2, #24
 800caaa:	2113      	movs	r1, #19
 800caac:	f000 fc3e 	bl	800d32c <core_set_error>
 800cab0:	4628      	mov	r0, r5
 800cab2:	e7df      	b.n	800ca74 <ai_platform_api_get_network_report+0x104>
 800cab4:	f104 0010 	add.w	r0, r4, #16
 800cab8:	2218      	movs	r2, #24
 800caba:	2112      	movs	r1, #18
 800cabc:	f000 fc36 	bl	800d32c <core_set_error>
 800cac0:	4628      	mov	r0, r5
 800cac2:	e7d7      	b.n	800ca74 <ai_platform_api_get_network_report+0x104>
 800cac4:	f240 2305 	movw	r3, #517	; 0x205
 800cac8:	4818      	ldr	r0, [pc, #96]	; (800cb2c <ai_platform_api_get_network_report+0x1bc>)
 800caca:	6173      	str	r3, [r6, #20]
 800cacc:	6803      	ldr	r3, [r0, #0]
 800cace:	4a18      	ldr	r2, [pc, #96]	; (800cb30 <ai_platform_api_get_network_report+0x1c0>)
 800cad0:	f023 0301 	bic.w	r3, r3, #1
 800cad4:	2401      	movs	r4, #1
 800cad6:	6003      	str	r3, [r0, #0]
 800cad8:	600c      	str	r4, [r1, #0]
 800cada:	6813      	ldr	r3, [r2, #0]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d1fc      	bne.n	800cada <ai_platform_api_get_network_report+0x16a>
 800cae0:	4b14      	ldr	r3, [pc, #80]	; (800cb34 <ai_platform_api_get_network_report+0x1c4>)
 800cae2:	4915      	ldr	r1, [pc, #84]	; (800cb38 <ai_platform_api_get_network_report+0x1c8>)
 800cae4:	6019      	str	r1, [r3, #0]
 800cae6:	6819      	ldr	r1, [r3, #0]
 800cae8:	4b14      	ldr	r3, [pc, #80]	; (800cb3c <ai_platform_api_get_network_report+0x1cc>)
 800caea:	4299      	cmp	r1, r3
 800caec:	d000      	beq.n	800caf0 <ai_platform_api_get_network_report+0x180>
 800caee:	e7fe      	b.n	800caee <ai_platform_api_get_network_report+0x17e>
 800caf0:	f240 1301 	movw	r3, #257	; 0x101
 800caf4:	490d      	ldr	r1, [pc, #52]	; (800cb2c <ai_platform_api_get_network_report+0x1bc>)
 800caf6:	6273      	str	r3, [r6, #36]	; 0x24
 800caf8:	680b      	ldr	r3, [r1, #0]
 800cafa:	4c0d      	ldr	r4, [pc, #52]	; (800cb30 <ai_platform_api_get_network_report+0x1c0>)
 800cafc:	f023 0301 	bic.w	r3, r3, #1
 800cb00:	2001      	movs	r0, #1
 800cb02:	600b      	str	r3, [r1, #0]
 800cb04:	6010      	str	r0, [r2, #0]
 800cb06:	6823      	ldr	r3, [r4, #0]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d1fc      	bne.n	800cb06 <ai_platform_api_get_network_report+0x196>
 800cb0c:	4b09      	ldr	r3, [pc, #36]	; (800cb34 <ai_platform_api_get_network_report+0x1c4>)
 800cb0e:	4a0a      	ldr	r2, [pc, #40]	; (800cb38 <ai_platform_api_get_network_report+0x1c8>)
 800cb10:	601a      	str	r2, [r3, #0]
 800cb12:	681a      	ldr	r2, [r3, #0]
 800cb14:	4b09      	ldr	r3, [pc, #36]	; (800cb3c <ai_platform_api_get_network_report+0x1cc>)
 800cb16:	429a      	cmp	r2, r3
 800cb18:	d000      	beq.n	800cb1c <ai_platform_api_get_network_report+0x1ac>
 800cb1a:	e7fe      	b.n	800cb1a <ai_platform_api_get_network_report+0x1aa>
 800cb1c:	f240 4301 	movw	r3, #1025	; 0x401
 800cb20:	62b3      	str	r3, [r6, #40]	; 0x28
 800cb22:	2001      	movs	r0, #1
 800cb24:	e7a6      	b.n	800ca74 <ai_platform_api_get_network_report+0x104>
 800cb26:	bf00      	nop
 800cb28:	a1c00100 	.word	0xa1c00100
 800cb2c:	e0002000 	.word	0xe0002000
 800cb30:	40023008 	.word	0x40023008
 800cb34:	40023000 	.word	0x40023000
 800cb38:	f407a5c2 	.word	0xf407a5c2
 800cb3c:	b5e8b5cd 	.word	0xb5e8b5cd
 800cb40:	0801b910 	.word	0x0801b910

0800cb44 <ai_platform_network_create>:
 800cb44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb48:	4e23      	ldr	r6, [pc, #140]	; (800cbd8 <ai_platform_network_create+0x94>)
 800cb4a:	4924      	ldr	r1, [pc, #144]	; (800cbdc <ai_platform_network_create+0x98>)
 800cb4c:	6835      	ldr	r5, [r6, #0]
 800cb4e:	b082      	sub	sp, #8
 800cb50:	f025 0501 	bic.w	r5, r5, #1
 800cb54:	f89d 7020 	ldrb.w	r7, [sp, #32]
 800cb58:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 800cb5c:	6035      	str	r5, [r6, #0]
 800cb5e:	2501      	movs	r5, #1
 800cb60:	600d      	str	r5, [r1, #0]
 800cb62:	680d      	ldr	r5, [r1, #0]
 800cb64:	2d00      	cmp	r5, #0
 800cb66:	d1fc      	bne.n	800cb62 <ai_platform_network_create+0x1e>
 800cb68:	491d      	ldr	r1, [pc, #116]	; (800cbe0 <ai_platform_network_create+0x9c>)
 800cb6a:	4e1e      	ldr	r6, [pc, #120]	; (800cbe4 <ai_platform_network_create+0xa0>)
 800cb6c:	600e      	str	r6, [r1, #0]
 800cb6e:	680e      	ldr	r6, [r1, #0]
 800cb70:	491d      	ldr	r1, [pc, #116]	; (800cbe8 <ai_platform_network_create+0xa4>)
 800cb72:	428e      	cmp	r6, r1
 800cb74:	d000      	beq.n	800cb78 <ai_platform_network_create+0x34>
 800cb76:	e7fe      	b.n	800cb76 <ai_platform_network_create+0x32>
 800cb78:	b1d0      	cbz	r0, 800cbb0 <ai_platform_network_create+0x6c>
 800cb7a:	4698      	mov	r8, r3
 800cb7c:	4613      	mov	r3, r2
 800cb7e:	4a1b      	ldr	r2, [pc, #108]	; (800cbec <ai_platform_network_create+0xa8>)
 800cb80:	601a      	str	r2, [r3, #0]
 800cb82:	6003      	str	r3, [r0, #0]
 800cb84:	4606      	mov	r6, r0
 800cb86:	f000 fbc9 	bl	800d31c <core_init>
 800cb8a:	b1b0      	cbz	r0, 800cbba <ai_platform_network_create+0x76>
 800cb8c:	0223      	lsls	r3, r4, #8
 800cb8e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cb92:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 800cb96:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 800cb9a:	d910      	bls.n	800cbbe <ai_platform_network_create+0x7a>
 800cb9c:	2201      	movs	r2, #1
 800cb9e:	2300      	movs	r3, #0
 800cba0:	6033      	str	r3, [r6, #0]
 800cba2:	2310      	movs	r3, #16
 800cba4:	2000      	movs	r0, #0
 800cba6:	f362 0007 	bfi	r0, r2, #0, #8
 800cbaa:	f363 201f 	bfi	r0, r3, #8, #24
 800cbae:	e001      	b.n	800cbb4 <ai_platform_network_create+0x70>
 800cbb0:	f241 0010 	movw	r0, #4112	; 0x1010
 800cbb4:	b002      	add	sp, #8
 800cbb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbba:	2230      	movs	r2, #48	; 0x30
 800cbbc:	e7ef      	b.n	800cb9e <ai_platform_network_create+0x5a>
 800cbbe:	a802      	add	r0, sp, #8
 800cbc0:	4b0b      	ldr	r3, [pc, #44]	; (800cbf0 <ai_platform_network_create+0xac>)
 800cbc2:	f840 3d04 	str.w	r3, [r0, #-4]!
 800cbc6:	f002 faf5 	bl	800f1b4 <ai_check_custom_types>
 800cbca:	b110      	cbz	r0, 800cbd2 <ai_platform_network_create+0x8e>
 800cbcc:	462b      	mov	r3, r5
 800cbce:	462a      	mov	r2, r5
 800cbd0:	e7e8      	b.n	800cba4 <ai_platform_network_create+0x60>
 800cbd2:	2202      	movs	r2, #2
 800cbd4:	e7e3      	b.n	800cb9e <ai_platform_network_create+0x5a>
 800cbd6:	bf00      	nop
 800cbd8:	e0002000 	.word	0xe0002000
 800cbdc:	40023008 	.word	0x40023008
 800cbe0:	40023000 	.word	0x40023000
 800cbe4:	f407a5c2 	.word	0xf407a5c2
 800cbe8:	b5e8b5cd 	.word	0xb5e8b5cd
 800cbec:	a1c00100 	.word	0xa1c00100
 800cbf0:	84048403 	.word	0x84048403

0800cbf4 <ai_platform_network_destroy>:
 800cbf4:	b430      	push	{r4, r5}
 800cbf6:	b1f0      	cbz	r0, 800cc36 <ai_platform_network_destroy+0x42>
 800cbf8:	4a10      	ldr	r2, [pc, #64]	; (800cc3c <ai_platform_network_destroy+0x48>)
 800cbfa:	6803      	ldr	r3, [r0, #0]
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	bf0c      	ite	eq
 800cc00:	4603      	moveq	r3, r0
 800cc02:	2300      	movne	r3, #0
 800cc04:	4c0e      	ldr	r4, [pc, #56]	; (800cc40 <ai_platform_network_destroy+0x4c>)
 800cc06:	490f      	ldr	r1, [pc, #60]	; (800cc44 <ai_platform_network_destroy+0x50>)
 800cc08:	6822      	ldr	r2, [r4, #0]
 800cc0a:	2501      	movs	r5, #1
 800cc0c:	f022 0201 	bic.w	r2, r2, #1
 800cc10:	6022      	str	r2, [r4, #0]
 800cc12:	460a      	mov	r2, r1
 800cc14:	600d      	str	r5, [r1, #0]
 800cc16:	6811      	ldr	r1, [r2, #0]
 800cc18:	2900      	cmp	r1, #0
 800cc1a:	d1fc      	bne.n	800cc16 <ai_platform_network_destroy+0x22>
 800cc1c:	4a0a      	ldr	r2, [pc, #40]	; (800cc48 <ai_platform_network_destroy+0x54>)
 800cc1e:	490b      	ldr	r1, [pc, #44]	; (800cc4c <ai_platform_network_destroy+0x58>)
 800cc20:	6011      	str	r1, [r2, #0]
 800cc22:	6811      	ldr	r1, [r2, #0]
 800cc24:	4a0a      	ldr	r2, [pc, #40]	; (800cc50 <ai_platform_network_destroy+0x5c>)
 800cc26:	4291      	cmp	r1, r2
 800cc28:	d000      	beq.n	800cc2c <ai_platform_network_destroy+0x38>
 800cc2a:	e7fe      	b.n	800cc2a <ai_platform_network_destroy+0x36>
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	bf18      	it	ne
 800cc30:	2000      	movne	r0, #0
 800cc32:	bc30      	pop	{r4, r5}
 800cc34:	4770      	bx	lr
 800cc36:	4603      	mov	r3, r0
 800cc38:	e7e4      	b.n	800cc04 <ai_platform_network_destroy+0x10>
 800cc3a:	bf00      	nop
 800cc3c:	a1c00100 	.word	0xa1c00100
 800cc40:	e0002000 	.word	0xe0002000
 800cc44:	40023008 	.word	0x40023008
 800cc48:	40023000 	.word	0x40023000
 800cc4c:	f407a5c2 	.word	0xf407a5c2
 800cc50:	b5e8b5cd 	.word	0xb5e8b5cd

0800cc54 <ai_platform_network_init>:
 800cc54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc56:	460c      	mov	r4, r1
 800cc58:	4605      	mov	r5, r0
 800cc5a:	b120      	cbz	r0, 800cc66 <ai_platform_network_init+0x12>
 800cc5c:	4b36      	ldr	r3, [pc, #216]	; (800cd38 <ai_platform_network_init+0xe4>)
 800cc5e:	6802      	ldr	r2, [r0, #0]
 800cc60:	429a      	cmp	r2, r3
 800cc62:	bf18      	it	ne
 800cc64:	2500      	movne	r5, #0
 800cc66:	4935      	ldr	r1, [pc, #212]	; (800cd3c <ai_platform_network_init+0xe8>)
 800cc68:	4a35      	ldr	r2, [pc, #212]	; (800cd40 <ai_platform_network_init+0xec>)
 800cc6a:	680b      	ldr	r3, [r1, #0]
 800cc6c:	2001      	movs	r0, #1
 800cc6e:	f023 0301 	bic.w	r3, r3, #1
 800cc72:	600b      	str	r3, [r1, #0]
 800cc74:	4613      	mov	r3, r2
 800cc76:	6010      	str	r0, [r2, #0]
 800cc78:	681a      	ldr	r2, [r3, #0]
 800cc7a:	2a00      	cmp	r2, #0
 800cc7c:	d1fc      	bne.n	800cc78 <ai_platform_network_init+0x24>
 800cc7e:	4b31      	ldr	r3, [pc, #196]	; (800cd44 <ai_platform_network_init+0xf0>)
 800cc80:	4a31      	ldr	r2, [pc, #196]	; (800cd48 <ai_platform_network_init+0xf4>)
 800cc82:	601a      	str	r2, [r3, #0]
 800cc84:	681a      	ldr	r2, [r3, #0]
 800cc86:	4b31      	ldr	r3, [pc, #196]	; (800cd4c <ai_platform_network_init+0xf8>)
 800cc88:	429a      	cmp	r2, r3
 800cc8a:	d000      	beq.n	800cc8e <ai_platform_network_init+0x3a>
 800cc8c:	e7fe      	b.n	800cc8c <ai_platform_network_init+0x38>
 800cc8e:	b33d      	cbz	r5, 800cce0 <ai_platform_network_init+0x8c>
 800cc90:	b344      	cbz	r4, 800cce4 <ai_platform_network_init+0x90>
 800cc92:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800cc94:	6926      	ldr	r6, [r4, #16]
 800cc96:	2f00      	cmp	r7, #0
 800cc98:	d03d      	beq.n	800cd16 <ai_platform_network_init+0xc2>
 800cc9a:	b35e      	cbz	r6, 800ccf4 <ai_platform_network_init+0xa0>
 800cc9c:	4627      	mov	r7, r4
 800cc9e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800cca0:	f105 0618 	add.w	r6, r5, #24
 800cca4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800cca6:	e897 0003 	ldmia.w	r7, {r0, r1}
 800ccaa:	e886 0003 	stmia.w	r6, {r0, r1}
 800ccae:	3418      	adds	r4, #24
 800ccb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ccb2:	f105 0630 	add.w	r6, r5, #48	; 0x30
 800ccb6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ccb8:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ccbc:	e886 0003 	stmia.w	r6, {r0, r1}
 800ccc0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800ccc2:	2303      	movs	r3, #3
 800ccc4:	60eb      	str	r3, [r5, #12]
 800ccc6:	b15a      	cbz	r2, 800cce0 <ai_platform_network_init+0x8c>
 800ccc8:	68d3      	ldr	r3, [r2, #12]
 800ccca:	6095      	str	r5, [r2, #8]
 800cccc:	429a      	cmp	r2, r3
 800ccce:	d007      	beq.n	800cce0 <ai_platform_network_init+0x8c>
 800ccd0:	b133      	cbz	r3, 800cce0 <ai_platform_network_init+0x8c>
 800ccd2:	68da      	ldr	r2, [r3, #12]
 800ccd4:	609d      	str	r5, [r3, #8]
 800ccd6:	429a      	cmp	r2, r3
 800ccd8:	d002      	beq.n	800cce0 <ai_platform_network_init+0x8c>
 800ccda:	4613      	mov	r3, r2
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d1f8      	bne.n	800ccd2 <ai_platform_network_init+0x7e>
 800cce0:	4628      	mov	r0, r5
 800cce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cce4:	f105 0010 	add.w	r0, r5, #16
 800cce8:	2211      	movs	r2, #17
 800ccea:	2110      	movs	r1, #16
 800ccec:	f000 fb1e 	bl	800d32c <core_set_error>
 800ccf0:	4625      	mov	r5, r4
 800ccf2:	e7f5      	b.n	800cce0 <ai_platform_network_init+0x8c>
 800ccf4:	8921      	ldrh	r1, [r4, #8]
 800ccf6:	88e2      	ldrh	r2, [r4, #6]
 800ccf8:	68e3      	ldr	r3, [r4, #12]
 800ccfa:	fb02 f201 	mul.w	r2, r2, r1
 800ccfe:	fb03 f302 	mul.w	r3, r3, r2
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d0ca      	beq.n	800cc9c <ai_platform_network_init+0x48>
 800cd06:	f105 0010 	add.w	r0, r5, #16
 800cd0a:	2212      	movs	r2, #18
 800cd0c:	2110      	movs	r1, #16
 800cd0e:	f000 fb0d 	bl	800d32c <core_set_error>
 800cd12:	4635      	mov	r5, r6
 800cd14:	e7e4      	b.n	800cce0 <ai_platform_network_init+0x8c>
 800cd16:	8c21      	ldrh	r1, [r4, #32]
 800cd18:	8be2      	ldrh	r2, [r4, #30]
 800cd1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd1c:	fb02 f201 	mul.w	r2, r2, r1
 800cd20:	fb03 f302 	mul.w	r3, r3, r2
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d0b8      	beq.n	800cc9a <ai_platform_network_init+0x46>
 800cd28:	f105 0010 	add.w	r0, r5, #16
 800cd2c:	2213      	movs	r2, #19
 800cd2e:	2110      	movs	r1, #16
 800cd30:	f000 fafc 	bl	800d32c <core_set_error>
 800cd34:	463d      	mov	r5, r7
 800cd36:	e7d3      	b.n	800cce0 <ai_platform_network_init+0x8c>
 800cd38:	a1c00100 	.word	0xa1c00100
 800cd3c:	e0002000 	.word	0xe0002000
 800cd40:	40023008 	.word	0x40023008
 800cd44:	40023000 	.word	0x40023000
 800cd48:	f407a5c2 	.word	0xf407a5c2
 800cd4c:	b5e8b5cd 	.word	0xb5e8b5cd

0800cd50 <ai_platform_network_post_init>:
 800cd50:	b538      	push	{r3, r4, r5, lr}
 800cd52:	4604      	mov	r4, r0
 800cd54:	b120      	cbz	r0, 800cd60 <ai_platform_network_post_init+0x10>
 800cd56:	4b1c      	ldr	r3, [pc, #112]	; (800cdc8 <ai_platform_network_post_init+0x78>)
 800cd58:	6802      	ldr	r2, [r0, #0]
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	bf18      	it	ne
 800cd5e:	2400      	movne	r4, #0
 800cd60:	491a      	ldr	r1, [pc, #104]	; (800cdcc <ai_platform_network_post_init+0x7c>)
 800cd62:	4a1b      	ldr	r2, [pc, #108]	; (800cdd0 <ai_platform_network_post_init+0x80>)
 800cd64:	680b      	ldr	r3, [r1, #0]
 800cd66:	2001      	movs	r0, #1
 800cd68:	f023 0301 	bic.w	r3, r3, #1
 800cd6c:	600b      	str	r3, [r1, #0]
 800cd6e:	4613      	mov	r3, r2
 800cd70:	6010      	str	r0, [r2, #0]
 800cd72:	681a      	ldr	r2, [r3, #0]
 800cd74:	2a00      	cmp	r2, #0
 800cd76:	d1fc      	bne.n	800cd72 <ai_platform_network_post_init+0x22>
 800cd78:	4b16      	ldr	r3, [pc, #88]	; (800cdd4 <ai_platform_network_post_init+0x84>)
 800cd7a:	4a17      	ldr	r2, [pc, #92]	; (800cdd8 <ai_platform_network_post_init+0x88>)
 800cd7c:	601a      	str	r2, [r3, #0]
 800cd7e:	681a      	ldr	r2, [r3, #0]
 800cd80:	4b16      	ldr	r3, [pc, #88]	; (800cddc <ai_platform_network_post_init+0x8c>)
 800cd82:	429a      	cmp	r2, r3
 800cd84:	d000      	beq.n	800cd88 <ai_platform_network_post_init+0x38>
 800cd86:	e7fe      	b.n	800cd86 <ai_platform_network_post_init+0x36>
 800cd88:	b1a4      	cbz	r4, 800cdb4 <ai_platform_network_post_init+0x64>
 800cd8a:	68e3      	ldr	r3, [r4, #12]
 800cd8c:	f013 0502 	ands.w	r5, r3, #2
 800cd90:	d012      	beq.n	800cdb8 <ai_platform_network_post_init+0x68>
 800cd92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cd94:	b163      	cbz	r3, 800cdb0 <ai_platform_network_post_init+0x60>
 800cd96:	6d25      	ldr	r5, [r4, #80]	; 0x50
 800cd98:	b91d      	cbnz	r5, 800cda2 <ai_platform_network_post_init+0x52>
 800cd9a:	e009      	b.n	800cdb0 <ai_platform_network_post_init+0x60>
 800cd9c:	461d      	mov	r5, r3
 800cd9e:	b13b      	cbz	r3, 800cdb0 <ai_platform_network_post_init+0x60>
 800cda0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cda2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800cda4:	4629      	mov	r1, r5
 800cda6:	2000      	movs	r0, #0
 800cda8:	4798      	blx	r3
 800cdaa:	68eb      	ldr	r3, [r5, #12]
 800cdac:	42ab      	cmp	r3, r5
 800cdae:	d1f5      	bne.n	800cd9c <ai_platform_network_post_init+0x4c>
 800cdb0:	2001      	movs	r0, #1
 800cdb2:	bd38      	pop	{r3, r4, r5, pc}
 800cdb4:	4620      	mov	r0, r4
 800cdb6:	bd38      	pop	{r3, r4, r5, pc}
 800cdb8:	f104 0010 	add.w	r0, r4, #16
 800cdbc:	2210      	movs	r2, #16
 800cdbe:	2111      	movs	r1, #17
 800cdc0:	f000 fab4 	bl	800d32c <core_set_error>
 800cdc4:	4628      	mov	r0, r5
 800cdc6:	bd38      	pop	{r3, r4, r5, pc}
 800cdc8:	a1c00100 	.word	0xa1c00100
 800cdcc:	e0002000 	.word	0xe0002000
 800cdd0:	40023008 	.word	0x40023008
 800cdd4:	40023000 	.word	0x40023000
 800cdd8:	f407a5c2 	.word	0xf407a5c2
 800cddc:	b5e8b5cd 	.word	0xb5e8b5cd

0800cde0 <ai_platform_network_process>:
 800cde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cde4:	b083      	sub	sp, #12
 800cde6:	4604      	mov	r4, r0
 800cde8:	9201      	str	r2, [sp, #4]
 800cdea:	b120      	cbz	r0, 800cdf6 <ai_platform_network_process+0x16>
 800cdec:	4ba5      	ldr	r3, [pc, #660]	; (800d084 <ai_platform_network_process+0x2a4>)
 800cdee:	6802      	ldr	r2, [r0, #0]
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	bf18      	it	ne
 800cdf4:	2400      	movne	r4, #0
 800cdf6:	48a4      	ldr	r0, [pc, #656]	; (800d088 <ai_platform_network_process+0x2a8>)
 800cdf8:	4ba4      	ldr	r3, [pc, #656]	; (800d08c <ai_platform_network_process+0x2ac>)
 800cdfa:	6802      	ldr	r2, [r0, #0]
 800cdfc:	f022 0201 	bic.w	r2, r2, #1
 800ce00:	6002      	str	r2, [r0, #0]
 800ce02:	2201      	movs	r2, #1
 800ce04:	601a      	str	r2, [r3, #0]
 800ce06:	681a      	ldr	r2, [r3, #0]
 800ce08:	2a00      	cmp	r2, #0
 800ce0a:	d1fc      	bne.n	800ce06 <ai_platform_network_process+0x26>
 800ce0c:	4ba0      	ldr	r3, [pc, #640]	; (800d090 <ai_platform_network_process+0x2b0>)
 800ce0e:	4aa1      	ldr	r2, [pc, #644]	; (800d094 <ai_platform_network_process+0x2b4>)
 800ce10:	601a      	str	r2, [r3, #0]
 800ce12:	681a      	ldr	r2, [r3, #0]
 800ce14:	4ba0      	ldr	r3, [pc, #640]	; (800d098 <ai_platform_network_process+0x2b8>)
 800ce16:	429a      	cmp	r2, r3
 800ce18:	d000      	beq.n	800ce1c <ai_platform_network_process+0x3c>
 800ce1a:	e7fe      	b.n	800ce1a <ai_platform_network_process+0x3a>
 800ce1c:	2c00      	cmp	r4, #0
 800ce1e:	d066      	beq.n	800ceee <ai_platform_network_process+0x10e>
 800ce20:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 800ce24:	b107      	cbz	r7, 800ce28 <ai_platform_network_process+0x48>
 800ce26:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 800ce28:	68e3      	ldr	r3, [r4, #12]
 800ce2a:	f003 0303 	and.w	r3, r3, #3
 800ce2e:	2600      	movs	r6, #0
 800ce30:	2b03      	cmp	r3, #3
 800ce32:	6166      	str	r6, [r4, #20]
 800ce34:	f040 80fe 	bne.w	800d034 <ai_platform_network_process+0x254>
 800ce38:	2900      	cmp	r1, #0
 800ce3a:	d07f      	beq.n	800cf3c <ai_platform_network_process+0x15c>
 800ce3c:	2f00      	cmp	r7, #0
 800ce3e:	d07d      	beq.n	800cf3c <ai_platform_network_process+0x15c>
 800ce40:	883b      	ldrh	r3, [r7, #0]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d07a      	beq.n	800cf3c <ai_platform_network_process+0x15c>
 800ce46:	460d      	mov	r5, r1
 800ce48:	46a0      	mov	r8, r4
 800ce4a:	f835 9f04 	ldrh.w	r9, [r5, #4]!
 800ce4e:	429e      	cmp	r6, r3
 800ce50:	d27d      	bcs.n	800cf4e <ai_platform_network_process+0x16e>
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d07a      	beq.n	800cf4e <ai_platform_network_process+0x16e>
 800ce58:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 800ce5c:	2c00      	cmp	r4, #0
 800ce5e:	d076      	beq.n	800cf4e <ai_platform_network_process+0x16e>
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	eb13 1a06 	adds.w	sl, r3, r6, lsl #4
 800ce68:	d067      	beq.n	800cf3a <ai_platform_network_process+0x15a>
 800ce6a:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 800ce6e:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 800ce72:	69a0      	ldr	r0, [r4, #24]
 800ce74:	f8d5 c008 	ldr.w	ip, [r5, #8]
 800ce78:	6841      	ldr	r1, [r0, #4]
 800ce7a:	fb0b f30e 	mul.w	r3, fp, lr
 800ce7e:	fb0c f303 	mul.w	r3, ip, r3
 800ce82:	4299      	cmp	r1, r3
 800ce84:	d350      	bcc.n	800cf28 <ai_platform_network_process+0x148>
 800ce86:	68e3      	ldr	r3, [r4, #12]
 800ce88:	68da      	ldr	r2, [r3, #12]
 800ce8a:	455a      	cmp	r2, fp
 800ce8c:	d14c      	bne.n	800cf28 <ai_platform_network_process+0x148>
 800ce8e:	689a      	ldr	r2, [r3, #8]
 800ce90:	4572      	cmp	r2, lr
 800ce92:	d149      	bne.n	800cf28 <ai_platform_network_process+0x148>
 800ce94:	685b      	ldr	r3, [r3, #4]
 800ce96:	459c      	cmp	ip, r3
 800ce98:	d146      	bne.n	800cf28 <ai_platform_network_process+0x148>
 800ce9a:	6800      	ldr	r0, [r0, #0]
 800ce9c:	f002 fa3a 	bl	800f314 <ai_array_get_byte_size>
 800cea0:	68e2      	ldr	r2, [r4, #12]
 800cea2:	6963      	ldr	r3, [r4, #20]
 800cea4:	68d2      	ldr	r2, [r2, #12]
 800cea6:	68db      	ldr	r3, [r3, #12]
 800cea8:	fb03 f302 	mul.w	r3, r3, r2
 800ceac:	4298      	cmp	r0, r3
 800ceae:	d33b      	bcc.n	800cf28 <ai_platform_network_process+0x148>
 800ceb0:	69a3      	ldr	r3, [r4, #24]
 800ceb2:	6818      	ldr	r0, [r3, #0]
 800ceb4:	f002 f9e2 	bl	800f27c <ai_array_to_buffer_fmt>
 800ceb8:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800cebc:	4043      	eors	r3, r0
 800cebe:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800cec2:	d128      	bne.n	800cf16 <ai_platform_network_process+0x136>
 800cec4:	68eb      	ldr	r3, [r5, #12]
 800cec6:	b1f3      	cbz	r3, 800cf06 <ai_platform_network_process+0x126>
 800cec8:	f8b5 b000 	ldrh.w	fp, [r5]
 800cecc:	f1bb 0f00 	cmp.w	fp, #0
 800ced0:	d012      	beq.n	800cef8 <ai_platform_network_process+0x118>
 800ced2:	4623      	mov	r3, r4
 800ced4:	f105 020c 	add.w	r2, r5, #12
 800ced8:	4629      	mov	r1, r5
 800ceda:	4650      	mov	r0, sl
 800cedc:	f7ff fc0e 	bl	800c6fc <_platform_network_state_setup.isra.1>
 800cee0:	45d9      	cmp	r9, fp
 800cee2:	883b      	ldrh	r3, [r7, #0]
 800cee4:	bf38      	it	cc
 800cee6:	46d9      	movcc	r9, fp
 800cee8:	3601      	adds	r6, #1
 800ceea:	3518      	adds	r5, #24
 800ceec:	e7af      	b.n	800ce4e <ai_platform_network_process+0x6e>
 800ceee:	46a3      	mov	fp, r4
 800cef0:	4658      	mov	r0, fp
 800cef2:	b003      	add	sp, #12
 800cef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cef8:	f108 0010 	add.w	r0, r8, #16
 800cefc:	2221      	movs	r2, #33	; 0x21
 800cefe:	2112      	movs	r1, #18
 800cf00:	f000 fa14 	bl	800d32c <core_set_error>
 800cf04:	e7f4      	b.n	800cef0 <ai_platform_network_process+0x110>
 800cf06:	f108 0010 	add.w	r0, r8, #16
 800cf0a:	2217      	movs	r2, #23
 800cf0c:	2112      	movs	r1, #18
 800cf0e:	469b      	mov	fp, r3
 800cf10:	f000 fa0c 	bl	800d32c <core_set_error>
 800cf14:	e7ec      	b.n	800cef0 <ai_platform_network_process+0x110>
 800cf16:	f108 0010 	add.w	r0, r8, #16
 800cf1a:	2219      	movs	r2, #25
 800cf1c:	2112      	movs	r1, #18
 800cf1e:	f000 fa05 	bl	800d32c <core_set_error>
 800cf22:	f04f 0b00 	mov.w	fp, #0
 800cf26:	e7e3      	b.n	800cef0 <ai_platform_network_process+0x110>
 800cf28:	f108 0010 	add.w	r0, r8, #16
 800cf2c:	2218      	movs	r2, #24
 800cf2e:	2112      	movs	r1, #18
 800cf30:	f000 f9fc 	bl	800d32c <core_set_error>
 800cf34:	f04f 0b00 	mov.w	fp, #0
 800cf38:	e7da      	b.n	800cef0 <ai_platform_network_process+0x110>
 800cf3a:	4644      	mov	r4, r8
 800cf3c:	f104 0010 	add.w	r0, r4, #16
 800cf40:	2217      	movs	r2, #23
 800cf42:	2112      	movs	r1, #18
 800cf44:	f000 f9f2 	bl	800d32c <core_set_error>
 800cf48:	f04f 0b00 	mov.w	fp, #0
 800cf4c:	e7d0      	b.n	800cef0 <ai_platform_network_process+0x110>
 800cf4e:	9a01      	ldr	r2, [sp, #4]
 800cf50:	f8b8 3048 	ldrh.w	r3, [r8, #72]	; 0x48
 800cf54:	4644      	mov	r4, r8
 800cf56:	2a00      	cmp	r2, #0
 800cf58:	f000 80a4 	beq.w	800d0a4 <ai_platform_network_process+0x2c4>
 800cf5c:	2b01      	cmp	r3, #1
 800cf5e:	f240 8140 	bls.w	800d1e2 <ai_platform_network_process+0x402>
 800cf62:	f8d8 804c 	ldr.w	r8, [r8, #76]	; 0x4c
 800cf66:	f118 0f0c 	cmn.w	r8, #12
 800cf6a:	f000 813a 	beq.w	800d1e2 <ai_platform_network_process+0x402>
 800cf6e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	f000 8135 	beq.w	800d1e2 <ai_platform_network_process+0x402>
 800cf78:	3204      	adds	r2, #4
 800cf7a:	4615      	mov	r5, r2
 800cf7c:	2700      	movs	r7, #0
 800cf7e:	429f      	cmp	r7, r3
 800cf80:	f080 808c 	bcs.w	800d09c <ai_platform_network_process+0x2bc>
 800cf84:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	f000 8087 	beq.w	800d09c <ai_platform_network_process+0x2bc>
 800cf8e:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 800cf92:	2e00      	cmp	r6, #0
 800cf94:	f000 8082 	beq.w	800d09c <ai_platform_network_process+0x2bc>
 800cf98:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	eb13 1a07 	adds.w	sl, r3, r7, lsl #4
 800cfa2:	d067      	beq.n	800d074 <ai_platform_network_process+0x294>
 800cfa4:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 800cfa8:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 800cfac:	69b0      	ldr	r0, [r6, #24]
 800cfae:	f8d5 c008 	ldr.w	ip, [r5, #8]
 800cfb2:	6841      	ldr	r1, [r0, #4]
 800cfb4:	fb0b f30e 	mul.w	r3, fp, lr
 800cfb8:	fb0c f303 	mul.w	r3, ip, r3
 800cfbc:	4299      	cmp	r1, r3
 800cfbe:	f0c0 8110 	bcc.w	800d1e2 <ai_platform_network_process+0x402>
 800cfc2:	68f3      	ldr	r3, [r6, #12]
 800cfc4:	68da      	ldr	r2, [r3, #12]
 800cfc6:	455a      	cmp	r2, fp
 800cfc8:	f040 810b 	bne.w	800d1e2 <ai_platform_network_process+0x402>
 800cfcc:	689a      	ldr	r2, [r3, #8]
 800cfce:	4572      	cmp	r2, lr
 800cfd0:	f040 8107 	bne.w	800d1e2 <ai_platform_network_process+0x402>
 800cfd4:	685b      	ldr	r3, [r3, #4]
 800cfd6:	459c      	cmp	ip, r3
 800cfd8:	f040 8103 	bne.w	800d1e2 <ai_platform_network_process+0x402>
 800cfdc:	6800      	ldr	r0, [r0, #0]
 800cfde:	f002 f999 	bl	800f314 <ai_array_get_byte_size>
 800cfe2:	68f2      	ldr	r2, [r6, #12]
 800cfe4:	6973      	ldr	r3, [r6, #20]
 800cfe6:	68d2      	ldr	r2, [r2, #12]
 800cfe8:	68db      	ldr	r3, [r3, #12]
 800cfea:	fb03 f302 	mul.w	r3, r3, r2
 800cfee:	4298      	cmp	r0, r3
 800cff0:	f0c0 80f7 	bcc.w	800d1e2 <ai_platform_network_process+0x402>
 800cff4:	69b3      	ldr	r3, [r6, #24]
 800cff6:	6818      	ldr	r0, [r3, #0]
 800cff8:	f002 f940 	bl	800f27c <ai_array_to_buffer_fmt>
 800cffc:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800d000:	4043      	eors	r3, r0
 800d002:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800d006:	d12c      	bne.n	800d062 <ai_platform_network_process+0x282>
 800d008:	68eb      	ldr	r3, [r5, #12]
 800d00a:	b313      	cbz	r3, 800d052 <ai_platform_network_process+0x272>
 800d00c:	f8b5 b000 	ldrh.w	fp, [r5]
 800d010:	f1bb 0f00 	cmp.w	fp, #0
 800d014:	d016      	beq.n	800d044 <ai_platform_network_process+0x264>
 800d016:	4633      	mov	r3, r6
 800d018:	f105 020c 	add.w	r2, r5, #12
 800d01c:	4629      	mov	r1, r5
 800d01e:	4650      	mov	r0, sl
 800d020:	f7ff fb6c 	bl	800c6fc <_platform_network_state_setup.isra.1>
 800d024:	45d9      	cmp	r9, fp
 800d026:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800d02a:	bf38      	it	cc
 800d02c:	46d9      	movcc	r9, fp
 800d02e:	3701      	adds	r7, #1
 800d030:	3518      	adds	r5, #24
 800d032:	e7a4      	b.n	800cf7e <ai_platform_network_process+0x19e>
 800d034:	f104 0010 	add.w	r0, r4, #16
 800d038:	2230      	movs	r2, #48	; 0x30
 800d03a:	2111      	movs	r1, #17
 800d03c:	f000 f976 	bl	800d32c <core_set_error>
 800d040:	46b3      	mov	fp, r6
 800d042:	e755      	b.n	800cef0 <ai_platform_network_process+0x110>
 800d044:	f104 0010 	add.w	r0, r4, #16
 800d048:	2221      	movs	r2, #33	; 0x21
 800d04a:	2113      	movs	r1, #19
 800d04c:	f000 f96e 	bl	800d32c <core_set_error>
 800d050:	e74e      	b.n	800cef0 <ai_platform_network_process+0x110>
 800d052:	f104 0010 	add.w	r0, r4, #16
 800d056:	2217      	movs	r2, #23
 800d058:	2113      	movs	r1, #19
 800d05a:	469b      	mov	fp, r3
 800d05c:	f000 f966 	bl	800d32c <core_set_error>
 800d060:	e746      	b.n	800cef0 <ai_platform_network_process+0x110>
 800d062:	f104 0010 	add.w	r0, r4, #16
 800d066:	2219      	movs	r2, #25
 800d068:	2113      	movs	r1, #19
 800d06a:	f000 f95f 	bl	800d32c <core_set_error>
 800d06e:	f04f 0b00 	mov.w	fp, #0
 800d072:	e73d      	b.n	800cef0 <ai_platform_network_process+0x110>
 800d074:	f104 0010 	add.w	r0, r4, #16
 800d078:	2217      	movs	r2, #23
 800d07a:	2113      	movs	r1, #19
 800d07c:	f000 f956 	bl	800d32c <core_set_error>
 800d080:	46d3      	mov	fp, sl
 800d082:	e735      	b.n	800cef0 <ai_platform_network_process+0x110>
 800d084:	a1c00100 	.word	0xa1c00100
 800d088:	e0002000 	.word	0xe0002000
 800d08c:	40023008 	.word	0x40023008
 800d090:	40023000 	.word	0x40023000
 800d094:	f407a5c2 	.word	0xf407a5c2
 800d098:	b5e8b5cd 	.word	0xb5e8b5cd
 800d09c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800d0a0:	f8a4 9014 	strh.w	r9, [r4, #20]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	f000 8099 	beq.w	800d1dc <ai_platform_network_process+0x3fc>
 800d0aa:	2b01      	cmp	r3, #1
 800d0ac:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800d0ae:	f240 8093 	bls.w	800d1d8 <ai_platform_network_process+0x3f8>
 800d0b2:	f105 070c 	add.w	r7, r5, #12
 800d0b6:	8ae0      	ldrh	r0, [r4, #22]
 800d0b8:	8aa3      	ldrh	r3, [r4, #20]
 800d0ba:	4283      	cmp	r3, r0
 800d0bc:	d977      	bls.n	800d1ae <ai_platform_network_process+0x3ce>
 800d0be:	46a3      	mov	fp, r4
 800d0c0:	2d00      	cmp	r5, #0
 800d0c2:	d032      	beq.n	800d12a <ai_platform_network_process+0x34a>
 800d0c4:	882b      	ldrh	r3, [r5, #0]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d02f      	beq.n	800d12a <ai_platform_network_process+0x34a>
 800d0ca:	686b      	ldr	r3, [r5, #4]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d02c      	beq.n	800d12a <ai_platform_network_process+0x34a>
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	f04f 0800 	mov.w	r8, #0
 800d0d6:	b343      	cbz	r3, 800d12a <ai_platform_network_process+0x34a>
 800d0d8:	68a9      	ldr	r1, [r5, #8]
 800d0da:	699a      	ldr	r2, [r3, #24]
 800d0dc:	f8d1 a000 	ldr.w	sl, [r1]
 800d0e0:	6814      	ldr	r4, [r2, #0]
 800d0e2:	6890      	ldr	r0, [r2, #8]
 800d0e4:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800d0e8:	eb0a 0609 	add.w	r6, sl, r9
 800d0ec:	00a4      	lsls	r4, r4, #2
 800d0ee:	6871      	ldr	r1, [r6, #4]
 800d0f0:	d45f      	bmi.n	800d1b2 <ai_platform_network_process+0x3d2>
 800d0f2:	68d4      	ldr	r4, [r2, #12]
 800d0f4:	1b00      	subs	r0, r0, r4
 800d0f6:	4401      	add	r1, r0
 800d0f8:	6091      	str	r1, [r2, #8]
 800d0fa:	699b      	ldr	r3, [r3, #24]
 800d0fc:	6872      	ldr	r2, [r6, #4]
 800d0fe:	60da      	str	r2, [r3, #12]
 800d100:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800d104:	f85a 2009 	ldr.w	r2, [sl, r9]
 800d108:	440b      	add	r3, r1
 800d10a:	4293      	cmp	r3, r2
 800d10c:	bf24      	itt	cs
 800d10e:	68f3      	ldrcs	r3, [r6, #12]
 800d110:	1ad3      	subcs	r3, r2, r3
 800d112:	6073      	str	r3, [r6, #4]
 800d114:	882b      	ldrh	r3, [r5, #0]
 800d116:	f108 0801 	add.w	r8, r8, #1
 800d11a:	4598      	cmp	r8, r3
 800d11c:	d205      	bcs.n	800d12a <ai_platform_network_process+0x34a>
 800d11e:	686b      	ldr	r3, [r5, #4]
 800d120:	b11b      	cbz	r3, 800d12a <ai_platform_network_process+0x34a>
 800d122:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d1d6      	bne.n	800d0d8 <ai_platform_network_process+0x2f8>
 800d12a:	4658      	mov	r0, fp
 800d12c:	f002 f86c 	bl	800f208 <ai_layers_forward_all>
 800d130:	2f00      	cmp	r7, #0
 800d132:	d032      	beq.n	800d19a <ai_platform_network_process+0x3ba>
 800d134:	883b      	ldrh	r3, [r7, #0]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d02f      	beq.n	800d19a <ai_platform_network_process+0x3ba>
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	b36b      	cbz	r3, 800d19a <ai_platform_network_process+0x3ba>
 800d13e:	6818      	ldr	r0, [r3, #0]
 800d140:	b358      	cbz	r0, 800d19a <ai_platform_network_process+0x3ba>
 800d142:	f04f 0800 	mov.w	r8, #0
 800d146:	68bb      	ldr	r3, [r7, #8]
 800d148:	6981      	ldr	r1, [r0, #24]
 800d14a:	f8d3 a000 	ldr.w	sl, [r3]
 800d14e:	680c      	ldr	r4, [r1, #0]
 800d150:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800d154:	eb0a 0609 	add.w	r6, sl, r9
 800d158:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 800d15c:	00a4      	lsls	r4, r4, #2
 800d15e:	eb0c 0302 	add.w	r3, ip, r2
 800d162:	d42a      	bmi.n	800d1ba <ai_platform_network_process+0x3da>
 800d164:	f85a 2009 	ldr.w	r2, [sl, r9]
 800d168:	4293      	cmp	r3, r2
 800d16a:	bf24      	itt	cs
 800d16c:	68f3      	ldrcs	r3, [r6, #12]
 800d16e:	1ad3      	subcs	r3, r2, r3
 800d170:	6073      	str	r3, [r6, #4]
 800d172:	6981      	ldr	r1, [r0, #24]
 800d174:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 800d178:	1b12      	subs	r2, r2, r4
 800d17a:	4413      	add	r3, r2
 800d17c:	608b      	str	r3, [r1, #8]
 800d17e:	6983      	ldr	r3, [r0, #24]
 800d180:	6872      	ldr	r2, [r6, #4]
 800d182:	60da      	str	r2, [r3, #12]
 800d184:	883b      	ldrh	r3, [r7, #0]
 800d186:	f108 0801 	add.w	r8, r8, #1
 800d18a:	4598      	cmp	r8, r3
 800d18c:	d205      	bcs.n	800d19a <ai_platform_network_process+0x3ba>
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	b11b      	cbz	r3, 800d19a <ai_platform_network_process+0x3ba>
 800d192:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d196:	2800      	cmp	r0, #0
 800d198:	d1d5      	bne.n	800d146 <ai_platform_network_process+0x366>
 800d19a:	f8bb 0016 	ldrh.w	r0, [fp, #22]
 800d19e:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800d1a2:	3001      	adds	r0, #1
 800d1a4:	b280      	uxth	r0, r0
 800d1a6:	4283      	cmp	r3, r0
 800d1a8:	f8ab 0016 	strh.w	r0, [fp, #22]
 800d1ac:	d888      	bhi.n	800d0c0 <ai_platform_network_process+0x2e0>
 800d1ae:	4683      	mov	fp, r0
 800d1b0:	e69e      	b.n	800cef0 <ai_platform_network_process+0x110>
 800d1b2:	68b2      	ldr	r2, [r6, #8]
 800d1b4:	f002 f90a 	bl	800f3cc <memcpy>
 800d1b8:	e7a2      	b.n	800d100 <ai_platform_network_process+0x320>
 800d1ba:	6889      	ldr	r1, [r1, #8]
 800d1bc:	4660      	mov	r0, ip
 800d1be:	f002 f905 	bl	800f3cc <memcpy>
 800d1c2:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800d1c6:	f85a 2009 	ldr.w	r2, [sl, r9]
 800d1ca:	440b      	add	r3, r1
 800d1cc:	4293      	cmp	r3, r2
 800d1ce:	bf24      	itt	cs
 800d1d0:	68f3      	ldrcs	r3, [r6, #12]
 800d1d2:	1ad3      	subcs	r3, r2, r3
 800d1d4:	6073      	str	r3, [r6, #4]
 800d1d6:	e7d5      	b.n	800d184 <ai_platform_network_process+0x3a4>
 800d1d8:	2700      	movs	r7, #0
 800d1da:	e76c      	b.n	800d0b6 <ai_platform_network_process+0x2d6>
 800d1dc:	461d      	mov	r5, r3
 800d1de:	461f      	mov	r7, r3
 800d1e0:	e769      	b.n	800d0b6 <ai_platform_network_process+0x2d6>
 800d1e2:	f104 0010 	add.w	r0, r4, #16
 800d1e6:	2218      	movs	r2, #24
 800d1e8:	2113      	movs	r1, #19
 800d1ea:	f000 f89f 	bl	800d32c <core_set_error>
 800d1ee:	f04f 0b00 	mov.w	fp, #0
 800d1f2:	e67d      	b.n	800cef0 <ai_platform_network_process+0x110>

0800d1f4 <ai_platform_observer_register_s>:
 800d1f4:	b538      	push	{r3, r4, r5, lr}
 800d1f6:	460c      	mov	r4, r1
 800d1f8:	b120      	cbz	r0, 800d204 <ai_platform_observer_register_s+0x10>
 800d1fa:	4b26      	ldr	r3, [pc, #152]	; (800d294 <ai_platform_observer_register_s+0xa0>)
 800d1fc:	6802      	ldr	r2, [r0, #0]
 800d1fe:	429a      	cmp	r2, r3
 800d200:	bf18      	it	ne
 800d202:	2000      	movne	r0, #0
 800d204:	4924      	ldr	r1, [pc, #144]	; (800d298 <ai_platform_observer_register_s+0xa4>)
 800d206:	4a25      	ldr	r2, [pc, #148]	; (800d29c <ai_platform_observer_register_s+0xa8>)
 800d208:	680b      	ldr	r3, [r1, #0]
 800d20a:	2501      	movs	r5, #1
 800d20c:	f023 0301 	bic.w	r3, r3, #1
 800d210:	600b      	str	r3, [r1, #0]
 800d212:	4613      	mov	r3, r2
 800d214:	6015      	str	r5, [r2, #0]
 800d216:	681d      	ldr	r5, [r3, #0]
 800d218:	2d00      	cmp	r5, #0
 800d21a:	d1fc      	bne.n	800d216 <ai_platform_observer_register_s+0x22>
 800d21c:	4b20      	ldr	r3, [pc, #128]	; (800d2a0 <ai_platform_observer_register_s+0xac>)
 800d21e:	4a21      	ldr	r2, [pc, #132]	; (800d2a4 <ai_platform_observer_register_s+0xb0>)
 800d220:	601a      	str	r2, [r3, #0]
 800d222:	681a      	ldr	r2, [r3, #0]
 800d224:	4b20      	ldr	r3, [pc, #128]	; (800d2a8 <ai_platform_observer_register_s+0xb4>)
 800d226:	429a      	cmp	r2, r3
 800d228:	d000      	beq.n	800d22c <ai_platform_observer_register_s+0x38>
 800d22a:	e7fe      	b.n	800d22a <ai_platform_observer_register_s+0x36>
 800d22c:	b140      	cbz	r0, 800d240 <ai_platform_observer_register_s+0x4c>
 800d22e:	b154      	cbz	r4, 800d246 <ai_platform_observer_register_s+0x52>
 800d230:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800d232:	b17b      	cbz	r3, 800d254 <ai_platform_observer_register_s+0x60>
 800d234:	2240      	movs	r2, #64	; 0x40
 800d236:	2111      	movs	r1, #17
 800d238:	3010      	adds	r0, #16
 800d23a:	f000 f877 	bl	800d32c <core_set_error>
 800d23e:	e000      	b.n	800d242 <ai_platform_observer_register_s+0x4e>
 800d240:	4605      	mov	r5, r0
 800d242:	4628      	mov	r0, r5
 800d244:	bd38      	pop	{r3, r4, r5, pc}
 800d246:	3010      	adds	r0, #16
 800d248:	2211      	movs	r2, #17
 800d24a:	2110      	movs	r1, #16
 800d24c:	f000 f86e 	bl	800d32c <core_set_error>
 800d250:	4625      	mov	r5, r4
 800d252:	e7f6      	b.n	800d242 <ai_platform_observer_register_s+0x4e>
 800d254:	81e3      	strh	r3, [r4, #14]
 800d256:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800d258:	b182      	cbz	r2, 800d27c <ai_platform_observer_register_s+0x88>
 800d25a:	2301      	movs	r3, #1
 800d25c:	81e3      	strh	r3, [r4, #14]
 800d25e:	68d3      	ldr	r3, [r2, #12]
 800d260:	429a      	cmp	r2, r3
 800d262:	d00b      	beq.n	800d27c <ai_platform_observer_register_s+0x88>
 800d264:	b153      	cbz	r3, 800d27c <ai_platform_observer_register_s+0x88>
 800d266:	2202      	movs	r2, #2
 800d268:	e002      	b.n	800d270 <ai_platform_observer_register_s+0x7c>
 800d26a:	b292      	uxth	r2, r2
 800d26c:	460b      	mov	r3, r1
 800d26e:	b129      	cbz	r1, 800d27c <ai_platform_observer_register_s+0x88>
 800d270:	81e2      	strh	r2, [r4, #14]
 800d272:	68d9      	ldr	r1, [r3, #12]
 800d274:	4299      	cmp	r1, r3
 800d276:	f102 0201 	add.w	r2, r2, #1
 800d27a:	d1f6      	bne.n	800d26a <ai_platform_observer_register_s+0x76>
 800d27c:	7a23      	ldrb	r3, [r4, #8]
 800d27e:	4a0b      	ldr	r2, [pc, #44]	; (800d2ac <ai_platform_observer_register_s+0xb8>)
 800d280:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d284:	2100      	movs	r1, #0
 800d286:	60a3      	str	r3, [r4, #8]
 800d288:	81a1      	strh	r1, [r4, #12]
 800d28a:	2501      	movs	r5, #1
 800d28c:	e9c0 2416 	strd	r2, r4, [r0, #88]	; 0x58
 800d290:	e7d7      	b.n	800d242 <ai_platform_observer_register_s+0x4e>
 800d292:	bf00      	nop
 800d294:	a1c00100 	.word	0xa1c00100
 800d298:	e0002000 	.word	0xe0002000
 800d29c:	40023008 	.word	0x40023008
 800d2a0:	40023000 	.word	0x40023000
 800d2a4:	f407a5c2 	.word	0xf407a5c2
 800d2a8:	b5e8b5cd 	.word	0xb5e8b5cd
 800d2ac:	0800c56d 	.word	0x0800c56d

0800d2b0 <ai_platform_observer_unregister_s>:
 800d2b0:	b538      	push	{r3, r4, r5, lr}
 800d2b2:	460c      	mov	r4, r1
 800d2b4:	b120      	cbz	r0, 800d2c0 <ai_platform_observer_unregister_s+0x10>
 800d2b6:	4b13      	ldr	r3, [pc, #76]	; (800d304 <ai_platform_observer_unregister_s+0x54>)
 800d2b8:	6802      	ldr	r2, [r0, #0]
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	bf18      	it	ne
 800d2be:	2000      	movne	r0, #0
 800d2c0:	4911      	ldr	r1, [pc, #68]	; (800d308 <ai_platform_observer_unregister_s+0x58>)
 800d2c2:	4a12      	ldr	r2, [pc, #72]	; (800d30c <ai_platform_observer_unregister_s+0x5c>)
 800d2c4:	680b      	ldr	r3, [r1, #0]
 800d2c6:	2501      	movs	r5, #1
 800d2c8:	f023 0301 	bic.w	r3, r3, #1
 800d2cc:	600b      	str	r3, [r1, #0]
 800d2ce:	4611      	mov	r1, r2
 800d2d0:	6015      	str	r5, [r2, #0]
 800d2d2:	680b      	ldr	r3, [r1, #0]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d1fc      	bne.n	800d2d2 <ai_platform_observer_unregister_s+0x22>
 800d2d8:	4a0d      	ldr	r2, [pc, #52]	; (800d310 <ai_platform_observer_unregister_s+0x60>)
 800d2da:	490e      	ldr	r1, [pc, #56]	; (800d314 <ai_platform_observer_unregister_s+0x64>)
 800d2dc:	6011      	str	r1, [r2, #0]
 800d2de:	6811      	ldr	r1, [r2, #0]
 800d2e0:	4a0d      	ldr	r2, [pc, #52]	; (800d318 <ai_platform_observer_unregister_s+0x68>)
 800d2e2:	4291      	cmp	r1, r2
 800d2e4:	d000      	beq.n	800d2e8 <ai_platform_observer_unregister_s+0x38>
 800d2e6:	e7fe      	b.n	800d2e6 <ai_platform_observer_unregister_s+0x36>
 800d2e8:	b118      	cbz	r0, 800d2f2 <ai_platform_observer_unregister_s+0x42>
 800d2ea:	b11c      	cbz	r4, 800d2f4 <ai_platform_observer_unregister_s+0x44>
 800d2ec:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
 800d2f0:	2001      	movs	r0, #1
 800d2f2:	bd38      	pop	{r3, r4, r5, pc}
 800d2f4:	2211      	movs	r2, #17
 800d2f6:	2110      	movs	r1, #16
 800d2f8:	3010      	adds	r0, #16
 800d2fa:	f000 f817 	bl	800d32c <core_set_error>
 800d2fe:	4620      	mov	r0, r4
 800d300:	bd38      	pop	{r3, r4, r5, pc}
 800d302:	bf00      	nop
 800d304:	a1c00100 	.word	0xa1c00100
 800d308:	e0002000 	.word	0xe0002000
 800d30c:	40023008 	.word	0x40023008
 800d310:	40023000 	.word	0x40023000
 800d314:	f407a5c2 	.word	0xf407a5c2
 800d318:	b5e8b5cd 	.word	0xb5e8b5cd

0800d31c <core_init>:
 800d31c:	2001      	movs	r0, #1
 800d31e:	4770      	bx	lr

0800d320 <core_get_error>:
 800d320:	4603      	mov	r3, r0
 800d322:	2200      	movs	r2, #0
 800d324:	6800      	ldr	r0, [r0, #0]
 800d326:	601a      	str	r2, [r3, #0]
 800d328:	4770      	bx	lr
 800d32a:	bf00      	nop

0800d32c <core_set_error>:
 800d32c:	7803      	ldrb	r3, [r0, #0]
 800d32e:	b933      	cbnz	r3, 800d33e <core_set_error+0x12>
 800d330:	7001      	strb	r1, [r0, #0]
 800d332:	6803      	ldr	r3, [r0, #0]
 800d334:	f362 231f 	bfi	r3, r2, #8, #24
 800d338:	6003      	str	r3, [r0, #0]
 800d33a:	2001      	movs	r0, #1
 800d33c:	4770      	bx	lr
 800d33e:	2000      	movs	r0, #0
 800d340:	4770      	bx	lr
 800d342:	bf00      	nop

0800d344 <func_dummy>:
 800d344:	4770      	bx	lr
 800d346:	bf00      	nop

0800d348 <ai_dict8_dot_array_f32>:
 800d348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d34c:	f8dd c020 	ldr.w	ip, [sp, #32]
 800d350:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 800d354:	f000 80c0 	beq.w	800d4d8 <ai_dict8_dot_array_f32+0x190>
 800d358:	f101 0408 	add.w	r4, r1, #8
 800d35c:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800d360:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800d4e0 <ai_dict8_dot_array_f32+0x198>
 800d364:	eb04 0e09 	add.w	lr, r4, r9
 800d368:	f103 0520 	add.w	r5, r3, #32
 800d36c:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 800d370:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 800d374:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 800d378:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 800d37c:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 800d380:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 800d384:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 800d388:	ed55 3a04 	vldr	s7, [r5, #-16]
 800d38c:	ed55 4a03 	vldr	s9, [r5, #-12]
 800d390:	ed55 5a02 	vldr	s11, [r5, #-8]
 800d394:	ed55 6a01 	vldr	s13, [r5, #-4]
 800d398:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d39c:	edd6 7a00 	vldr	s15, [r6]
 800d3a0:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 800d3a4:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800d3a8:	ee67 7a83 	vmul.f32	s15, s15, s6
 800d3ac:	ed9a 3a00 	vldr	s6, [sl]
 800d3b0:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 800d3b4:	eee3 7a05 	vfma.f32	s15, s6, s10
 800d3b8:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800d3bc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d3c0:	ed97 3a00 	vldr	s6, [r7]
 800d3c4:	ed96 5a00 	vldr	s10, [r6]
 800d3c8:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 800d3cc:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 800d3d0:	eee3 7a04 	vfma.f32	s15, s6, s8
 800d3d4:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800d3d8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d3dc:	ed9a 3a00 	vldr	s6, [sl]
 800d3e0:	ed96 4a00 	vldr	s8, [r6]
 800d3e4:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 800d3e8:	eee5 7a06 	vfma.f32	s15, s10, s12
 800d3ec:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800d3f0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d3f4:	ed97 5a00 	vldr	s10, [r7]
 800d3f8:	ed96 6a00 	vldr	s12, [r6]
 800d3fc:	eee3 7a23 	vfma.f32	s15, s6, s7
 800d400:	3408      	adds	r4, #8
 800d402:	45a6      	cmp	lr, r4
 800d404:	f105 0520 	add.w	r5, r5, #32
 800d408:	eee4 7a24 	vfma.f32	s15, s8, s9
 800d40c:	eee5 7a25 	vfma.f32	s15, s10, s11
 800d410:	eee6 7a26 	vfma.f32	s15, s12, s13
 800d414:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d418:	d1a8      	bne.n	800d36c <ai_dict8_dot_array_f32+0x24>
 800d41a:	4449      	add	r1, r9
 800d41c:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800d420:	f01c 0c07 	ands.w	ip, ip, #7
 800d424:	d050      	beq.n	800d4c8 <ai_dict8_dot_array_f32+0x180>
 800d426:	780c      	ldrb	r4, [r1, #0]
 800d428:	edd3 6a00 	vldr	s13, [r3]
 800d42c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800d430:	edd4 7a00 	vldr	s15, [r4]
 800d434:	f1bc 0f01 	cmp.w	ip, #1
 800d438:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d43c:	d044      	beq.n	800d4c8 <ai_dict8_dot_array_f32+0x180>
 800d43e:	784c      	ldrb	r4, [r1, #1]
 800d440:	edd3 6a01 	vldr	s13, [r3, #4]
 800d444:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800d448:	edd4 7a00 	vldr	s15, [r4]
 800d44c:	f1bc 0f02 	cmp.w	ip, #2
 800d450:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d454:	d038      	beq.n	800d4c8 <ai_dict8_dot_array_f32+0x180>
 800d456:	788c      	ldrb	r4, [r1, #2]
 800d458:	edd3 6a02 	vldr	s13, [r3, #8]
 800d45c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800d460:	edd4 7a00 	vldr	s15, [r4]
 800d464:	f1bc 0f03 	cmp.w	ip, #3
 800d468:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d46c:	d02c      	beq.n	800d4c8 <ai_dict8_dot_array_f32+0x180>
 800d46e:	78cc      	ldrb	r4, [r1, #3]
 800d470:	edd3 6a03 	vldr	s13, [r3, #12]
 800d474:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800d478:	edd4 7a00 	vldr	s15, [r4]
 800d47c:	f1bc 0f04 	cmp.w	ip, #4
 800d480:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d484:	d020      	beq.n	800d4c8 <ai_dict8_dot_array_f32+0x180>
 800d486:	790c      	ldrb	r4, [r1, #4]
 800d488:	edd3 6a04 	vldr	s13, [r3, #16]
 800d48c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800d490:	edd4 7a00 	vldr	s15, [r4]
 800d494:	f1bc 0f05 	cmp.w	ip, #5
 800d498:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d49c:	d014      	beq.n	800d4c8 <ai_dict8_dot_array_f32+0x180>
 800d49e:	794c      	ldrb	r4, [r1, #5]
 800d4a0:	edd3 6a05 	vldr	s13, [r3, #20]
 800d4a4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800d4a8:	edd4 7a00 	vldr	s15, [r4]
 800d4ac:	f1bc 0f06 	cmp.w	ip, #6
 800d4b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d4b4:	d008      	beq.n	800d4c8 <ai_dict8_dot_array_f32+0x180>
 800d4b6:	7989      	ldrb	r1, [r1, #6]
 800d4b8:	edd3 7a06 	vldr	s15, [r3, #24]
 800d4bc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800d4c0:	edd2 6a00 	vldr	s13, [r2]
 800d4c4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d4c8:	edd0 7a00 	vldr	s15, [r0]
 800d4cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4d0:	ed80 7a00 	vstr	s14, [r0]
 800d4d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4d8:	ed9f 7a01 	vldr	s14, [pc, #4]	; 800d4e0 <ai_dict8_dot_array_f32+0x198>
 800d4dc:	e7a0      	b.n	800d420 <ai_dict8_dot_array_f32+0xd8>
 800d4de:	bf00      	nop
 800d4e0:	00000000 	.word	0x00000000

0800d4e4 <ai_dict4_dot_array_f32>:
 800d4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d4ea:	f027 0c01 	bic.w	ip, r7, #1
 800d4ee:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 800d4f2:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800d4f6:	f000 80ae 	beq.w	800d656 <ai_dict4_dot_array_f32+0x172>
 800d4fa:	1d0d      	adds	r5, r1, #4
 800d4fc:	ea4f 0988 	mov.w	r9, r8, lsl #2
 800d500:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800d65c <ai_dict4_dot_array_f32+0x178>
 800d504:	eb05 0e09 	add.w	lr, r5, r9
 800d508:	f103 0420 	add.w	r4, r3, #32
 800d50c:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 800d510:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 800d514:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 800d518:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 800d51c:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 800d520:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 800d524:	ed14 5a04 	vldr	s10, [r4, #-16]
 800d528:	ed54 5a03 	vldr	s11, [r4, #-12]
 800d52c:	ed14 6a02 	vldr	s12, [r4, #-8]
 800d530:	ed54 6a01 	vldr	s13, [r4, #-4]
 800d534:	f006 0a0f 	and.w	sl, r6, #15
 800d538:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800d53c:	edda 7a00 	vldr	s15, [sl]
 800d540:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 800d544:	0936      	lsrs	r6, r6, #4
 800d546:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d54a:	ee67 7a83 	vmul.f32	s15, s15, s6
 800d54e:	ed96 3a00 	vldr	s6, [r6]
 800d552:	ea4f 161b 	mov.w	r6, fp, lsr #4
 800d556:	eee3 7a23 	vfma.f32	s15, s6, s7
 800d55a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d55e:	f00b 0b0f 	and.w	fp, fp, #15
 800d562:	edd6 3a00 	vldr	s7, [r6]
 800d566:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 800d56a:	eee3 7a84 	vfma.f32	s15, s7, s8
 800d56e:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800d572:	3504      	adds	r5, #4
 800d574:	ed9b 4a00 	vldr	s8, [fp]
 800d578:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 800d57c:	eee4 7a24 	vfma.f32	s15, s8, s9
 800d580:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800d584:	f00a 0a0f 	and.w	sl, sl, #15
 800d588:	eddb 4a00 	vldr	s9, [fp]
 800d58c:	eee4 7a85 	vfma.f32	s15, s9, s10
 800d590:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800d594:	45ae      	cmp	lr, r5
 800d596:	ed9a 5a00 	vldr	s10, [sl]
 800d59a:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 800d59e:	eee5 7a25 	vfma.f32	s15, s10, s11
 800d5a2:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800d5a6:	f006 060f 	and.w	r6, r6, #15
 800d5aa:	edda 5a00 	vldr	s11, [sl]
 800d5ae:	eee5 7a86 	vfma.f32	s15, s11, s12
 800d5b2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d5b6:	f104 0420 	add.w	r4, r4, #32
 800d5ba:	ed96 6a00 	vldr	s12, [r6]
 800d5be:	eee6 7a26 	vfma.f32	s15, s12, s13
 800d5c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d5c6:	d1a1      	bne.n	800d50c <ai_dict4_dot_array_f32+0x28>
 800d5c8:	4449      	add	r1, r9
 800d5ca:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800d5ce:	459c      	cmp	ip, r3
 800d5d0:	d92d      	bls.n	800d62e <ai_dict4_dot_array_f32+0x14a>
 800d5d2:	f10c 0c07 	add.w	ip, ip, #7
 800d5d6:	f103 0508 	add.w	r5, r3, #8
 800d5da:	ebac 0c05 	sub.w	ip, ip, r5
 800d5de:	f02c 0407 	bic.w	r4, ip, #7
 800d5e2:	f103 0810 	add.w	r8, r3, #16
 800d5e6:	44a0      	add	r8, r4
 800d5e8:	f101 3eff 	add.w	lr, r1, #4294967295
 800d5ec:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 800d5f0:	ed15 6a01 	vldr	s12, [r5, #-4]
 800d5f4:	ed55 6a02 	vldr	s13, [r5, #-8]
 800d5f8:	f004 060f 	and.w	r6, r4, #15
 800d5fc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d600:	0924      	lsrs	r4, r4, #4
 800d602:	edd6 7a00 	vldr	s15, [r6]
 800d606:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800d60a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d60e:	ed94 6a00 	vldr	s12, [r4]
 800d612:	eee6 7a26 	vfma.f32	s15, s12, s13
 800d616:	3508      	adds	r5, #8
 800d618:	45a8      	cmp	r8, r5
 800d61a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d61e:	d1e5      	bne.n	800d5ec <ai_dict4_dot_array_f32+0x108>
 800d620:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800d624:	f10c 0c01 	add.w	ip, ip, #1
 800d628:	4461      	add	r1, ip
 800d62a:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800d62e:	07fc      	lsls	r4, r7, #31
 800d630:	d509      	bpl.n	800d646 <ai_dict4_dot_array_f32+0x162>
 800d632:	7809      	ldrb	r1, [r1, #0]
 800d634:	edd3 7a00 	vldr	s15, [r3]
 800d638:	090b      	lsrs	r3, r1, #4
 800d63a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d63e:	edd2 6a00 	vldr	s13, [r2]
 800d642:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d646:	edd0 7a00 	vldr	s15, [r0]
 800d64a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d64e:	ed80 7a00 	vstr	s14, [r0]
 800d652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d656:	ed9f 7a01 	vldr	s14, [pc, #4]	; 800d65c <ai_dict4_dot_array_f32+0x178>
 800d65a:	e7b8      	b.n	800d5ce <ai_dict4_dot_array_f32+0xea>
 800d65c:	00000000 	.word	0x00000000

0800d660 <ai_dict_decompress_f32>:
 800d660:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d664:	9f08      	ldr	r7, [sp, #32]
 800d666:	2b04      	cmp	r3, #4
 800d668:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800d66c:	d00e      	beq.n	800d68c <ai_dict_decompress_f32+0x2c>
 800d66e:	2b08      	cmp	r3, #8
 800d670:	d10a      	bne.n	800d688 <ai_dict_decompress_f32+0x28>
 800d672:	42b8      	cmp	r0, r7
 800d674:	d208      	bcs.n	800d688 <ai_dict_decompress_f32+0x28>
 800d676:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d67a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	f840 3b04 	str.w	r3, [r0], #4
 800d684:	4287      	cmp	r7, r0
 800d686:	d8f6      	bhi.n	800d676 <ai_dict_decompress_f32+0x16>
 800d688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d68c:	9b07      	ldr	r3, [sp, #28]
 800d68e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 800d692:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 800d696:	f10c 38ff 	add.w	r8, ip, #4294967295
 800d69a:	f003 0e01 	and.w	lr, r3, #1
 800d69e:	42b8      	cmp	r0, r7
 800d6a0:	d2f2      	bcs.n	800d688 <ai_dict_decompress_f32+0x28>
 800d6a2:	f1bc 0f00 	cmp.w	ip, #0
 800d6a6:	d01a      	beq.n	800d6de <ai_dict_decompress_f32+0x7e>
 800d6a8:	f100 0508 	add.w	r5, r0, #8
 800d6ac:	1e4c      	subs	r4, r1, #1
 800d6ae:	eb01 0608 	add.w	r6, r1, r8
 800d6b2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d6b6:	091b      	lsrs	r3, r3, #4
 800d6b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d6bc:	42a6      	cmp	r6, r4
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	f845 3c08 	str.w	r3, [r5, #-8]
 800d6c4:	7823      	ldrb	r3, [r4, #0]
 800d6c6:	f003 030f 	and.w	r3, r3, #15
 800d6ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d6ce:	f105 0508 	add.w	r5, r5, #8
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	f845 3c0c 	str.w	r3, [r5, #-12]
 800d6d8:	d1eb      	bne.n	800d6b2 <ai_dict_decompress_f32+0x52>
 800d6da:	4461      	add	r1, ip
 800d6dc:	4448      	add	r0, r9
 800d6de:	f1be 0f00 	cmp.w	lr, #0
 800d6e2:	d103      	bne.n	800d6ec <ai_dict_decompress_f32+0x8c>
 800d6e4:	4287      	cmp	r7, r0
 800d6e6:	d8dc      	bhi.n	800d6a2 <ai_dict_decompress_f32+0x42>
 800d6e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d6ec:	780b      	ldrb	r3, [r1, #0]
 800d6ee:	091b      	lsrs	r3, r3, #4
 800d6f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d6f4:	3101      	adds	r1, #1
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	6003      	str	r3, [r0, #0]
 800d6fa:	3004      	adds	r0, #4
 800d6fc:	e7cf      	b.n	800d69e <ai_dict_decompress_f32+0x3e>
 800d6fe:	bf00      	nop

0800d700 <forward_conv2d_nl_pool>:
 800d700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d704:	ed2d 8b10 	vpush	{d8-d15}
 800d708:	b0e1      	sub	sp, #388	; 0x184
 800d70a:	6943      	ldr	r3, [r0, #20]
 800d70c:	af0a      	add	r7, sp, #40	; 0x28
 800d70e:	881a      	ldrh	r2, [r3, #0]
 800d710:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800d714:	2a00      	cmp	r2, #0
 800d716:	f001 8106 	beq.w	800e926 <forward_conv2d_nl_pool+0x1226>
 800d71a:	685c      	ldr	r4, [r3, #4]
 800d71c:	6862      	ldr	r2, [r4, #4]
 800d71e:	2a00      	cmp	r2, #0
 800d720:	f001 80fe 	beq.w	800e920 <forward_conv2d_nl_pool+0x1220>
 800d724:	f8d2 c000 	ldr.w	ip, [r2]
 800d728:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800d72c:	2a01      	cmp	r2, #1
 800d72e:	f241 80f4 	bls.w	800e91a <forward_conv2d_nl_pool+0x121a>
 800d732:	6922      	ldr	r2, [r4, #16]
 800d734:	2a00      	cmp	r2, #0
 800d736:	f001 80eb 	beq.w	800e910 <forward_conv2d_nl_pool+0x1210>
 800d73a:	f8d2 9000 	ldr.w	r9, [r2]
 800d73e:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800d742:	2a02      	cmp	r2, #2
 800d744:	f001 80e9 	beq.w	800e91a <forward_conv2d_nl_pool+0x121a>
 800d748:	69e6      	ldr	r6, [r4, #28]
 800d74a:	2e00      	cmp	r6, #0
 800d74c:	f001 80d9 	beq.w	800e902 <forward_conv2d_nl_pool+0x1202>
 800d750:	f114 0218 	adds.w	r2, r4, #24
 800d754:	6835      	ldr	r5, [r6, #0]
 800d756:	d004      	beq.n	800d762 <forward_conv2d_nl_pool+0x62>
 800d758:	8b22      	ldrh	r2, [r4, #24]
 800d75a:	2a01      	cmp	r2, #1
 800d75c:	f241 80e6 	bls.w	800e92c <forward_conv2d_nl_pool+0x122c>
 800d760:	6872      	ldr	r2, [r6, #4]
 800d762:	68b4      	ldr	r4, [r6, #8]
 800d764:	f8dc b018 	ldr.w	fp, [ip, #24]
 800d768:	f8dc 800c 	ldr.w	r8, [ip, #12]
 800d76c:	f8db 1008 	ldr.w	r1, [fp, #8]
 800d770:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800d774:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d778:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 800d77c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
 800d780:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800d784:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 800d788:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800d78c:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 800d790:	f8de 1004 	ldr.w	r1, [lr, #4]
 800d794:	6b86      	ldr	r6, [r0, #56]	; 0x38
 800d796:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 800d79a:	f8de 100c 	ldr.w	r1, [lr, #12]
 800d79e:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 800d7a2:	f8de 1008 	ldr.w	r1, [lr, #8]
 800d7a6:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800d7aa:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 800d7ae:	6831      	ldr	r1, [r6, #0]
 800d7b0:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
 800d7b4:	6871      	ldr	r1, [r6, #4]
 800d7b6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 800d7ba:	f8da 1004 	ldr.w	r1, [sl, #4]
 800d7be:	f8c7 1154 	str.w	r1, [r7, #340]	; 0x154
 800d7c2:	f8da 1008 	ldr.w	r1, [sl, #8]
 800d7c6:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 800d7ca:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800d7cc:	f8d5 c018 	ldr.w	ip, [r5, #24]
 800d7d0:	6809      	ldr	r1, [r1, #0]
 800d7d2:	68b6      	ldr	r6, [r6, #8]
 800d7d4:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 800d7d8:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800d7da:	6849      	ldr	r1, [r1, #4]
 800d7dc:	6479      	str	r1, [r7, #68]	; 0x44
 800d7de:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800d7e2:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 800d7e6:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800d7e8:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 800d7ec:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800d7ee:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 800d7f2:	6981      	ldr	r1, [r0, #24]
 800d7f4:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
 800d7f8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800d7fa:	64f9      	str	r1, [r7, #76]	; 0x4c
 800d7fc:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800d7fe:	64b9      	str	r1, [r7, #72]	; 0x48
 800d800:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800d802:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 800d806:	e9d0 ab0b 	ldrd	sl, fp, [r0, #44]	; 0x2c
 800d80a:	2a00      	cmp	r2, #0
 800d80c:	f001 806c 	beq.w	800e8e8 <forward_conv2d_nl_pool+0x11e8>
 800d810:	6992      	ldr	r2, [r2, #24]
 800d812:	6892      	ldr	r2, [r2, #8]
 800d814:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800d818:	4680      	mov	r8, r0
 800d81a:	69c2      	ldr	r2, [r0, #28]
 800d81c:	2c00      	cmp	r4, #0
 800d81e:	f001 8058 	beq.w	800e8d2 <forward_conv2d_nl_pool+0x11d2>
 800d822:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 800d826:	6892      	ldr	r2, [r2, #8]
 800d828:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d82c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d830:	689b      	ldr	r3, [r3, #8]
 800d832:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d836:	f001 fd6d 	bl	800f314 <ai_array_get_byte_size>
 800d83a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800d83e:	f8d5 c018 	ldr.w	ip, [r5, #24]
 800d842:	881a      	ldrh	r2, [r3, #0]
 800d844:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
 800d848:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800d84c:	f8b7 0144 	ldrh.w	r0, [r7, #324]	; 0x144
 800d850:	f8d8 1054 	ldr.w	r1, [r8, #84]	; 0x54
 800d854:	6439      	str	r1, [r7, #64]	; 0x40
 800d856:	fa10 f586 	uxtah	r5, r0, r6
 800d85a:	f8dc 1000 	ldr.w	r1, [ip]
 800d85e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 800d862:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800d866:	f8d8 2020 	ldr.w	r2, [r8, #32]
 800d86a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800d86e:	f3c1 16c6 	ubfx	r6, r1, #7, #7
 800d872:	1e44      	subs	r4, r0, #1
 800d874:	f3c1 5041 	ubfx	r0, r1, #21, #2
 800d878:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d87c:	fa1f f28b 	uxth.w	r2, fp
 800d880:	eb05 0e01 	add.w	lr, r5, r1
 800d884:	f8d7 5120 	ldr.w	r5, [r7, #288]	; 0x120
 800d888:	f8dc 1000 	ldr.w	r1, [ip]
 800d88c:	3a01      	subs	r2, #1
 800d88e:	fb04 5402 	mla	r4, r4, r2, r5
 800d892:	fa1f f28a 	uxth.w	r2, sl
 800d896:	f8c7 408c 	str.w	r4, [r7, #140]	; 0x8c
 800d89a:	1e54      	subs	r4, r2, #1
 800d89c:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 800d8a0:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 800d8a4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d8a8:	f8d7 5154 	ldr.w	r5, [r7, #340]	; 0x154
 800d8ac:	fa46 f000 	asr.w	r0, r6, r0
 800d8b0:	f3c1 4643 	ubfx	r6, r1, #17, #4
 800d8b4:	f8b7 114c 	ldrh.w	r1, [r7, #332]	; 0x14c
 800d8b8:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 800d8bc:	ebae 0202 	sub.w	r2, lr, r2
 800d8c0:	fbb2 f2f1 	udiv	r2, r2, r1
 800d8c4:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 800d8c8:	3d01      	subs	r5, #1
 800d8ca:	fb05 1104 	mla	r1, r5, r4, r1
 800d8ce:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800d8d2:	1c51      	adds	r1, r2, #1
 800d8d4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800d8d8:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800d8dc:	497c      	ldr	r1, [pc, #496]	; (800dad0 <forward_conv2d_nl_pool+0x3d0>)
 800d8de:	4614      	mov	r4, r2
 800d8e0:	2a00      	cmp	r2, #0
 800d8e2:	bf08      	it	eq
 800d8e4:	460c      	moveq	r4, r1
 800d8e6:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 800d8ea:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
 800d8ee:	2e04      	cmp	r6, #4
 800d8f0:	b280      	uxth	r0, r0
 800d8f2:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 800d8f6:	f000 8382 	beq.w	800dffe <forward_conv2d_nl_pool+0x8fe>
 800d8fa:	2e08      	cmp	r6, #8
 800d8fc:	f000 837f 	beq.w	800dffe <forward_conv2d_nl_pool+0x8fe>
 800d900:	f8d9 2018 	ldr.w	r2, [r9, #24]
 800d904:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800d908:	f9b7 2134 	ldrsh.w	r2, [r7, #308]	; 0x134
 800d90c:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 800d910:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800d914:	2a03      	cmp	r2, #3
 800d916:	f241 8000 	bls.w	800e91a <forward_conv2d_nl_pool+0x121a>
 800d91a:	685b      	ldr	r3, [r3, #4]
 800d91c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d91e:	2b00      	cmp	r3, #0
 800d920:	f000 836b 	beq.w	800dffa <forward_conv2d_nl_pool+0x8fa>
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800d92a:	68da      	ldr	r2, [r3, #12]
 800d92c:	699b      	ldr	r3, [r3, #24]
 800d92e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800d932:	6899      	ldr	r1, [r3, #8]
 800d934:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 800d938:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800d93c:	6896      	ldr	r6, [r2, #8]
 800d93e:	f8c7 6144 	str.w	r6, [r7, #324]	; 0x144
 800d942:	4249      	negs	r1, r1
 800d944:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 800d948:	2800      	cmp	r0, #0
 800d94a:	f000 82e1 	beq.w	800df10 <forward_conv2d_nl_pool+0x810>
 800d94e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800d952:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800d956:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800d95a:	f8d7 50c4 	ldr.w	r5, [r7, #196]	; 0xc4
 800d95e:	ed9f 8a5d 	vldr	s16, [pc, #372]	; 800dad4 <forward_conv2d_nl_pool+0x3d4>
 800d962:	fb03 f200 	mul.w	r2, r3, r0
 800d966:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800d96a:	008c      	lsls	r4, r1, #2
 800d96c:	fb04 f000 	mul.w	r0, r4, r0
 800d970:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 800d974:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 800d978:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 800d97c:	fb01 fc02 	mul.w	ip, r1, r2
 800d980:	00a2      	lsls	r2, r4, #2
 800d982:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 800d986:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d98a:	f8c7 c080 	str.w	ip, [r7, #128]	; 0x80
 800d98e:	00ab      	lsls	r3, r5, #2
 800d990:	4694      	mov	ip, r2
 800d992:	fb0c f204 	mul.w	r2, ip, r4
 800d996:	fb04 f303 	mul.w	r3, r4, r3
 800d99a:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 800d99e:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 800d9a2:	00a4      	lsls	r4, r4, #2
 800d9a4:	f8c7 40ac 	str.w	r4, [r7, #172]	; 0xac
 800d9a8:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 800d9ac:	f04f 0c00 	mov.w	ip, #0
 800d9b0:	fa0f f58a 	sxth.w	r5, sl
 800d9b4:	f8c7 c0f0 	str.w	ip, [r7, #240]	; 0xf0
 800d9b8:	46a4      	mov	ip, r4
 800d9ba:	f8d7 4120 	ldr.w	r4, [r7, #288]	; 0x120
 800d9be:	f8c7 50f4 	str.w	r5, [r7, #244]	; 0xf4
 800d9c2:	fa0f f58b 	sxth.w	r5, fp
 800d9c6:	f8c7 5104 	str.w	r5, [r7, #260]	; 0x104
 800d9ca:	fb0c fc04 	mul.w	ip, ip, r4
 800d9ce:	f8c7 c038 	str.w	ip, [r7, #56]	; 0x38
 800d9d2:	fb06 fc03 	mul.w	ip, r6, r3
 800d9d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9da:	f8c7 c054 	str.w	ip, [r7, #84]	; 0x54
 800d9de:	4240      	negs	r0, r0
 800d9e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800d9e4:	469c      	mov	ip, r3
 800d9e6:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 800d9ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9ee:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 800d9f2:	f8b7 5130 	ldrh.w	r5, [r7, #304]	; 0x130
 800d9f6:	f8c7 50f8 	str.w	r5, [r7, #248]	; 0xf8
 800d9fa:	fb00 f303 	mul.w	r3, r0, r3
 800d9fe:	460d      	mov	r5, r1
 800da00:	fb0c fc04 	mul.w	ip, ip, r4
 800da04:	62bb      	str	r3, [r7, #40]	; 0x28
 800da06:	fb04 f305 	mul.w	r3, r4, r5
 800da0a:	f8c7 c07c 	str.w	ip, [r7, #124]	; 0x7c
 800da0e:	f8d7 50f8 	ldr.w	r5, [r7, #248]	; 0xf8
 800da12:	627b      	str	r3, [r7, #36]	; 0x24
 800da14:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800da18:	46a6      	mov	lr, r4
 800da1a:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 800da1e:	fb05 f503 	mul.w	r5, r5, r3
 800da22:	667d      	str	r5, [r7, #100]	; 0x64
 800da24:	4625      	mov	r5, r4
 800da26:	fb05 f503 	mul.w	r5, r5, r3
 800da2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800da2e:	66bd      	str	r5, [r7, #104]	; 0x68
 800da30:	fb00 f101 	mul.w	r1, r0, r1
 800da34:	fb03 f306 	mul.w	r3, r3, r6
 800da38:	617b      	str	r3, [r7, #20]
 800da3a:	008b      	lsls	r3, r1, #2
 800da3c:	637b      	str	r3, [r7, #52]	; 0x34
 800da3e:	0093      	lsls	r3, r2, #2
 800da40:	653b      	str	r3, [r7, #80]	; 0x50
 800da42:	0083      	lsls	r3, r0, #2
 800da44:	623b      	str	r3, [r7, #32]
 800da46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800da4a:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800da4e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800da52:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800da56:	2400      	movs	r4, #0
 800da58:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da5a:	4603      	mov	r3, r0
 800da5c:	fb03 f301 	mul.w	r3, r3, r1
 800da60:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 800da64:	f8d7 40cc 	ldr.w	r4, [r7, #204]	; 0xcc
 800da68:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800da6c:	00d1      	lsls	r1, r2, #3
 800da6e:	0113      	lsls	r3, r2, #4
 800da70:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 800da74:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800da78:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800da7c:	fb00 f004 	mul.w	r0, r0, r4
 800da80:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800da84:	66f8      	str	r0, [r7, #108]	; 0x6c
 800da86:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800da8a:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 800da8e:	469a      	mov	sl, r3
 800da90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800da94:	2b00      	cmp	r3, #0
 800da96:	f340 81d5 	ble.w	800de44 <forward_conv2d_nl_pool+0x744>
 800da9a:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800da9e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800daa2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800daa6:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800daaa:	2900      	cmp	r1, #0
 800daac:	441a      	add	r2, r3
 800daae:	bfb4      	ite	lt
 800dab0:	2100      	movlt	r1, #0
 800dab2:	2300      	movge	r3, #0
 800dab4:	4282      	cmp	r2, r0
 800dab6:	bf28      	it	cs
 800dab8:	4602      	movcs	r2, r0
 800daba:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800dabe:	2801      	cmp	r0, #1
 800dac0:	f000 840c 	beq.w	800e2dc <forward_conv2d_nl_pool+0xbdc>
 800dac4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800dac8:	4281      	cmp	r1, r0
 800daca:	f000 82c6 	beq.w	800e05a <forward_conv2d_nl_pool+0x95a>
 800dace:	e003      	b.n	800dad8 <forward_conv2d_nl_pool+0x3d8>
 800dad0:	0800d345 	.word	0x0800d345
 800dad4:	00000000 	.word	0x00000000
 800dad8:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800dadc:	2900      	cmp	r1, #0
 800dade:	f000 81a4 	beq.w	800de2a <forward_conv2d_nl_pool+0x72a>
 800dae2:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 800dae6:	fb93 f1f0 	sdiv	r1, r3, r0
 800daea:	fb00 3111 	mls	r1, r0, r1, r3
 800daee:	1a41      	subs	r1, r0, r1
 800daf0:	1ad2      	subs	r2, r2, r3
 800daf2:	fb91 f5f0 	sdiv	r5, r1, r0
 800daf6:	fb00 1515 	mls	r5, r0, r5, r1
 800dafa:	1b52      	subs	r2, r2, r5
 800dafc:	4601      	mov	r1, r0
 800dafe:	4402      	add	r2, r0
 800db00:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800db04:	f8d7 6120 	ldr.w	r6, [r7, #288]	; 0x120
 800db08:	f8c7 a010 	str.w	sl, [r7, #16]
 800db0c:	4604      	mov	r4, r0
 800db0e:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800db12:	fbb4 f4f0 	udiv	r4, r4, r0
 800db16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db18:	f8c7 b018 	str.w	fp, [r7, #24]
 800db1c:	3a01      	subs	r2, #1
 800db1e:	fb92 f8f1 	sdiv	r8, r2, r1
 800db22:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800db26:	eba0 0c04 	sub.w	ip, r0, r4
 800db2a:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800db2e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800db32:	4614      	mov	r4, r2
 800db34:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800db38:	fbb4 f2f2 	udiv	r2, r4, r2
 800db3c:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800db40:	663a      	str	r2, [r7, #96]	; 0x60
 800db42:	441d      	add	r5, r3
 800db44:	fb0e f000 	mul.w	r0, lr, r0
 800db48:	440b      	add	r3, r1
 800db4a:	eba6 0608 	sub.w	r6, r6, r8
 800db4e:	fb04 f505 	mul.w	r5, r4, r5
 800db52:	3b01      	subs	r3, #1
 800db54:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 800db58:	fb93 f3f4 	sdiv	r3, r3, r4
 800db5c:	fb00 f406 	mul.w	r4, r0, r6
 800db60:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800db64:	677d      	str	r5, [r7, #116]	; 0x74
 800db66:	0091      	lsls	r1, r2, #2
 800db68:	fb00 f003 	mul.w	r0, r0, r3
 800db6c:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 800db70:	65f8      	str	r0, [r7, #92]	; 0x5c
 800db72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800db76:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 800db7a:	f8c7 40e4 	str.w	r4, [r7, #228]	; 0xe4
 800db7e:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 800db82:	1ac3      	subs	r3, r0, r3
 800db84:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 800db88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800db8c:	008b      	lsls	r3, r1, #2
 800db8e:	633b      	str	r3, [r7, #48]	; 0x30
 800db90:	00d3      	lsls	r3, r2, #3
 800db92:	61fb      	str	r3, [r7, #28]
 800db94:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800db98:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800db9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dba0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800dba4:	2300      	movs	r3, #0
 800dba6:	ea4f 098c 	mov.w	r9, ip, lsl #2
 800dbaa:	67bb      	str	r3, [r7, #120]	; 0x78
 800dbac:	46c2      	mov	sl, r8
 800dbae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dbb2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800dbb6:	eb03 0c02 	add.w	ip, r3, r2
 800dbba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	f2c0 811f 	blt.w	800de02 <forward_conv2d_nl_pool+0x702>
 800dbc4:	2000      	movs	r0, #0
 800dbc6:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 800dbc8:	f8d7 80f4 	ldr.w	r8, [r7, #244]	; 0xf4
 800dbcc:	4605      	mov	r5, r0
 800dbce:	4606      	mov	r6, r0
 800dbd0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800dbd4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800dbd8:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800dbdc:	4413      	add	r3, r2
 800dbde:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800dbe2:	440a      	add	r2, r1
 800dbe4:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800dbe8:	428b      	cmp	r3, r1
 800dbea:	bf94      	ite	ls
 800dbec:	ebc6 0303 	rsbls	r3, r6, r3
 800dbf0:	ebc6 0301 	rsbhi	r3, r6, r1
 800dbf4:	4415      	add	r5, r2
 800dbf6:	1a1b      	subs	r3, r3, r0
 800dbf8:	00a4      	lsls	r4, r4, #2
 800dbfa:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800dbfe:	f8d7 60c0 	ldr.w	r6, [r7, #192]	; 0xc0
 800dc02:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800dc06:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
 800dc08:	4602      	mov	r2, r0
 800dc0a:	2800      	cmp	r0, #0
 800dc0c:	bf08      	it	eq
 800dc0e:	4662      	moveq	r2, ip
 800dc10:	f108 31ff 	add.w	r1, r8, #4294967295
 800dc14:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800dc18:	fb91 f1f0 	sdiv	r1, r1, r0
 800dc1c:	4429      	add	r1, r5
 800dc1e:	f8d7 5128 	ldr.w	r5, [r7, #296]	; 0x128
 800dc22:	fb0e 5501 	mla	r5, lr, r1, r5
 800dc26:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800dc2a:	4403      	add	r3, r0
 800dc2c:	fb01 6104 	mla	r1, r1, r4, r6
 800dc30:	3b01      	subs	r3, #1
 800dc32:	fb93 f6f0 	sdiv	r6, r3, r0
 800dc36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc38:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 800dc3c:	fb06 3110 	mls	r1, r6, r0, r3
 800dc40:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800dc44:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800dc48:	4562      	cmp	r2, ip
 800dc4a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800dc4e:	bf08      	it	eq
 800dc50:	eeb0 6a48 	vmoveq.f32	s12, s16
 800dc54:	1b9b      	subs	r3, r3, r6
 800dc56:	2800      	cmp	r0, #0
 800dc58:	d070      	beq.n	800dd3c <forward_conv2d_nl_pool+0x63c>
 800dc5a:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800dc5e:	fb0e f803 	mul.w	r8, lr, r3
 800dc62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc64:	fb01 fb00 	mul.w	fp, r1, r0
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d067      	beq.n	800dd3c <forward_conv2d_nl_pool+0x63c>
 800dc6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dc70:	18d3      	adds	r3, r2, r3
 800dc72:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800dc76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dc7a:	1a9b      	subs	r3, r3, r2
 800dc7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dc7e:	2300      	movs	r3, #0
 800dc80:	673b      	str	r3, [r7, #112]	; 0x70
 800dc82:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800dc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc88:	4413      	add	r3, r2
 800dc8a:	65bb      	str	r3, [r7, #88]	; 0x58
 800dc8c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800dc90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc92:	4413      	add	r3, r2
 800dc94:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800dc98:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800dc9c:	ecf3 7a01 	vldmia	r3!, {s15}
 800dca0:	f1ba 0f00 	cmp.w	sl, #0
 800dca4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800dca8:	ee67 7a86 	vmul.f32	s15, s15, s12
 800dcac:	f340 80a7 	ble.w	800ddfe <forward_conv2d_nl_pool+0x6fe>
 800dcb0:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800dcb4:	f04f 0c00 	mov.w	ip, #0
 800dcb8:	2e00      	cmp	r6, #0
 800dcba:	dd19      	ble.n	800dcf0 <forward_conv2d_nl_pool+0x5f0>
 800dcbc:	2100      	movs	r1, #0
 800dcbe:	eb00 040e 	add.w	r4, r0, lr
 800dcc2:	4284      	cmp	r4, r0
 800dcc4:	d910      	bls.n	800dce8 <forward_conv2d_nl_pool+0x5e8>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	462a      	mov	r2, r5
 800dcca:	ecb3 7a01 	vldmia	r3!, {s14}
 800dcce:	ecf2 6a01 	vldmia	r2!, {s13}
 800dcd2:	429c      	cmp	r4, r3
 800dcd4:	eee6 7a87 	vfma.f32	s15, s13, s14
 800dcd8:	d8f7      	bhi.n	800dcca <forward_conv2d_nl_pool+0x5ca>
 800dcda:	43c3      	mvns	r3, r0
 800dcdc:	441c      	add	r4, r3
 800dcde:	f024 0403 	bic.w	r4, r4, #3
 800dce2:	3404      	adds	r4, #4
 800dce4:	4425      	add	r5, r4
 800dce6:	4420      	add	r0, r4
 800dce8:	3101      	adds	r1, #1
 800dcea:	428e      	cmp	r6, r1
 800dcec:	4448      	add	r0, r9
 800dcee:	d1e6      	bne.n	800dcbe <forward_conv2d_nl_pool+0x5be>
 800dcf0:	f10c 0c01 	add.w	ip, ip, #1
 800dcf4:	45e2      	cmp	sl, ip
 800dcf6:	4458      	add	r0, fp
 800dcf8:	4445      	add	r5, r8
 800dcfa:	d1dd      	bne.n	800dcb8 <forward_conv2d_nl_pool+0x5b8>
 800dcfc:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800dd00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd04:	441d      	add	r5, r3
 800dd06:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800dd0a:	ece3 7a01 	vstmia	r3!, {s15}
 800dd0e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800dd12:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dd16:	4293      	cmp	r3, r2
 800dd18:	d1be      	bne.n	800dc98 <forward_conv2d_nl_pool+0x598>
 800dd1a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800dd1e:	69f9      	ldr	r1, [r7, #28]
 800dd20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dd22:	4472      	add	r2, lr
 800dd24:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800dd28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dd2a:	1a52      	subs	r2, r2, r1
 800dd2c:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 800dd30:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800dd34:	3301      	adds	r3, #1
 800dd36:	429a      	cmp	r2, r3
 800dd38:	673b      	str	r3, [r7, #112]	; 0x70
 800dd3a:	d1a2      	bne.n	800dc82 <forward_conv2d_nl_pool+0x582>
 800dd3c:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800dd40:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800dd44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dd46:	4608      	mov	r0, r1
 800dd48:	4410      	add	r0, r2
 800dd4a:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800dd4e:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
 800dd52:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800dd56:	4401      	add	r1, r0
 800dd58:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800dd5c:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800dd60:	1a8a      	subs	r2, r1, r2
 800dd62:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800dd66:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800dd6a:	3301      	adds	r3, #1
 800dd6c:	429a      	cmp	r2, r3
 800dd6e:	67bb      	str	r3, [r7, #120]	; 0x78
 800dd70:	f47f af1d 	bne.w	800dbae <forward_conv2d_nl_pool+0x4ae>
 800dd74:	f8d7 b018 	ldr.w	fp, [r7, #24]
 800dd78:	f8d7 a010 	ldr.w	sl, [r7, #16]
 800dd7c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800dd80:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800dd84:	699b      	ldr	r3, [r3, #24]
 800dd86:	2a00      	cmp	r2, #0
 800dd88:	f000 8165 	beq.w	800e056 <forward_conv2d_nl_pool+0x956>
 800dd8c:	2400      	movs	r4, #0
 800dd8e:	f8d7 5098 	ldr.w	r5, [r7, #152]	; 0x98
 800dd92:	f8d7 614c 	ldr.w	r6, [r7, #332]	; 0x14c
 800dd96:	f8d7 8134 	ldr.w	r8, [r7, #308]	; 0x134
 800dd9a:	f8d7 90e0 	ldr.w	r9, [r7, #224]	; 0xe0
 800dd9e:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 800dda2:	609e      	str	r6, [r3, #8]
 800dda4:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800dda8:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800ddac:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 800ddb0:	462b      	mov	r3, r5
 800ddb2:	4608      	mov	r0, r1
 800ddb4:	47a0      	blx	r4
 800ddb6:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800ddba:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800ddbe:	6859      	ldr	r1, [r3, #4]
 800ddc0:	68da      	ldr	r2, [r3, #12]
 800ddc2:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 800ddc6:	4405      	add	r5, r0
 800ddc8:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800ddcc:	0089      	lsls	r1, r1, #2
 800ddce:	4406      	add	r6, r0
 800ddd0:	eba5 0c09 	sub.w	ip, r5, r9
 800ddd4:	1850      	adds	r0, r2, r1
 800ddd6:	45a4      	cmp	ip, r4
 800ddd8:	bfa8      	it	ge
 800ddda:	464d      	movge	r5, r9
 800dddc:	4286      	cmp	r6, r0
 800ddde:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800dde2:	bf28      	it	cs
 800dde4:	1a76      	subcs	r6, r6, r1
 800dde6:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800ddea:	3001      	adds	r0, #1
 800ddec:	4281      	cmp	r1, r0
 800ddee:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
 800ddf2:	d1d6      	bne.n	800dda2 <forward_conv2d_nl_pool+0x6a2>
 800ddf4:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
 800ddf8:	f8c7 614c 	str.w	r6, [r7, #332]	; 0x14c
 800ddfc:	e019      	b.n	800de32 <forward_conv2d_nl_pool+0x732>
 800ddfe:	461a      	mov	r2, r3
 800de00:	e77e      	b.n	800dd00 <forward_conv2d_nl_pool+0x600>
 800de02:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800de06:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800de0a:	fb90 f3f2 	sdiv	r3, r0, r2
 800de0e:	fb02 0313 	mls	r3, r2, r3, r0
 800de12:	1ad3      	subs	r3, r2, r3
 800de14:	4605      	mov	r5, r0
 800de16:	fb93 f0f2 	sdiv	r0, r3, r2
 800de1a:	fb02 3010 	mls	r0, r2, r0, r3
 800de1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800de20:	462e      	mov	r6, r5
 800de22:	18c4      	adds	r4, r0, r3
 800de24:	eb02 0805 	add.w	r8, r2, r5
 800de28:	e6d2      	b.n	800dbd0 <forward_conv2d_nl_pool+0x4d0>
 800de2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800de2e:	699b      	ldr	r3, [r3, #24]
 800de30:	68da      	ldr	r2, [r3, #12]
 800de32:	609a      	str	r2, [r3, #8]
 800de34:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800de38:	3301      	adds	r3, #1
 800de3a:	b21b      	sxth	r3, r3
 800de3c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800de40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800de44:	3b01      	subs	r3, #1
 800de46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800de4a:	f100 8089 	bmi.w	800df60 <forward_conv2d_nl_pool+0x860>
 800de4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800de52:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 800de56:	42a3      	cmp	r3, r4
 800de58:	d867      	bhi.n	800df2a <forward_conv2d_nl_pool+0x82a>
 800de5a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800de5e:	b29b      	uxth	r3, r3
 800de60:	6990      	ldr	r0, [r2, #24]
 800de62:	9301      	str	r3, [sp, #4]
 800de64:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800de68:	f8d7 80c4 	ldr.w	r8, [r7, #196]	; 0xc4
 800de6c:	f8b7 5094 	ldrh.w	r5, [r7, #148]	; 0x94
 800de70:	1a9b      	subs	r3, r3, r2
 800de72:	fa1f f188 	uxth.w	r1, r8
 800de76:	b29a      	uxth	r2, r3
 800de78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800de7c:	9308      	str	r3, [sp, #32]
 800de7e:	9105      	str	r1, [sp, #20]
 800de80:	2601      	movs	r6, #1
 800de82:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800de86:	9607      	str	r6, [sp, #28]
 800de88:	f8d7 6084 	ldr.w	r6, [r7, #132]	; 0x84
 800de8c:	9506      	str	r5, [sp, #24]
 800de8e:	f8b7 5044 	ldrh.w	r5, [r7, #68]	; 0x44
 800de92:	9304      	str	r3, [sp, #16]
 800de94:	1a64      	subs	r4, r4, r1
 800de96:	b2b1      	uxth	r1, r6
 800de98:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800de9c:	9300      	str	r3, [sp, #0]
 800de9e:	e9cd 5102 	strd	r5, r1, [sp, #8]
 800dea2:	b224      	sxth	r4, r4
 800dea4:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 800dea8:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 800deac:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800deb0:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800deb2:	47a0      	blx	r4
 800deb4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800deb8:	f8d7 511c 	ldr.w	r5, [r7, #284]	; 0x11c
 800debc:	688a      	ldr	r2, [r1, #8]
 800debe:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 800dec0:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800dec4:	fa0f f388 	sxth.w	r3, r8
 800dec8:	1af3      	subs	r3, r6, r3
 800deca:	4422      	add	r2, r4
 800decc:	462e      	mov	r6, r5
 800dece:	f8d7 40cc 	ldr.w	r4, [r7, #204]	; 0xcc
 800ded2:	f8d7 5118 	ldr.w	r5, [r7, #280]	; 0x118
 800ded6:	608a      	str	r2, [r1, #8]
 800ded8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800dedc:	4426      	add	r6, r4
 800dede:	b21b      	sxth	r3, r3
 800dee0:	1b2c      	subs	r4, r5, r4
 800dee2:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 800dee6:	6efd      	ldr	r5, [r7, #108]	; 0x6c
 800dee8:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 800deec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800def0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800def4:	f8c7 611c 	str.w	r6, [r7, #284]	; 0x11c
 800def8:	3001      	adds	r0, #1
 800defa:	442c      	add	r4, r5
 800defc:	4283      	cmp	r3, r0
 800defe:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 800df02:	f8c7 4114 	str.w	r4, [r7, #276]	; 0x114
 800df06:	f63f adc3 	bhi.w	800da90 <forward_conv2d_nl_pool+0x390>
 800df0a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800df0e:	699b      	ldr	r3, [r3, #24]
 800df10:	68da      	ldr	r2, [r3, #12]
 800df12:	609a      	str	r2, [r3, #8]
 800df14:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800df18:	68d3      	ldr	r3, [r2, #12]
 800df1a:	6093      	str	r3, [r2, #8]
 800df1c:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 800df20:	46bd      	mov	sp, r7
 800df22:	ecbd 8b10 	vpop	{d8-d15}
 800df26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df2a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800df2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800df32:	4611      	mov	r1, r2
 800df34:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800df38:	4419      	add	r1, r3
 800df3a:	1ad3      	subs	r3, r2, r3
 800df3c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800df40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800df42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df46:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 800df4a:	4413      	add	r3, r2
 800df4c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800df50:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800df54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800df58:	4293      	cmp	r3, r2
 800df5a:	f63f ad99 	bhi.w	800da90 <forward_conv2d_nl_pool+0x390>
 800df5e:	e7d4      	b.n	800df0a <forward_conv2d_nl_pool+0x80a>
 800df60:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800df64:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 800df68:	699a      	ldr	r2, [r3, #24]
 800df6a:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 800df6e:	68d1      	ldr	r1, [r2, #12]
 800df70:	6853      	ldr	r3, [r2, #4]
 800df72:	697a      	ldr	r2, [r7, #20]
 800df74:	fb00 4012 	mls	r0, r0, r2, r4
 800df78:	009b      	lsls	r3, r3, #2
 800df7a:	4281      	cmp	r1, r0
 800df7c:	bf88      	it	hi
 800df7e:	18c0      	addhi	r0, r0, r3
 800df80:	4281      	cmp	r1, r0
 800df82:	eb01 0203 	add.w	r2, r1, r3
 800df86:	d216      	bcs.n	800dfb6 <forward_conv2d_nl_pool+0x8b6>
 800df88:	f9b7 10b8 	ldrsh.w	r1, [r7, #184]	; 0xb8
 800df8c:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 800df90:	42a1      	cmp	r1, r4
 800df92:	d010      	beq.n	800dfb6 <forward_conv2d_nl_pool+0x8b6>
 800df94:	4290      	cmp	r0, r2
 800df96:	d20e      	bcs.n	800dfb6 <forward_conv2d_nl_pool+0x8b6>
 800df98:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 800df9c:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 800dfa0:	f850 3b04 	ldr.w	r3, [r0], #4
 800dfa4:	f841 3b04 	str.w	r3, [r1], #4
 800dfa8:	69a2      	ldr	r2, [r4, #24]
 800dfaa:	6853      	ldr	r3, [r2, #4]
 800dfac:	68d2      	ldr	r2, [r2, #12]
 800dfae:	009b      	lsls	r3, r3, #2
 800dfb0:	441a      	add	r2, r3
 800dfb2:	4282      	cmp	r2, r0
 800dfb4:	d8f4      	bhi.n	800dfa0 <forward_conv2d_nl_pool+0x8a0>
 800dfb6:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800dfba:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 800dfbe:	f8b7 1140 	ldrh.w	r1, [r7, #320]	; 0x140
 800dfc2:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 800dfc4:	4420      	add	r0, r4
 800dfc6:	f8d7 40c4 	ldr.w	r4, [r7, #196]	; 0xc4
 800dfca:	1a40      	subs	r0, r0, r1
 800dfcc:	4421      	add	r1, r4
 800dfce:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 800dfd2:	442c      	add	r4, r5
 800dfd4:	b209      	sxth	r1, r1
 800dfd6:	b200      	sxth	r0, r0
 800dfd8:	4294      	cmp	r4, r2
 800dfda:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 800dfde:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 800dfe2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 800dfe6:	4621      	mov	r1, r4
 800dfe8:	f4ff af31 	bcc.w	800de4e <forward_conv2d_nl_pool+0x74e>
 800dfec:	425b      	negs	r3, r3
 800dfee:	4419      	add	r1, r3
 800dff0:	4291      	cmp	r1, r2
 800dff2:	d2fc      	bcs.n	800dfee <forward_conv2d_nl_pool+0x8ee>
 800dff4:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 800dff8:	e729      	b.n	800de4e <forward_conv2d_nl_pool+0x74e>
 800dffa:	68db      	ldr	r3, [r3, #12]
 800dffc:	deff      	udf	#255	; 0xff
 800dffe:	f8dc 200c 	ldr.w	r2, [ip, #12]
 800e002:	2a00      	cmp	r2, #0
 800e004:	f43f ac7c 	beq.w	800d900 <forward_conv2d_nl_pool+0x200>
 800e008:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800e00c:	2903      	cmp	r1, #3
 800e00e:	f240 8484 	bls.w	800e91a <forward_conv2d_nl_pool+0x121a>
 800e012:	685b      	ldr	r3, [r3, #4]
 800e014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e016:	b1db      	cbz	r3, 800e050 <forward_conv2d_nl_pool+0x950>
 800e018:	685b      	ldr	r3, [r3, #4]
 800e01a:	b1cb      	cbz	r3, 800e050 <forward_conv2d_nl_pool+0x950>
 800e01c:	699b      	ldr	r3, [r3, #24]
 800e01e:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800e022:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 800e026:	9301      	str	r3, [sp, #4]
 800e028:	4603      	mov	r3, r0
 800e02a:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800e02e:	9000      	str	r0, [sp, #0]
 800e030:	4620      	mov	r0, r4
 800e032:	f7ff fb15 	bl	800d660 <ai_dict_decompress_f32>
 800e036:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800e03a:	b12c      	cbz	r4, 800e048 <forward_conv2d_nl_pool+0x948>
 800e03c:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 800e040:	881a      	ldrh	r2, [r3, #0]
 800e042:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800e046:	e45b      	b.n	800d900 <forward_conv2d_nl_pool+0x200>
 800e048:	881a      	ldrh	r2, [r3, #0]
 800e04a:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800e04e:	e457      	b.n	800d900 <forward_conv2d_nl_pool+0x200>
 800e050:	2300      	movs	r3, #0
 800e052:	699b      	ldr	r3, [r3, #24]
 800e054:	deff      	udf	#255	; 0xff
 800e056:	68da      	ldr	r2, [r3, #12]
 800e058:	e6eb      	b.n	800de32 <forward_conv2d_nl_pool+0x732>
 800e05a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e05c:	2901      	cmp	r1, #1
 800e05e:	f47f ad3b 	bne.w	800dad8 <forward_conv2d_nl_pool+0x3d8>
 800e062:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800e066:	2900      	cmp	r1, #0
 800e068:	f43f aedf 	beq.w	800de2a <forward_conv2d_nl_pool+0x72a>
 800e06c:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800e070:	f8d7 6154 	ldr.w	r6, [r7, #340]	; 0x154
 800e074:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800e078:	1ad2      	subs	r2, r2, r3
 800e07a:	1a8c      	subs	r4, r1, r2
 800e07c:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800e080:	00b2      	lsls	r2, r6, #2
 800e082:	fb02 f204 	mul.w	r2, r2, r4
 800e086:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 800e08a:	fbb1 f1f0 	udiv	r1, r1, r0
 800e08e:	ebc1 7081 	rsb	r0, r1, r1, lsl #30
 800e092:	460d      	mov	r5, r1
 800e094:	6339      	str	r1, [r7, #48]	; 0x30
 800e096:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e098:	ebc1 7141 	rsb	r1, r1, r1, lsl #29
 800e09c:	0082      	lsls	r2, r0, #2
 800e09e:	65ba      	str	r2, [r7, #88]	; 0x58
 800e0a0:	00ca      	lsls	r2, r1, #3
 800e0a2:	607a      	str	r2, [r7, #4]
 800e0a4:	00aa      	lsls	r2, r5, #2
 800e0a6:	60ba      	str	r2, [r7, #8]
 800e0a8:	fb03 f206 	mul.w	r2, r3, r6
 800e0ac:	67ba      	str	r2, [r7, #120]	; 0x78
 800e0ae:	6a3a      	ldr	r2, [r7, #32]
 800e0b0:	fb02 f303 	mul.w	r3, r2, r3
 800e0b4:	61bb      	str	r3, [r7, #24]
 800e0b6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e0ba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800e0be:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e0c2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800e0c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e0ca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e0d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	f2c0 826e 	blt.w	800e5ba <forward_conv2d_nl_pool+0xeba>
 800e0de:	2100      	movs	r1, #0
 800e0e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e0e2:	460a      	mov	r2, r1
 800e0e4:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 800e0e8:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 800e0ec:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 800e0f0:	4420      	add	r0, r4
 800e0f2:	4408      	add	r0, r1
 800e0f4:	f8d7 4108 	ldr.w	r4, [r7, #264]	; 0x108
 800e0f8:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800e0fc:	190c      	adds	r4, r1, r4
 800e0fe:	42ac      	cmp	r4, r5
 800e100:	bf28      	it	cs
 800e102:	462c      	movcs	r4, r5
 800e104:	f8d7 512c 	ldr.w	r5, [r7, #300]	; 0x12c
 800e108:	0080      	lsls	r0, r0, #2
 800e10a:	1aa4      	subs	r4, r4, r2
 800e10c:	2d00      	cmp	r5, #0
 800e10e:	f000 8245 	beq.w	800e59c <forward_conv2d_nl_pool+0xe9c>
 800e112:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800e116:	f8d7 6150 	ldr.w	r6, [r7, #336]	; 0x150
 800e11a:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 800e11e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800e122:	42b5      	cmp	r5, r6
 800e124:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 800e128:	eba3 0204 	sub.w	r2, r3, r4
 800e12c:	eba1 0104 	sub.w	r1, r1, r4
 800e130:	bf08      	it	eq
 800e132:	eef0 3a48 	vmoveq.f32	s7, s16
 800e136:	462b      	mov	r3, r5
 800e138:	69bd      	ldr	r5, [r7, #24]
 800e13a:	f8d7 60c0 	ldr.w	r6, [r7, #192]	; 0xc0
 800e13e:	4428      	add	r0, r5
 800e140:	f8d7 513c 	ldr.w	r5, [r7, #316]	; 0x13c
 800e144:	fb05 6e00 	mla	lr, r5, r0, r6
 800e148:	eb0e 000b 	add.w	r0, lr, fp
 800e14c:	4586      	cmp	lr, r0
 800e14e:	61f8      	str	r0, [r7, #28]
 800e150:	f080 80a5 	bcs.w	800e29e <forward_conv2d_nl_pool+0xb9e>
 800e154:	0092      	lsls	r2, r2, #2
 800e156:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800e15a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e15c:	fb01 f10b 	mul.w	r1, r1, fp
 800e160:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 800e164:	f024 0803 	bic.w	r8, r4, #3
 800e168:	2a00      	cmp	r2, #0
 800e16a:	f000 8098 	beq.w	800e29e <forward_conv2d_nl_pool+0xb9e>
 800e16e:	f108 32ff 	add.w	r2, r8, #4294967295
 800e172:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e174:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800e178:	0892      	lsrs	r2, r2, #2
 800e17a:	3201      	adds	r2, #1
 800e17c:	4401      	add	r1, r0
 800e17e:	fb02 f00a 	mul.w	r0, r2, sl
 800e182:	6638      	str	r0, [r7, #96]	; 0x60
 800e184:	0110      	lsls	r0, r2, #4
 800e186:	0092      	lsls	r2, r2, #2
 800e188:	65fa      	str	r2, [r7, #92]	; 0x5c
 800e18a:	1aca      	subs	r2, r1, r3
 800e18c:	613a      	str	r2, [r7, #16]
 800e18e:	68ba      	ldr	r2, [r7, #8]
 800e190:	6738      	str	r0, [r7, #112]	; 0x70
 800e192:	4413      	add	r3, r2
 800e194:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e198:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e19c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e19e:	4413      	add	r3, r2
 800e1a0:	60fb      	str	r3, [r7, #12]
 800e1a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e1a6:	693b      	ldr	r3, [r7, #16]
 800e1a8:	4413      	add	r3, r2
 800e1aa:	677b      	str	r3, [r7, #116]	; 0x74
 800e1ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e1b0:	ecf3 6a01 	vldmia	r3!, {s13}
 800e1b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e1b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800e1c2:	dd57      	ble.n	800e274 <forward_conv2d_nl_pool+0xb74>
 800e1c4:	4676      	mov	r6, lr
 800e1c6:	f04f 0c00 	mov.w	ip, #0
 800e1ca:	f1b8 0f00 	cmp.w	r8, #0
 800e1ce:	f340 81e3 	ble.w	800e598 <forward_conv2d_nl_pool+0xe98>
 800e1d2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800e1d6:	f109 0310 	add.w	r3, r9, #16
 800e1da:	18b1      	adds	r1, r6, r2
 800e1dc:	2000      	movs	r0, #0
 800e1de:	4632      	mov	r2, r6
 800e1e0:	eb02 050b 	add.w	r5, r2, fp
 800e1e4:	ed95 7a00 	vldr	s14, [r5]
 800e1e8:	ed53 7a03 	vldr	s15, [r3, #-12]
 800e1ec:	ed92 4a00 	vldr	s8, [r2]
 800e1f0:	ed53 4a04 	vldr	s9, [r3, #-16]
 800e1f4:	ed91 5a00 	vldr	s10, [r1]
 800e1f8:	ed53 5a02 	vldr	s11, [r3, #-8]
 800e1fc:	ed13 6a01 	vldr	s12, [r3, #-4]
 800e200:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e204:	eb01 050b 	add.w	r5, r1, fp
 800e208:	eee4 7a24 	vfma.f32	s15, s8, s9
 800e20c:	3004      	adds	r0, #4
 800e20e:	4540      	cmp	r0, r8
 800e210:	ed95 7a00 	vldr	s14, [r5]
 800e214:	eee5 7a25 	vfma.f32	s15, s10, s11
 800e218:	4452      	add	r2, sl
 800e21a:	4451      	add	r1, sl
 800e21c:	f103 0310 	add.w	r3, r3, #16
 800e220:	eee7 7a06 	vfma.f32	s15, s14, s12
 800e224:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800e228:	dbda      	blt.n	800e1e0 <forward_conv2d_nl_pool+0xae0>
 800e22a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e22c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800e22e:	441e      	add	r6, r3
 800e230:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e232:	4499      	add	r9, r3
 800e234:	42a0      	cmp	r0, r4
 800e236:	da11      	bge.n	800e25c <forward_conv2d_nl_pool+0xb5c>
 800e238:	4602      	mov	r2, r0
 800e23a:	4633      	mov	r3, r6
 800e23c:	4649      	mov	r1, r9
 800e23e:	edd3 7a00 	vldr	s15, [r3]
 800e242:	ecb1 7a01 	vldmia	r1!, {s14}
 800e246:	3201      	adds	r2, #1
 800e248:	42a2      	cmp	r2, r4
 800e24a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e24e:	445b      	add	r3, fp
 800e250:	d1f5      	bne.n	800e23e <forward_conv2d_nl_pool+0xb3e>
 800e252:	1a20      	subs	r0, r4, r0
 800e254:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 800e258:	fb00 660b 	mla	r6, r0, fp, r6
 800e25c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e260:	441e      	add	r6, r3
 800e262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e266:	4499      	add	r9, r3
 800e268:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e26c:	f10c 0c01 	add.w	ip, ip, #1
 800e270:	4563      	cmp	r3, ip
 800e272:	d1aa      	bne.n	800e1ca <forward_conv2d_nl_pool+0xaca>
 800e274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e276:	4499      	add	r9, r3
 800e278:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e27a:	ece3 6a01 	vstmia	r3!, {s13}
 800e27e:	677b      	str	r3, [r7, #116]	; 0x74
 800e280:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800e284:	4293      	cmp	r3, r2
 800e286:	d191      	bne.n	800e1ac <forward_conv2d_nl_pool+0xaac>
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	687a      	ldr	r2, [r7, #4]
 800e28c:	1a9b      	subs	r3, r3, r2
 800e28e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e292:	69fb      	ldr	r3, [r7, #28]
 800e294:	f10e 0e04 	add.w	lr, lr, #4
 800e298:	459e      	cmp	lr, r3
 800e29a:	f4ff af7d 	bcc.w	800e198 <forward_conv2d_nl_pool+0xa98>
 800e29e:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800e2a2:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800e2a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e2aa:	440a      	add	r2, r1
 800e2ac:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800e2b0:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800e2b4:	4608      	mov	r0, r1
 800e2b6:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800e2ba:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 800e2be:	4410      	add	r0, r2
 800e2c0:	1a8a      	subs	r2, r1, r2
 800e2c2:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 800e2c6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800e2ca:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
 800e2ce:	3301      	adds	r3, #1
 800e2d0:	429a      	cmp	r2, r3
 800e2d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e2d6:	f47f aefd 	bne.w	800e0d4 <forward_conv2d_nl_pool+0x9d4>
 800e2da:	e54f      	b.n	800dd7c <forward_conv2d_nl_pool+0x67c>
 800e2dc:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800e2de:	2801      	cmp	r0, #1
 800e2e0:	f47f abfa 	bne.w	800dad8 <forward_conv2d_nl_pool+0x3d8>
 800e2e4:	1ad2      	subs	r2, r2, r3
 800e2e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e2e8:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 800e2ec:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800e2f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e2f2:	fb00 4101 	mla	r1, r0, r1, r4
 800e2f6:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800e2fa:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 800e2fe:	f080 8173 	bcs.w	800e5e8 <forward_conv2d_nl_pool+0xee8>
 800e302:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800e306:	2a00      	cmp	r2, #0
 800e308:	f43f ad38 	beq.w	800dd7c <forward_conv2d_nl_pool+0x67c>
 800e30c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e310:	fb02 f303 	mul.w	r3, r2, r3
 800e314:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e316:	677b      	str	r3, [r7, #116]	; 0x74
 800e318:	1a9b      	subs	r3, r3, r2
 800e31a:	663b      	str	r3, [r7, #96]	; 0x60
 800e31c:	188b      	adds	r3, r1, r2
 800e31e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e320:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e324:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800e328:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e32c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800e330:	e9c7 ab0b 	strd	sl, fp, [r7, #44]	; 0x2c
 800e334:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e338:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e33c:	2300      	movs	r3, #0
 800e33e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e342:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e346:	2b00      	cmp	r3, #0
 800e348:	f000 814b 	beq.w	800e5e2 <forward_conv2d_nl_pool+0xee2>
 800e34c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e350:	ed93 6a00 	vldr	s12, [r3]
 800e354:	3304      	adds	r3, #4
 800e356:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e35a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800e35e:	2b00      	cmp	r3, #0
 800e360:	f000 8101 	beq.w	800e566 <forward_conv2d_nl_pool+0xe66>
 800e364:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e368:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800e36c:	eb03 0802 	add.w	r8, r3, r2
 800e370:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e372:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e376:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e378:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e37c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e380:	67bb      	str	r3, [r7, #120]	; 0x78
 800e382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e386:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e38a:	f04f 0b00 	mov.w	fp, #0
 800e38e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e392:	2b00      	cmp	r3, #0
 800e394:	f2c0 811c 	blt.w	800e5d0 <forward_conv2d_nl_pool+0xed0>
 800e398:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800e39c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e39e:	2300      	movs	r3, #0
 800e3a0:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 800e3a4:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800e3a8:	eb02 0c04 	add.w	ip, r2, r4
 800e3ac:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800e3b0:	4540      	cmp	r0, r8
 800e3b2:	bf94      	ite	ls
 800e3b4:	ebc3 0300 	rsbls	r3, r3, r0
 800e3b8:	ebc3 0308 	rsbhi	r3, r3, r8
 800e3bc:	eba2 0903 	sub.w	r9, r2, r3
 800e3c0:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800e3c4:	1ac4      	subs	r4, r0, r3
 800e3c6:	fb03 f302 	mul.w	r3, r3, r2
 800e3ca:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800e3ce:	2a00      	cmp	r2, #0
 800e3d0:	f340 80fb 	ble.w	800e5ca <forward_conv2d_nl_pool+0xeca>
 800e3d4:	f023 050f 	bic.w	r5, r3, #15
 800e3d8:	f8d7 60e8 	ldr.w	r6, [r7, #232]	; 0xe8
 800e3dc:	1e68      	subs	r0, r5, #1
 800e3de:	0900      	lsrs	r0, r0, #4
 800e3e0:	3001      	adds	r0, #1
 800e3e2:	fb06 f204 	mul.w	r2, r6, r4
 800e3e6:	673a      	str	r2, [r7, #112]	; 0x70
 800e3e8:	0102      	lsls	r2, r0, #4
 800e3ea:	65ba      	str	r2, [r7, #88]	; 0x58
 800e3ec:	fb06 f909 	mul.w	r9, r6, r9
 800e3f0:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800e3f4:	eef0 6a46 	vmov.f32	s13, s12
 800e3f8:	f04f 0e00 	mov.w	lr, #0
 800e3fc:	4662      	mov	r2, ip
 800e3fe:	2d00      	cmp	r5, #0
 800e400:	f340 80e1 	ble.w	800e5c6 <forward_conv2d_nl_pool+0xec6>
 800e404:	f101 0440 	add.w	r4, r1, #64	; 0x40
 800e408:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800e40c:	2600      	movs	r6, #0
 800e40e:	ed50 fa0f 	vldr	s31, [r0, #-60]	; 0xffffffc4
 800e412:	ed54 7a0f 	vldr	s15, [r4, #-60]	; 0xffffffc4
 800e416:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 800e41a:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 800e41e:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 800e422:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 800e426:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 800e42a:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 800e42e:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 800e432:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 800e436:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 800e43a:	ed50 aa0a 	vldr	s21, [r0, #-40]	; 0xffffffd8
 800e43e:	ed14 aa0a 	vldr	s20, [r4, #-40]	; 0xffffffd8
 800e442:	ed50 9a09 	vldr	s19, [r0, #-36]	; 0xffffffdc
 800e446:	ed14 9a09 	vldr	s18, [r4, #-36]	; 0xffffffdc
 800e44a:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 800e44e:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 800e452:	ed54 0a07 	vldr	s1, [r4, #-28]	; 0xffffffe4
 800e456:	ed10 1a07 	vldr	s2, [r0, #-28]	; 0xffffffe4
 800e45a:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 800e45e:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 800e462:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 800e466:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 800e46a:	ed50 3a04 	vldr	s7, [r0, #-16]
 800e46e:	ed14 4a04 	vldr	s8, [r4, #-16]
 800e472:	ed50 4a03 	vldr	s9, [r0, #-12]
 800e476:	ed14 5a03 	vldr	s10, [r4, #-12]
 800e47a:	ed50 5a02 	vldr	s11, [r0, #-8]
 800e47e:	ed14 7a02 	vldr	s14, [r4, #-8]
 800e482:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800e486:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 800e48a:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800e48e:	3610      	adds	r6, #16
 800e490:	42b5      	cmp	r5, r6
 800e492:	ed14 fa01 	vldr	s30, [r4, #-4]
 800e496:	ed50 ea01 	vldr	s29, [r0, #-4]
 800e49a:	eeee 7a2f 	vfma.f32	s15, s28, s31
 800e49e:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800e4a2:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800e4a6:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800e4aa:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800e4ae:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800e4b2:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800e4b6:	eee9 7a89 	vfma.f32	s15, s19, s18
 800e4ba:	eee8 7a80 	vfma.f32	s15, s17, s0
 800e4be:	eee0 7a81 	vfma.f32	s15, s1, s2
 800e4c2:	eee1 7a82 	vfma.f32	s15, s3, s4
 800e4c6:	eee2 7a83 	vfma.f32	s15, s5, s6
 800e4ca:	eee3 7a84 	vfma.f32	s15, s7, s8
 800e4ce:	eee4 7a85 	vfma.f32	s15, s9, s10
 800e4d2:	eee5 7a87 	vfma.f32	s15, s11, s14
 800e4d6:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800e4da:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800e4de:	dc96      	bgt.n	800e40e <forward_conv2d_nl_pool+0xd0e>
 800e4e0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e4e2:	4451      	add	r1, sl
 800e4e4:	4452      	add	r2, sl
 800e4e6:	4283      	cmp	r3, r0
 800e4e8:	dd0f      	ble.n	800e50a <forward_conv2d_nl_pool+0xe0a>
 800e4ea:	4604      	mov	r4, r0
 800e4ec:	468c      	mov	ip, r1
 800e4ee:	4616      	mov	r6, r2
 800e4f0:	ecb6 7a01 	vldmia	r6!, {s14}
 800e4f4:	ecfc 7a01 	vldmia	ip!, {s15}
 800e4f8:	3401      	adds	r4, #1
 800e4fa:	42a3      	cmp	r3, r4
 800e4fc:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e500:	d1f6      	bne.n	800e4f0 <forward_conv2d_nl_pool+0xdf0>
 800e502:	1a18      	subs	r0, r3, r0
 800e504:	0080      	lsls	r0, r0, #2
 800e506:	4402      	add	r2, r0
 800e508:	4401      	add	r1, r0
 800e50a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800e50c:	4402      	add	r2, r0
 800e50e:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800e512:	f10e 0e01 	add.w	lr, lr, #1
 800e516:	4570      	cmp	r0, lr
 800e518:	4449      	add	r1, r9
 800e51a:	f47f af70 	bne.w	800e3fe <forward_conv2d_nl_pool+0xcfe>
 800e51e:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800e522:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e524:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800e528:	edc3 6a00 	vstr	s13, [r3]
 800e52c:	4608      	mov	r0, r1
 800e52e:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800e532:	440b      	add	r3, r1
 800e534:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800e538:	67bb      	str	r3, [r7, #120]	; 0x78
 800e53a:	4410      	add	r0, r2
 800e53c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e53e:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
 800e542:	4608      	mov	r0, r1
 800e544:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800e548:	4418      	add	r0, r3
 800e54a:	1acb      	subs	r3, r1, r3
 800e54c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e550:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800e554:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800e558:	f10b 0b01 	add.w	fp, fp, #1
 800e55c:	455b      	cmp	r3, fp
 800e55e:	eba8 0802 	sub.w	r8, r8, r2
 800e562:	f47f af14 	bne.w	800e38e <forward_conv2d_nl_pool+0xc8e>
 800e566:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800e56a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e56c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e570:	440a      	add	r2, r1
 800e572:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800e576:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800e57a:	3204      	adds	r2, #4
 800e57c:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 800e580:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800e584:	3301      	adds	r3, #1
 800e586:	429a      	cmp	r2, r3
 800e588:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e58c:	f47f aed9 	bne.w	800e342 <forward_conv2d_nl_pool+0xc42>
 800e590:	e9d7 ab0b 	ldrd	sl, fp, [r7, #44]	; 0x2c
 800e594:	f7ff bbf2 	b.w	800dd7c <forward_conv2d_nl_pool+0x67c>
 800e598:	2000      	movs	r0, #0
 800e59a:	e64b      	b.n	800e234 <forward_conv2d_nl_pool+0xb34>
 800e59c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800e5a0:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 800e5a4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e5a8:	1b19      	subs	r1, r3, r4
 800e5aa:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800e5ae:	eef0 3a48 	vmov.f32	s7, s16
 800e5b2:	1b1a      	subs	r2, r3, r4
 800e5b4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800e5b8:	e5be      	b.n	800e138 <forward_conv2d_nl_pool+0xa38>
 800e5ba:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 800e5be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e5c0:	460a      	mov	r2, r1
 800e5c2:	440b      	add	r3, r1
 800e5c4:	e58e      	b.n	800e0e4 <forward_conv2d_nl_pool+0x9e4>
 800e5c6:	2000      	movs	r0, #0
 800e5c8:	e78d      	b.n	800e4e6 <forward_conv2d_nl_pool+0xde6>
 800e5ca:	eef0 6a46 	vmov.f32	s13, s12
 800e5ce:	e7a6      	b.n	800e51e <forward_conv2d_nl_pool+0xe1e>
 800e5d0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e5d4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e5d8:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800e5dc:	eba8 0303 	sub.w	r3, r8, r3
 800e5e0:	e6de      	b.n	800e3a0 <forward_conv2d_nl_pool+0xca0>
 800e5e2:	eeb0 6a48 	vmov.f32	s12, s16
 800e5e6:	e6b8      	b.n	800e35a <forward_conv2d_nl_pool+0xc5a>
 800e5e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800e5ec:	f8c7 d070 	str.w	sp, [r7, #112]	; 0x70
 800e5f0:	320a      	adds	r2, #10
 800e5f2:	f022 0207 	bic.w	r2, r2, #7
 800e5f6:	ebad 0d02 	sub.w	sp, sp, r2
 800e5fa:	aa0a      	add	r2, sp, #40	; 0x28
 800e5fc:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800e600:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800e604:	2a00      	cmp	r2, #0
 800e606:	f000 814f 	beq.w	800e8a8 <forward_conv2d_nl_pool+0x11a8>
 800e60a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e60e:	fb02 f303 	mul.w	r3, r2, r3
 800e612:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e614:	663b      	str	r3, [r7, #96]	; 0x60
 800e616:	1a9b      	subs	r3, r3, r2
 800e618:	65bb      	str	r3, [r7, #88]	; 0x58
 800e61a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e61e:	4413      	add	r3, r2
 800e620:	633b      	str	r3, [r7, #48]	; 0x30
 800e622:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e626:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800e62a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e62e:	67bb      	str	r3, [r7, #120]	; 0x78
 800e630:	e9c7 ab06 	strd	sl, fp, [r7, #24]
 800e634:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e638:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800e63c:	2300      	movs	r3, #0
 800e63e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e642:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e646:	b13b      	cbz	r3, 800e658 <forward_conv2d_nl_pool+0xf58>
 800e648:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800e64c:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800e650:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800e654:	f000 feba 	bl	800f3cc <memcpy>
 800e658:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	f000 8135 	beq.w	800e8cc <forward_conv2d_nl_pool+0x11cc>
 800e662:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e664:	ed93 6a00 	vldr	s12, [r3]
 800e668:	3304      	adds	r3, #4
 800e66a:	67bb      	str	r3, [r7, #120]	; 0x78
 800e66c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800e670:	2b00      	cmp	r3, #0
 800e672:	f000 8101 	beq.w	800e878 <forward_conv2d_nl_pool+0x1178>
 800e676:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e67a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800e67e:	eb03 0802 	add.w	r8, r3, r2
 800e682:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e684:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e68a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e68e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e692:	677b      	str	r3, [r7, #116]	; 0x74
 800e694:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e698:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e69c:	f04f 0b00 	mov.w	fp, #0
 800e6a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	f2c0 8108 	blt.w	800e8ba <forward_conv2d_nl_pool+0x11ba>
 800e6aa:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800e6ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	f8d7 40d8 	ldr.w	r4, [r7, #216]	; 0xd8
 800e6b6:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800e6ba:	eb02 0c04 	add.w	ip, r2, r4
 800e6be:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800e6c2:	4540      	cmp	r0, r8
 800e6c4:	bf94      	ite	ls
 800e6c6:	ebc3 0300 	rsbls	r3, r3, r0
 800e6ca:	ebc3 0308 	rsbhi	r3, r3, r8
 800e6ce:	eba2 0903 	sub.w	r9, r2, r3
 800e6d2:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800e6d6:	1ac4      	subs	r4, r0, r3
 800e6d8:	fb03 f302 	mul.w	r3, r3, r2
 800e6dc:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800e6e0:	2a00      	cmp	r2, #0
 800e6e2:	f340 80e7 	ble.w	800e8b4 <forward_conv2d_nl_pool+0x11b4>
 800e6e6:	f023 050f 	bic.w	r5, r3, #15
 800e6ea:	f8d7 60e8 	ldr.w	r6, [r7, #232]	; 0xe8
 800e6ee:	1e68      	subs	r0, r5, #1
 800e6f0:	0900      	lsrs	r0, r0, #4
 800e6f2:	3001      	adds	r0, #1
 800e6f4:	fb06 f204 	mul.w	r2, r6, r4
 800e6f8:	65fa      	str	r2, [r7, #92]	; 0x5c
 800e6fa:	0102      	lsls	r2, r0, #4
 800e6fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e6fe:	fb06 f909 	mul.w	r9, r6, r9
 800e702:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800e706:	eef0 6a46 	vmov.f32	s13, s12
 800e70a:	f04f 0e00 	mov.w	lr, #0
 800e70e:	4662      	mov	r2, ip
 800e710:	2d00      	cmp	r5, #0
 800e712:	f340 80cd 	ble.w	800e8b0 <forward_conv2d_nl_pool+0x11b0>
 800e716:	f101 0440 	add.w	r4, r1, #64	; 0x40
 800e71a:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800e71e:	2600      	movs	r6, #0
 800e720:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 800e724:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 800e728:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 800e72c:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 800e730:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 800e734:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 800e738:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 800e73c:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 800e740:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 800e744:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 800e748:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 800e74c:	ed50 aa0a 	vldr	s21, [r0, #-40]	; 0xffffffd8
 800e750:	ed14 aa0a 	vldr	s20, [r4, #-40]	; 0xffffffd8
 800e754:	ed50 9a09 	vldr	s19, [r0, #-36]	; 0xffffffdc
 800e758:	ed14 9a09 	vldr	s18, [r4, #-36]	; 0xffffffdc
 800e75c:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 800e760:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 800e764:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 800e768:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 800e76c:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 800e770:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 800e774:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 800e778:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 800e77c:	ed54 3a04 	vldr	s7, [r4, #-16]
 800e780:	ed10 4a04 	vldr	s8, [r0, #-16]
 800e784:	ed54 4a03 	vldr	s9, [r4, #-12]
 800e788:	ed10 5a03 	vldr	s10, [r0, #-12]
 800e78c:	ed50 5a02 	vldr	s11, [r0, #-8]
 800e790:	ed14 7a02 	vldr	s14, [r4, #-8]
 800e794:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800e798:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 800e79c:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800e7a0:	3610      	adds	r6, #16
 800e7a2:	42ae      	cmp	r6, r5
 800e7a4:	ed14 fa01 	vldr	s30, [r4, #-4]
 800e7a8:	ed50 ea01 	vldr	s29, [r0, #-4]
 800e7ac:	eeee 7a2f 	vfma.f32	s15, s28, s31
 800e7b0:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800e7b4:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800e7b8:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800e7bc:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800e7c0:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800e7c4:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800e7c8:	eee9 7a89 	vfma.f32	s15, s19, s18
 800e7cc:	eee8 7a80 	vfma.f32	s15, s17, s0
 800e7d0:	eee0 7a81 	vfma.f32	s15, s1, s2
 800e7d4:	eee1 7a82 	vfma.f32	s15, s3, s4
 800e7d8:	eee2 7a83 	vfma.f32	s15, s5, s6
 800e7dc:	eee3 7a84 	vfma.f32	s15, s7, s8
 800e7e0:	eee4 7a85 	vfma.f32	s15, s9, s10
 800e7e4:	eee5 7a87 	vfma.f32	s15, s11, s14
 800e7e8:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800e7ec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800e7f0:	db96      	blt.n	800e720 <forward_conv2d_nl_pool+0x1020>
 800e7f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e7f4:	4451      	add	r1, sl
 800e7f6:	4452      	add	r2, sl
 800e7f8:	4283      	cmp	r3, r0
 800e7fa:	dd0f      	ble.n	800e81c <forward_conv2d_nl_pool+0x111c>
 800e7fc:	4604      	mov	r4, r0
 800e7fe:	468c      	mov	ip, r1
 800e800:	4616      	mov	r6, r2
 800e802:	ecb6 7a01 	vldmia	r6!, {s14}
 800e806:	ecfc 7a01 	vldmia	ip!, {s15}
 800e80a:	3401      	adds	r4, #1
 800e80c:	42a3      	cmp	r3, r4
 800e80e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e812:	d1f6      	bne.n	800e802 <forward_conv2d_nl_pool+0x1102>
 800e814:	1a18      	subs	r0, r3, r0
 800e816:	0080      	lsls	r0, r0, #2
 800e818:	4402      	add	r2, r0
 800e81a:	4401      	add	r1, r0
 800e81c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800e81e:	4402      	add	r2, r0
 800e820:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800e824:	f10e 0e01 	add.w	lr, lr, #1
 800e828:	4570      	cmp	r0, lr
 800e82a:	4449      	add	r1, r9
 800e82c:	f47f af70 	bne.w	800e710 <forward_conv2d_nl_pool+0x1010>
 800e830:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800e834:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e836:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800e83a:	edc3 6a00 	vstr	s13, [r3]
 800e83e:	4608      	mov	r0, r1
 800e840:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800e844:	440b      	add	r3, r1
 800e846:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800e84a:	677b      	str	r3, [r7, #116]	; 0x74
 800e84c:	4410      	add	r0, r2
 800e84e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e850:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
 800e854:	4608      	mov	r0, r1
 800e856:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800e85a:	4418      	add	r0, r3
 800e85c:	1acb      	subs	r3, r1, r3
 800e85e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e862:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800e866:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800e86a:	f10b 0b01 	add.w	fp, fp, #1
 800e86e:	455b      	cmp	r3, fp
 800e870:	eba8 0802 	sub.w	r8, r8, r2
 800e874:	f47f af14 	bne.w	800e6a0 <forward_conv2d_nl_pool+0xfa0>
 800e878:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800e87c:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800e880:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e884:	440a      	add	r2, r1
 800e886:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800e88a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800e88e:	3204      	adds	r2, #4
 800e890:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 800e894:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800e898:	3301      	adds	r3, #1
 800e89a:	429a      	cmp	r2, r3
 800e89c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e8a0:	f47f aecf 	bne.w	800e642 <forward_conv2d_nl_pool+0xf42>
 800e8a4:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800e8a8:	f8d7 d070 	ldr.w	sp, [r7, #112]	; 0x70
 800e8ac:	f7ff ba66 	b.w	800dd7c <forward_conv2d_nl_pool+0x67c>
 800e8b0:	2000      	movs	r0, #0
 800e8b2:	e7a1      	b.n	800e7f8 <forward_conv2d_nl_pool+0x10f8>
 800e8b4:	eef0 6a46 	vmov.f32	s13, s12
 800e8b8:	e7ba      	b.n	800e830 <forward_conv2d_nl_pool+0x1130>
 800e8ba:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e8be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e8c2:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800e8c6:	eba8 0303 	sub.w	r3, r8, r3
 800e8ca:	e6f2      	b.n	800e6b2 <forward_conv2d_nl_pool+0xfb2>
 800e8cc:	eeb0 6a48 	vmov.f32	s12, s16
 800e8d0:	e6cc      	b.n	800e66c <forward_conv2d_nl_pool+0xf6c>
 800e8d2:	b16a      	cbz	r2, 800e8f0 <forward_conv2d_nl_pool+0x11f0>
 800e8d4:	6892      	ldr	r2, [r2, #8]
 800e8d6:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800e8da:	2201      	movs	r2, #1
 800e8dc:	f8c7 40a4 	str.w	r4, [r7, #164]	; 0xa4
 800e8e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800e8e4:	f7fe bfb2 	b.w	800d84c <forward_conv2d_nl_pool+0x14c>
 800e8e8:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800e8ec:	f7fe bf94 	b.w	800d818 <forward_conv2d_nl_pool+0x118>
 800e8f0:	2201      	movs	r2, #1
 800e8f2:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 800e8f6:	f8c7 40a4 	str.w	r4, [r7, #164]	; 0xa4
 800e8fa:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800e8fe:	f7fe bfa5 	b.w	800d84c <forward_conv2d_nl_pool+0x14c>
 800e902:	3418      	adds	r4, #24
 800e904:	d007      	beq.n	800e916 <forward_conv2d_nl_pool+0x1216>
 800e906:	4632      	mov	r2, r6
 800e908:	4635      	mov	r5, r6
 800e90a:	4634      	mov	r4, r6
 800e90c:	f7fe bf2a 	b.w	800d764 <forward_conv2d_nl_pool+0x64>
 800e910:	4691      	mov	r9, r2
 800e912:	f7fe bf14 	b.w	800d73e <forward_conv2d_nl_pool+0x3e>
 800e916:	68e3      	ldr	r3, [r4, #12]
 800e918:	deff      	udf	#255	; 0xff
 800e91a:	2300      	movs	r3, #0
 800e91c:	685b      	ldr	r3, [r3, #4]
 800e91e:	deff      	udf	#255	; 0xff
 800e920:	4694      	mov	ip, r2
 800e922:	f7fe bf01 	b.w	800d728 <forward_conv2d_nl_pool+0x28>
 800e926:	4613      	mov	r3, r2
 800e928:	685b      	ldr	r3, [r3, #4]
 800e92a:	deff      	udf	#255	; 0xff
 800e92c:	2200      	movs	r2, #0
 800e92e:	f7fe bf18 	b.w	800d762 <forward_conv2d_nl_pool+0x62>
 800e932:	bf00      	nop

0800e934 <forward_dense>:
 800e934:	6942      	ldr	r2, [r0, #20]
 800e936:	8813      	ldrh	r3, [r2, #0]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	f000 81ca 	beq.w	800ecd2 <forward_dense+0x39e>
 800e93e:	6852      	ldr	r2, [r2, #4]
 800e940:	6850      	ldr	r0, [r2, #4]
 800e942:	b100      	cbz	r0, 800e946 <forward_dense+0x12>
 800e944:	6800      	ldr	r0, [r0, #0]
 800e946:	2b01      	cmp	r3, #1
 800e948:	f240 81c0 	bls.w	800eccc <forward_dense+0x398>
 800e94c:	6911      	ldr	r1, [r2, #16]
 800e94e:	b101      	cbz	r1, 800e952 <forward_dense+0x1e>
 800e950:	6809      	ldr	r1, [r1, #0]
 800e952:	2b02      	cmp	r3, #2
 800e954:	f000 81bf 	beq.w	800ecd6 <forward_dense+0x3a2>
 800e958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e95c:	ed2d 8b10 	vpush	{d8-d15}
 800e960:	69d3      	ldr	r3, [r2, #28]
 800e962:	b091      	sub	sp, #68	; 0x44
 800e964:	2b00      	cmp	r3, #0
 800e966:	f000 820b 	beq.w	800ed80 <forward_dense+0x44c>
 800e96a:	681c      	ldr	r4, [r3, #0]
 800e96c:	9408      	str	r4, [sp, #32]
 800e96e:	f112 0418 	adds.w	r4, r2, #24
 800e972:	f000 81df 	beq.w	800ed34 <forward_dense+0x400>
 800e976:	8b12      	ldrh	r2, [r2, #24]
 800e978:	2a01      	cmp	r2, #1
 800e97a:	f240 81fe 	bls.w	800ed7a <forward_dense+0x446>
 800e97e:	2b00      	cmp	r3, #0
 800e980:	f000 81da 	beq.w	800ed38 <forward_dense+0x404>
 800e984:	685b      	ldr	r3, [r3, #4]
 800e986:	9306      	str	r3, [sp, #24]
 800e988:	9b08      	ldr	r3, [sp, #32]
 800e98a:	68cc      	ldr	r4, [r1, #12]
 800e98c:	699b      	ldr	r3, [r3, #24]
 800e98e:	68c5      	ldr	r5, [r0, #12]
 800e990:	681a      	ldr	r2, [r3, #0]
 800e992:	f8d5 8004 	ldr.w	r8, [r5, #4]
 800e996:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800e99a:	f3c2 1cc6 	ubfx	ip, r2, #7, #7
 800e99e:	f3c2 5541 	ubfx	r5, r2, #21, #2
 800e9a2:	fa4c f505 	asr.w	r5, ip, r5
 800e9a6:	f3c2 4243 	ubfx	r2, r2, #17, #4
 800e9aa:	950b      	str	r5, [sp, #44]	; 0x2c
 800e9ac:	2a04      	cmp	r2, #4
 800e9ae:	fb07 f506 	mul.w	r5, r7, r6
 800e9b2:	6864      	ldr	r4, [r4, #4]
 800e9b4:	9507      	str	r5, [sp, #28]
 800e9b6:	f000 81dd 	beq.w	800ed74 <forward_dense+0x440>
 800e9ba:	2a08      	cmp	r2, #8
 800e9bc:	f000 81da 	beq.w	800ed74 <forward_dense+0x440>
 800e9c0:	f04f 0a00 	mov.w	sl, #0
 800e9c4:	698a      	ldr	r2, [r1, #24]
 800e9c6:	6981      	ldr	r1, [r0, #24]
 800e9c8:	6890      	ldr	r0, [r2, #8]
 800e9ca:	9a08      	ldr	r2, [sp, #32]
 800e9cc:	9004      	str	r0, [sp, #16]
 800e9ce:	6952      	ldr	r2, [r2, #20]
 800e9d0:	688f      	ldr	r7, [r1, #8]
 800e9d2:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800e9d6:	00a2      	lsls	r2, r4, #2
 800e9d8:	9209      	str	r2, [sp, #36]	; 0x24
 800e9da:	1886      	adds	r6, r0, r2
 800e9dc:	9a07      	ldr	r2, [sp, #28]
 800e9de:	2a00      	cmp	r2, #0
 800e9e0:	f000 81c3 	beq.w	800ed6a <forward_dense+0x436>
 800e9e4:	f1a8 0210 	sub.w	r2, r8, #16
 800e9e8:	0912      	lsrs	r2, r2, #4
 800e9ea:	3201      	adds	r2, #1
 800e9ec:	0192      	lsls	r2, r2, #6
 800e9ee:	920c      	str	r2, [sp, #48]	; 0x30
 800e9f0:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800e9f4:	920a      	str	r2, [sp, #40]	; 0x28
 800e9f6:	689d      	ldr	r5, [r3, #8]
 800e9f8:	9b06      	ldr	r3, [sp, #24]
 800e9fa:	eddf aad0 	vldr	s21, [pc, #832]	; 800ed3c <forward_dense+0x408>
 800e9fe:	2200      	movs	r2, #0
 800ea00:	9205      	str	r2, [sp, #20]
 800ea02:	f008 020f 	and.w	r2, r8, #15
 800ea06:	920d      	str	r2, [sp, #52]	; 0x34
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d043      	beq.n	800ea94 <forward_dense+0x160>
 800ea0c:	699b      	ldr	r3, [r3, #24]
 800ea0e:	689c      	ldr	r4, [r3, #8]
 800ea10:	9b04      	ldr	r3, [sp, #16]
 800ea12:	f1ba 0f00 	cmp.w	sl, #0
 800ea16:	d042      	beq.n	800ea9e <forward_dense+0x16a>
 800ea18:	42b3      	cmp	r3, r6
 800ea1a:	d22a      	bcs.n	800ea72 <forward_dense+0x13e>
 800ea1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ea1e:	469b      	mov	fp, r3
 800ea20:	ab0f      	add	r3, sp, #60	; 0x3c
 800ea22:	9303      	str	r3, [sp, #12]
 800ea24:	2a04      	cmp	r2, #4
 800ea26:	4633      	mov	r3, r6
 800ea28:	4646      	mov	r6, r8
 800ea2a:	4698      	mov	r8, r3
 800ea2c:	f000 8156 	beq.w	800ecdc <forward_dense+0x3a8>
 800ea30:	2c00      	cmp	r4, #0
 800ea32:	f000 8185 	beq.w	800ed40 <forward_dense+0x40c>
 800ea36:	f8d4 c000 	ldr.w	ip, [r4]
 800ea3a:	9803      	ldr	r0, [sp, #12]
 800ea3c:	9600      	str	r6, [sp, #0]
 800ea3e:	463b      	mov	r3, r7
 800ea40:	4629      	mov	r1, r5
 800ea42:	4652      	mov	r2, sl
 800ea44:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800ea48:	f7fe fc7e 	bl	800d348 <ai_dict8_dot_array_f32>
 800ea4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ea4e:	f84b 3b04 	str.w	r3, [fp], #4
 800ea52:	45c3      	cmp	fp, r8
 800ea54:	f104 0404 	add.w	r4, r4, #4
 800ea58:	444d      	add	r5, r9
 800ea5a:	d3e9      	bcc.n	800ea30 <forward_dense+0xfc>
 800ea5c:	4643      	mov	r3, r8
 800ea5e:	46b0      	mov	r8, r6
 800ea60:	461e      	mov	r6, r3
 800ea62:	9a04      	ldr	r2, [sp, #16]
 800ea64:	43d3      	mvns	r3, r2
 800ea66:	4433      	add	r3, r6
 800ea68:	f023 0303 	bic.w	r3, r3, #3
 800ea6c:	3304      	adds	r3, #4
 800ea6e:	18d3      	adds	r3, r2, r3
 800ea70:	9304      	str	r3, [sp, #16]
 800ea72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea74:	9b05      	ldr	r3, [sp, #20]
 800ea76:	4417      	add	r7, r2
 800ea78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea7a:	4416      	add	r6, r2
 800ea7c:	9a07      	ldr	r2, [sp, #28]
 800ea7e:	3301      	adds	r3, #1
 800ea80:	4293      	cmp	r3, r2
 800ea82:	9305      	str	r3, [sp, #20]
 800ea84:	f000 8171 	beq.w	800ed6a <forward_dense+0x436>
 800ea88:	9b08      	ldr	r3, [sp, #32]
 800ea8a:	699b      	ldr	r3, [r3, #24]
 800ea8c:	689d      	ldr	r5, [r3, #8]
 800ea8e:	9b06      	ldr	r3, [sp, #24]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d1bb      	bne.n	800ea0c <forward_dense+0xd8>
 800ea94:	461c      	mov	r4, r3
 800ea96:	9b04      	ldr	r3, [sp, #16]
 800ea98:	f1ba 0f00 	cmp.w	sl, #0
 800ea9c:	d1bc      	bne.n	800ea18 <forward_dense+0xe4>
 800ea9e:	42b3      	cmp	r3, r6
 800eaa0:	d2e7      	bcs.n	800ea72 <forward_dense+0x13e>
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eaa6:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800eaaa:	eb07 0c03 	add.w	ip, r7, r3
 800eaae:	469e      	mov	lr, r3
 800eab0:	2c00      	cmp	r4, #0
 800eab2:	f000 80ff 	beq.w	800ecb4 <forward_dense+0x380>
 800eab6:	f1b8 0f0f 	cmp.w	r8, #15
 800eaba:	edd4 fa00 	vldr	s31, [r4]
 800eabe:	eddf 6a9f 	vldr	s13, [pc, #636]	; 800ed3c <forward_dense+0x408>
 800eac2:	f104 0404 	add.w	r4, r4, #4
 800eac6:	f240 80fd 	bls.w	800ecc4 <forward_dense+0x390>
 800eaca:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800eace:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800ead2:	4641      	mov	r1, r8
 800ead4:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 800ead8:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 800eadc:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 800eae0:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 800eae4:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 800eae8:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 800eaec:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 800eaf0:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 800eaf4:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 800eaf8:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 800eafc:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 800eb00:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 800eb04:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 800eb08:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 800eb0c:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 800eb10:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 800eb14:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 800eb18:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 800eb1c:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 800eb20:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 800eb24:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 800eb28:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 800eb2c:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 800eb30:	ed13 4a04 	vldr	s8, [r3, #-16]
 800eb34:	ed52 4a04 	vldr	s9, [r2, #-16]
 800eb38:	ed12 5a03 	vldr	s10, [r2, #-12]
 800eb3c:	ed53 5a03 	vldr	s11, [r3, #-12]
 800eb40:	ed12 6a02 	vldr	s12, [r2, #-8]
 800eb44:	ed13 7a02 	vldr	s14, [r3, #-8]
 800eb48:	ee67 7a8f 	vmul.f32	s15, s15, s30
 800eb4c:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 800eb50:	eeee 7a8e 	vfma.f32	s15, s29, s28
 800eb54:	3910      	subs	r1, #16
 800eb56:	290f      	cmp	r1, #15
 800eb58:	ed53 ea01 	vldr	s29, [r3, #-4]
 800eb5c:	ed12 ea01 	vldr	s28, [r2, #-4]
 800eb60:	eeed 7a8f 	vfma.f32	s15, s27, s30
 800eb64:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800eb68:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800eb6c:	eeed 7a2c 	vfma.f32	s15, s26, s25
 800eb70:	eeec 7a2b 	vfma.f32	s15, s24, s23
 800eb74:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 800eb78:	eee9 7a89 	vfma.f32	s15, s19, s18
 800eb7c:	eee8 7a88 	vfma.f32	s15, s17, s16
 800eb80:	eee0 7a20 	vfma.f32	s15, s0, s1
 800eb84:	eee1 7a21 	vfma.f32	s15, s2, s3
 800eb88:	eee2 7a22 	vfma.f32	s15, s4, s5
 800eb8c:	eee3 7a23 	vfma.f32	s15, s6, s7
 800eb90:	eee4 7a24 	vfma.f32	s15, s8, s9
 800eb94:	eee5 7a25 	vfma.f32	s15, s10, s11
 800eb98:	eee6 7a07 	vfma.f32	s15, s12, s14
 800eb9c:	eeee 7a8e 	vfma.f32	s15, s29, s28
 800eba0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800eba4:	d896      	bhi.n	800ead4 <forward_dense+0x1a0>
 800eba6:	eb05 010e 	add.w	r1, r5, lr
 800ebaa:	465b      	mov	r3, fp
 800ebac:	4662      	mov	r2, ip
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d075      	beq.n	800ec9e <forward_dense+0x36a>
 800ebb2:	ed91 7a00 	vldr	s14, [r1]
 800ebb6:	edd2 7a00 	vldr	s15, [r2]
 800ebba:	2b01      	cmp	r3, #1
 800ebbc:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ebc0:	d06d      	beq.n	800ec9e <forward_dense+0x36a>
 800ebc2:	ed91 7a01 	vldr	s14, [r1, #4]
 800ebc6:	edd2 7a01 	vldr	s15, [r2, #4]
 800ebca:	2b02      	cmp	r3, #2
 800ebcc:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ebd0:	d065      	beq.n	800ec9e <forward_dense+0x36a>
 800ebd2:	ed91 7a02 	vldr	s14, [r1, #8]
 800ebd6:	edd2 7a02 	vldr	s15, [r2, #8]
 800ebda:	2b03      	cmp	r3, #3
 800ebdc:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ebe0:	d05d      	beq.n	800ec9e <forward_dense+0x36a>
 800ebe2:	ed91 7a03 	vldr	s14, [r1, #12]
 800ebe6:	edd2 7a03 	vldr	s15, [r2, #12]
 800ebea:	2b04      	cmp	r3, #4
 800ebec:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ebf0:	d055      	beq.n	800ec9e <forward_dense+0x36a>
 800ebf2:	ed91 7a04 	vldr	s14, [r1, #16]
 800ebf6:	edd2 7a04 	vldr	s15, [r2, #16]
 800ebfa:	2b05      	cmp	r3, #5
 800ebfc:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ec00:	d04d      	beq.n	800ec9e <forward_dense+0x36a>
 800ec02:	ed91 7a05 	vldr	s14, [r1, #20]
 800ec06:	edd2 7a05 	vldr	s15, [r2, #20]
 800ec0a:	2b06      	cmp	r3, #6
 800ec0c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ec10:	d045      	beq.n	800ec9e <forward_dense+0x36a>
 800ec12:	ed91 7a06 	vldr	s14, [r1, #24]
 800ec16:	edd2 7a06 	vldr	s15, [r2, #24]
 800ec1a:	2b07      	cmp	r3, #7
 800ec1c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ec20:	d03d      	beq.n	800ec9e <forward_dense+0x36a>
 800ec22:	ed91 7a07 	vldr	s14, [r1, #28]
 800ec26:	edd2 7a07 	vldr	s15, [r2, #28]
 800ec2a:	2b08      	cmp	r3, #8
 800ec2c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ec30:	d035      	beq.n	800ec9e <forward_dense+0x36a>
 800ec32:	ed91 7a08 	vldr	s14, [r1, #32]
 800ec36:	edd2 7a08 	vldr	s15, [r2, #32]
 800ec3a:	2b09      	cmp	r3, #9
 800ec3c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ec40:	d02d      	beq.n	800ec9e <forward_dense+0x36a>
 800ec42:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 800ec46:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800ec4a:	2b0a      	cmp	r3, #10
 800ec4c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ec50:	d025      	beq.n	800ec9e <forward_dense+0x36a>
 800ec52:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 800ec56:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 800ec5a:	2b0b      	cmp	r3, #11
 800ec5c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ec60:	d01d      	beq.n	800ec9e <forward_dense+0x36a>
 800ec62:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 800ec66:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800ec6a:	2b0c      	cmp	r3, #12
 800ec6c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ec70:	d015      	beq.n	800ec9e <forward_dense+0x36a>
 800ec72:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 800ec76:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 800ec7a:	2b0d      	cmp	r3, #13
 800ec7c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ec80:	d00d      	beq.n	800ec9e <forward_dense+0x36a>
 800ec82:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 800ec86:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800ec8a:	2b0e      	cmp	r3, #14
 800ec8c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ec90:	d005      	beq.n	800ec9e <forward_dense+0x36a>
 800ec92:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 800ec96:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800ec9a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ec9e:	444d      	add	r5, r9
 800eca0:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 800eca4:	ece0 6a01 	vstmia	r0!, {s13}
 800eca8:	42b0      	cmp	r0, r6
 800ecaa:	f4bf aeda 	bcs.w	800ea62 <forward_dense+0x12e>
 800ecae:	2c00      	cmp	r4, #0
 800ecb0:	f47f af01 	bne.w	800eab6 <forward_dense+0x182>
 800ecb4:	f1b8 0f0f 	cmp.w	r8, #15
 800ecb8:	eef0 fa6a 	vmov.f32	s31, s21
 800ecbc:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800ed3c <forward_dense+0x408>
 800ecc0:	f63f af03 	bhi.w	800eaca <forward_dense+0x196>
 800ecc4:	4643      	mov	r3, r8
 800ecc6:	4629      	mov	r1, r5
 800ecc8:	463a      	mov	r2, r7
 800ecca:	e770      	b.n	800ebae <forward_dense+0x27a>
 800eccc:	2300      	movs	r3, #0
 800ecce:	685b      	ldr	r3, [r3, #4]
 800ecd0:	deff      	udf	#255	; 0xff
 800ecd2:	685b      	ldr	r3, [r3, #4]
 800ecd4:	deff      	udf	#255	; 0xff
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	685b      	ldr	r3, [r3, #4]
 800ecda:	deff      	udf	#255	; 0xff
 800ecdc:	b1ac      	cbz	r4, 800ed0a <forward_dense+0x3d6>
 800ecde:	f8d4 c000 	ldr.w	ip, [r4]
 800ece2:	9803      	ldr	r0, [sp, #12]
 800ece4:	9600      	str	r6, [sp, #0]
 800ece6:	463b      	mov	r3, r7
 800ece8:	4629      	mov	r1, r5
 800ecea:	4652      	mov	r2, sl
 800ecec:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800ecf0:	f7fe fbf8 	bl	800d4e4 <ai_dict4_dot_array_f32>
 800ecf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ecf6:	f84b 3b04 	str.w	r3, [fp], #4
 800ecfa:	45c3      	cmp	fp, r8
 800ecfc:	f104 0404 	add.w	r4, r4, #4
 800ed00:	444d      	add	r5, r9
 800ed02:	f4bf aeab 	bcs.w	800ea5c <forward_dense+0x128>
 800ed06:	2c00      	cmp	r4, #0
 800ed08:	d1e9      	bne.n	800ecde <forward_dense+0x3aa>
 800ed0a:	4634      	mov	r4, r6
 800ed0c:	4646      	mov	r6, r8
 800ed0e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ed12:	9400      	str	r4, [sp, #0]
 800ed14:	463b      	mov	r3, r7
 800ed16:	4629      	mov	r1, r5
 800ed18:	4652      	mov	r2, sl
 800ed1a:	4640      	mov	r0, r8
 800ed1c:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 800ed20:	f7fe fbe0 	bl	800d4e4 <ai_dict4_dot_array_f32>
 800ed24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ed26:	f84b 3b04 	str.w	r3, [fp], #4
 800ed2a:	45b3      	cmp	fp, r6
 800ed2c:	444d      	add	r5, r9
 800ed2e:	d3f0      	bcc.n	800ed12 <forward_dense+0x3de>
 800ed30:	46a0      	mov	r8, r4
 800ed32:	e696      	b.n	800ea62 <forward_dense+0x12e>
 800ed34:	9406      	str	r4, [sp, #24]
 800ed36:	e627      	b.n	800e988 <forward_dense+0x54>
 800ed38:	9306      	str	r3, [sp, #24]
 800ed3a:	e625      	b.n	800e988 <forward_dense+0x54>
 800ed3c:	00000000 	.word	0x00000000
 800ed40:	4634      	mov	r4, r6
 800ed42:	4646      	mov	r6, r8
 800ed44:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ed48:	9400      	str	r4, [sp, #0]
 800ed4a:	463b      	mov	r3, r7
 800ed4c:	4629      	mov	r1, r5
 800ed4e:	4652      	mov	r2, sl
 800ed50:	4640      	mov	r0, r8
 800ed52:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 800ed56:	f7fe faf7 	bl	800d348 <ai_dict8_dot_array_f32>
 800ed5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ed5c:	f84b 3b04 	str.w	r3, [fp], #4
 800ed60:	45b3      	cmp	fp, r6
 800ed62:	444d      	add	r5, r9
 800ed64:	d3f0      	bcc.n	800ed48 <forward_dense+0x414>
 800ed66:	46a0      	mov	r8, r4
 800ed68:	e67b      	b.n	800ea62 <forward_dense+0x12e>
 800ed6a:	b011      	add	sp, #68	; 0x44
 800ed6c:	ecbd 8b10 	vpop	{d8-d15}
 800ed70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed74:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 800ed78:	e624      	b.n	800e9c4 <forward_dense+0x90>
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	9306      	str	r3, [sp, #24]
 800ed7e:	e603      	b.n	800e988 <forward_dense+0x54>
 800ed80:	9308      	str	r3, [sp, #32]
 800ed82:	e5f4      	b.n	800e96e <forward_dense+0x3a>

0800ed84 <nl_func_relu_array_f32>:
 800ed84:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800ed88:	3a01      	subs	r2, #1
 800ed8a:	688b      	ldr	r3, [r1, #8]
 800ed8c:	6880      	ldr	r0, [r0, #8]
 800ed8e:	0092      	lsls	r2, r2, #2
 800ed90:	189b      	adds	r3, r3, r2
 800ed92:	d21a      	bcs.n	800edca <nl_func_relu_array_f32+0x46>
 800ed94:	b410      	push	{r4}
 800ed96:	3204      	adds	r2, #4
 800ed98:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800edcc <nl_func_relu_array_f32+0x48>
 800ed9c:	4410      	add	r0, r2
 800ed9e:	3304      	adds	r3, #4
 800eda0:	ed53 7a01 	vldr	s15, [r3, #-4]
 800eda4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800eda8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edac:	bfb8      	it	lt
 800edae:	eef0 7a47 	vmovlt.f32	s15, s14
 800edb2:	ed60 7a01 	vstmdb	r0!, {s15}
 800edb6:	688c      	ldr	r4, [r1, #8]
 800edb8:	f1a3 0208 	sub.w	r2, r3, #8
 800edbc:	4294      	cmp	r4, r2
 800edbe:	f1a3 0304 	sub.w	r3, r3, #4
 800edc2:	d9ed      	bls.n	800eda0 <nl_func_relu_array_f32+0x1c>
 800edc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edc8:	4770      	bx	lr
 800edca:	4770      	bx	lr
 800edcc:	00000000 	.word	0x00000000

0800edd0 <forward_sm>:
 800edd0:	6942      	ldr	r2, [r0, #20]
 800edd2:	8813      	ldrh	r3, [r2, #0]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	f000 808a 	beq.w	800eeee <forward_sm+0x11e>
 800edda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edde:	ed2d 8b04 	vpush	{d8-d9}
 800ede2:	6852      	ldr	r2, [r2, #4]
 800ede4:	6855      	ldr	r5, [r2, #4]
 800ede6:	b085      	sub	sp, #20
 800ede8:	b105      	cbz	r5, 800edec <forward_sm+0x1c>
 800edea:	682d      	ldr	r5, [r5, #0]
 800edec:	2b01      	cmp	r3, #1
 800edee:	d976      	bls.n	800eede <forward_sm+0x10e>
 800edf0:	6913      	ldr	r3, [r2, #16]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d071      	beq.n	800eeda <forward_sm+0x10a>
 800edf6:	681f      	ldr	r7, [r3, #0]
 800edf8:	68ec      	ldr	r4, [r5, #12]
 800edfa:	68fa      	ldr	r2, [r7, #12]
 800edfc:	68ab      	ldr	r3, [r5, #8]
 800edfe:	6850      	ldr	r0, [r2, #4]
 800ee00:	6862      	ldr	r2, [r4, #4]
 800ee02:	9201      	str	r2, [sp, #4]
 800ee04:	0a1b      	lsrs	r3, r3, #8
 800ee06:	d074      	beq.n	800eef2 <forward_sm+0x122>
 800ee08:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ee0c:	2201      	movs	r2, #1
 800ee0e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ee12:	429c      	cmp	r4, r3
 800ee14:	fb01 f202 	mul.w	r2, r1, r2
 800ee18:	d1f9      	bne.n	800ee0e <forward_sm+0x3e>
 800ee1a:	69ae      	ldr	r6, [r5, #24]
 800ee1c:	f8d7 9018 	ldr.w	r9, [r7, #24]
 800ee20:	9f01      	ldr	r7, [sp, #4]
 800ee22:	68b5      	ldr	r5, [r6, #8]
 800ee24:	68f3      	ldr	r3, [r6, #12]
 800ee26:	f8d9 4008 	ldr.w	r4, [r9, #8]
 800ee2a:	1bd1      	subs	r1, r2, r7
 800ee2c:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 800ee30:	1a12      	subs	r2, r2, r0
 800ee32:	429d      	cmp	r5, r3
 800ee34:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800ee38:	d345      	bcc.n	800eec6 <forward_sm+0xf6>
 800ee3a:	00bb      	lsls	r3, r7, #2
 800ee3c:	ea4f 0880 	mov.w	r8, r0, lsl #2
 800ee40:	9300      	str	r3, [sp, #0]
 800ee42:	f1c8 0200 	rsb	r2, r8, #0
 800ee46:	425b      	negs	r3, r3
 800ee48:	9203      	str	r2, [sp, #12]
 800ee4a:	9302      	str	r3, [sp, #8]
 800ee4c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800ee50:	60b5      	str	r5, [r6, #8]
 800ee52:	9b01      	ldr	r3, [sp, #4]
 800ee54:	f8c9 4008 	str.w	r4, [r9, #8]
 800ee58:	68b2      	ldr	r2, [r6, #8]
 800ee5a:	2b01      	cmp	r3, #1
 800ee5c:	ed92 8a00 	vldr	s16, [r2]
 800ee60:	d940      	bls.n	800eee4 <forward_sm+0x114>
 800ee62:	9900      	ldr	r1, [sp, #0]
 800ee64:	1d13      	adds	r3, r2, #4
 800ee66:	1857      	adds	r7, r2, r1
 800ee68:	ecf3 7a01 	vldmia	r3!, {s15}
 800ee6c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ee70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee74:	bfb8      	it	lt
 800ee76:	eeb0 8a67 	vmovlt.f32	s16, s15
 800ee7a:	429f      	cmp	r7, r3
 800ee7c:	d1f4      	bne.n	800ee68 <forward_sm+0x98>
 800ee7e:	eddf 8a1e 	vldr	s17, [pc, #120]	; 800eef8 <forward_sm+0x128>
 800ee82:	4692      	mov	sl, r2
 800ee84:	46a3      	mov	fp, r4
 800ee86:	46a0      	mov	r8, r4
 800ee88:	ecba 0a01 	vldmia	sl!, {s0}
 800ee8c:	ee30 0a48 	vsub.f32	s0, s0, s16
 800ee90:	f001 fa0a 	bl	80102a8 <expf>
 800ee94:	4557      	cmp	r7, sl
 800ee96:	eca8 0a01 	vstmia	r8!, {s0}
 800ee9a:	ee78 8a80 	vadd.f32	s17, s17, s0
 800ee9e:	d1f3      	bne.n	800ee88 <forward_sm+0xb8>
 800eea0:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800eea4:	9b00      	ldr	r3, [sp, #0]
 800eea6:	18e2      	adds	r2, r4, r3
 800eea8:	eddb 7a00 	vldr	s15, [fp]
 800eeac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eeb0:	eceb 7a01 	vstmia	fp!, {s15}
 800eeb4:	455a      	cmp	r2, fp
 800eeb6:	d1f7      	bne.n	800eea8 <forward_sm+0xd8>
 800eeb8:	9a02      	ldr	r2, [sp, #8]
 800eeba:	68f3      	ldr	r3, [r6, #12]
 800eebc:	4415      	add	r5, r2
 800eebe:	9a03      	ldr	r2, [sp, #12]
 800eec0:	429d      	cmp	r5, r3
 800eec2:	4414      	add	r4, r2
 800eec4:	d2c4      	bcs.n	800ee50 <forward_sm+0x80>
 800eec6:	60b3      	str	r3, [r6, #8]
 800eec8:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800eecc:	f8c9 3008 	str.w	r3, [r9, #8]
 800eed0:	b005      	add	sp, #20
 800eed2:	ecbd 8b04 	vpop	{d8-d9}
 800eed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eeda:	68db      	ldr	r3, [r3, #12]
 800eedc:	deff      	udf	#255	; 0xff
 800eede:	2300      	movs	r3, #0
 800eee0:	685b      	ldr	r3, [r3, #4]
 800eee2:	deff      	udf	#255	; 0xff
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d0e7      	beq.n	800eeb8 <forward_sm+0xe8>
 800eee8:	9b00      	ldr	r3, [sp, #0]
 800eeea:	18d7      	adds	r7, r2, r3
 800eeec:	e7c7      	b.n	800ee7e <forward_sm+0xae>
 800eeee:	685b      	ldr	r3, [r3, #4]
 800eef0:	deff      	udf	#255	; 0xff
 800eef2:	2201      	movs	r2, #1
 800eef4:	e791      	b.n	800ee1a <forward_sm+0x4a>
 800eef6:	bf00      	nop
 800eef8:	00000000 	.word	0x00000000

0800eefc <pool_func_mp_array_f32>:
 800eefc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef00:	b093      	sub	sp, #76	; 0x4c
 800ef02:	f8d0 b008 	ldr.w	fp, [r0, #8]
 800ef06:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800ef08:	f8bd 407c 	ldrh.w	r4, [sp, #124]	; 0x7c
 800ef0c:	68a8      	ldr	r0, [r5, #8]
 800ef0e:	f8bd 5080 	ldrh.w	r5, [sp, #128]	; 0x80
 800ef12:	9508      	str	r5, [sp, #32]
 800ef14:	f8bd 5084 	ldrh.w	r5, [sp, #132]	; 0x84
 800ef18:	9002      	str	r0, [sp, #8]
 800ef1a:	950d      	str	r5, [sp, #52]	; 0x34
 800ef1c:	f8bd 0070 	ldrh.w	r0, [sp, #112]	; 0x70
 800ef20:	f8bd 5088 	ldrh.w	r5, [sp, #136]	; 0x88
 800ef24:	9004      	str	r0, [sp, #16]
 800ef26:	9506      	str	r5, [sp, #24]
 800ef28:	f8bd 0074 	ldrh.w	r0, [sp, #116]	; 0x74
 800ef2c:	f8bd 508c 	ldrh.w	r5, [sp, #140]	; 0x8c
 800ef30:	9009      	str	r0, [sp, #36]	; 0x24
 800ef32:	950b      	str	r5, [sp, #44]	; 0x2c
 800ef34:	f8bd 0078 	ldrh.w	r0, [sp, #120]	; 0x78
 800ef38:	9200      	str	r2, [sp, #0]
 800ef3a:	468a      	mov	sl, r1
 800ef3c:	4699      	mov	r9, r3
 800ef3e:	b95c      	cbnz	r4, 800ef58 <pool_func_mp_array_f32+0x5c>
 800ef40:	b950      	cbnz	r0, 800ef58 <pool_func_mp_array_f32+0x5c>
 800ef42:	9b04      	ldr	r3, [sp, #16]
 800ef44:	1a5a      	subs	r2, r3, r1
 800ef46:	9b06      	ldr	r3, [sp, #24]
 800ef48:	9908      	ldr	r1, [sp, #32]
 800ef4a:	3a01      	subs	r2, #1
 800ef4c:	3b01      	subs	r3, #1
 800ef4e:	fb13 2301 	smlabb	r3, r3, r1, r2
 800ef52:	041a      	lsls	r2, r3, #16
 800ef54:	f100 809b 	bmi.w	800f08e <pool_func_mp_array_f32+0x192>
 800ef58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	f000 808b 	beq.w	800f076 <pool_func_mp_array_f32+0x17a>
 800ef60:	9b06      	ldr	r3, [sp, #24]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	f000 8087 	beq.w	800f076 <pool_func_mp_array_f32+0x17a>
 800ef68:	f1b9 0f00 	cmp.w	r9, #0
 800ef6c:	f000 8083 	beq.w	800f076 <pool_func_mp_array_f32+0x17a>
 800ef70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef72:	1b1c      	subs	r4, r3, r4
 800ef74:	9b04      	ldr	r3, [sp, #16]
 800ef76:	1a1b      	subs	r3, r3, r0
 800ef78:	b29b      	uxth	r3, r3
 800ef7a:	4240      	negs	r0, r0
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	b2a1      	uxth	r1, r4
 800ef80:	930f      	str	r3, [sp, #60]	; 0x3c
 800ef82:	b283      	uxth	r3, r0
 800ef84:	920e      	str	r2, [sp, #56]	; 0x38
 800ef86:	910c      	str	r1, [sp, #48]	; 0x30
 800ef88:	9310      	str	r3, [sp, #64]	; 0x40
 800ef8a:	9c06      	ldr	r4, [sp, #24]
 800ef8c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ef8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef90:	fb02 f204 	mul.w	r2, r2, r4
 800ef94:	1acb      	subs	r3, r1, r3
 800ef96:	920a      	str	r2, [sp, #40]	; 0x28
 800ef98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ef9a:	9205      	str	r2, [sp, #20]
 800ef9c:	2000      	movs	r0, #0
 800ef9e:	b21b      	sxth	r3, r3
 800efa0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800efa2:	9303      	str	r3, [sp, #12]
 800efa4:	9007      	str	r0, [sp, #28]
 800efa6:	4603      	mov	r3, r0
 800efa8:	fa0f f881 	sxth.w	r8, r1
 800efac:	9204      	str	r2, [sp, #16]
 800efae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800efb0:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 800efb4:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 800efb8:	4413      	add	r3, r2
 800efba:	f04f 0e00 	mov.w	lr, #0
 800efbe:	fb09 f303 	mul.w	r3, r9, r3
 800efc2:	9301      	str	r3, [sp, #4]
 800efc4:	ea04 77e4 	and.w	r7, r4, r4, asr #31
 800efc8:	4675      	mov	r5, lr
 800efca:	9903      	ldr	r1, [sp, #12]
 800efcc:	eddf 7a78 	vldr	s15, [pc, #480]	; 800f1b0 <pool_func_mp_array_f32+0x2b4>
 800efd0:	4588      	cmp	r8, r1
 800efd2:	dd24      	ble.n	800f01e <pool_func_mp_array_f32+0x122>
 800efd4:	4564      	cmp	r4, ip
 800efd6:	dd1e      	ble.n	800f016 <pool_func_mp_array_f32+0x11a>
 800efd8:	2900      	cmp	r1, #0
 800efda:	fb0a f601 	mul.w	r6, sl, r1
 800efde:	db1a      	blt.n	800f016 <pool_func_mp_array_f32+0x11a>
 800efe0:	9b00      	ldr	r3, [sp, #0]
 800efe2:	4299      	cmp	r1, r3
 800efe4:	da17      	bge.n	800f016 <pool_func_mp_array_f32+0x11a>
 800efe6:	f1bc 0f00 	cmp.w	ip, #0
 800efea:	4663      	mov	r3, ip
 800efec:	db46      	blt.n	800f07c <pool_func_mp_array_f32+0x180>
 800efee:	18f2      	adds	r2, r6, r3
 800eff0:	fb09 5202 	mla	r2, r9, r2, r5
 800eff4:	1c58      	adds	r0, r3, #1
 800eff6:	459a      	cmp	sl, r3
 800eff8:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 800effc:	b203      	sxth	r3, r0
 800effe:	dd08      	ble.n	800f012 <pool_func_mp_array_f32+0x116>
 800f000:	ed92 7a00 	vldr	s14, [r2]
 800f004:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f00c:	bfb8      	it	lt
 800f00e:	eef0 7a47 	vmovlt.f32	s15, s14
 800f012:	429c      	cmp	r4, r3
 800f014:	dceb      	bgt.n	800efee <pool_func_mp_array_f32+0xf2>
 800f016:	3101      	adds	r1, #1
 800f018:	b209      	sxth	r1, r1
 800f01a:	4588      	cmp	r8, r1
 800f01c:	dcda      	bgt.n	800efd4 <pool_func_mp_array_f32+0xd8>
 800f01e:	9b01      	ldr	r3, [sp, #4]
 800f020:	f10e 0e01 	add.w	lr, lr, #1
 800f024:	441d      	add	r5, r3
 800f026:	9b02      	ldr	r3, [sp, #8]
 800f028:	fa0f fe8e 	sxth.w	lr, lr
 800f02c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800f030:	45ce      	cmp	lr, r9
 800f032:	edc5 7a00 	vstr	s15, [r5]
 800f036:	4675      	mov	r5, lr
 800f038:	dbc7      	blt.n	800efca <pool_func_mp_array_f32+0xce>
 800f03a:	9b07      	ldr	r3, [sp, #28]
 800f03c:	9808      	ldr	r0, [sp, #32]
 800f03e:	3301      	adds	r3, #1
 800f040:	b219      	sxth	r1, r3
 800f042:	9b05      	ldr	r3, [sp, #20]
 800f044:	9107      	str	r1, [sp, #28]
 800f046:	461a      	mov	r2, r3
 800f048:	4402      	add	r2, r0
 800f04a:	9b04      	ldr	r3, [sp, #16]
 800f04c:	b292      	uxth	r2, r2
 800f04e:	9205      	str	r2, [sp, #20]
 800f050:	9a06      	ldr	r2, [sp, #24]
 800f052:	4403      	add	r3, r0
 800f054:	b29b      	uxth	r3, r3
 800f056:	428a      	cmp	r2, r1
 800f058:	9304      	str	r3, [sp, #16]
 800f05a:	460b      	mov	r3, r1
 800f05c:	dca7      	bgt.n	800efae <pool_func_mp_array_f32+0xb2>
 800f05e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f060:	3301      	adds	r3, #1
 800f062:	b21a      	sxth	r2, r3
 800f064:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
 800f068:	440b      	add	r3, r1
 800f06a:	b29b      	uxth	r3, r3
 800f06c:	930c      	str	r3, [sp, #48]	; 0x30
 800f06e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f070:	920e      	str	r2, [sp, #56]	; 0x38
 800f072:	4293      	cmp	r3, r2
 800f074:	dc89      	bgt.n	800ef8a <pool_func_mp_array_f32+0x8e>
 800f076:	b013      	add	sp, #76	; 0x4c
 800f078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f07c:	3301      	adds	r3, #1
 800f07e:	b21b      	sxth	r3, r3
 800f080:	42bb      	cmp	r3, r7
 800f082:	dac6      	bge.n	800f012 <pool_func_mp_array_f32+0x116>
 800f084:	3301      	adds	r3, #1
 800f086:	b21b      	sxth	r3, r3
 800f088:	42bb      	cmp	r3, r7
 800f08a:	dbf7      	blt.n	800f07c <pool_func_mp_array_f32+0x180>
 800f08c:	e7c1      	b.n	800f012 <pool_func_mp_array_f32+0x116>
 800f08e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f090:	9a00      	ldr	r2, [sp, #0]
 800f092:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f094:	1a9a      	subs	r2, r3, r2
 800f096:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f098:	3a01      	subs	r2, #1
 800f09a:	3b01      	subs	r3, #1
 800f09c:	fb13 2301 	smlabb	r3, r3, r1, r2
 800f0a0:	041b      	lsls	r3, r3, #16
 800f0a2:	f57f af59 	bpl.w	800ef58 <pool_func_mp_array_f32+0x5c>
 800f0a6:	fb0a f309 	mul.w	r3, sl, r9
 800f0aa:	009b      	lsls	r3, r3, #2
 800f0ac:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
 800f0b0:	930e      	str	r3, [sp, #56]	; 0x38
 800f0b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0b4:	9001      	str	r0, [sp, #4]
 800f0b6:	ea4f 0c89 	mov.w	ip, r9, lsl #2
 800f0ba:	9300      	str	r3, [sp, #0]
 800f0bc:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800f0c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f0c2:	429a      	cmp	r2, r3
 800f0c4:	ddd7      	ble.n	800f076 <pool_func_mp_array_f32+0x17a>
 800f0c6:	9a00      	ldr	r2, [sp, #0]
 800f0c8:	9906      	ldr	r1, [sp, #24]
 800f0ca:	fa0f f882 	sxth.w	r8, r2
 800f0ce:	2900      	cmp	r1, #0
 800f0d0:	d062      	beq.n	800f198 <pool_func_mp_array_f32+0x29c>
 800f0d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f0d4:	fb01 f303 	mul.w	r3, r1, r3
 800f0d8:	1a12      	subs	r2, r2, r0
 800f0da:	9305      	str	r3, [sp, #20]
 800f0dc:	b213      	sxth	r3, r2
 800f0de:	9307      	str	r3, [sp, #28]
 800f0e0:	f1b9 0f00 	cmp.w	r9, #0
 800f0e4:	d058      	beq.n	800f198 <pool_func_mp_array_f32+0x29c>
 800f0e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f0e8:	fb02 f303 	mul.w	r3, r2, r3
 800f0ec:	2600      	movs	r6, #0
 800f0ee:	930c      	str	r3, [sp, #48]	; 0x30
 800f0f0:	9b04      	ldr	r3, [sp, #16]
 800f0f2:	9303      	str	r3, [sp, #12]
 800f0f4:	4637      	mov	r7, r6
 800f0f6:	46b2      	mov	sl, r6
 800f0f8:	9b05      	ldr	r3, [sp, #20]
 800f0fa:	9611      	str	r6, [sp, #68]	; 0x44
 800f0fc:	eb0a 0b03 	add.w	fp, sl, r3
 800f100:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f102:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 800f106:	b235      	sxth	r5, r6
 800f108:	18eb      	adds	r3, r5, r3
 800f10a:	f04f 0a00 	mov.w	sl, #0
 800f10e:	fb09 f303 	mul.w	r3, r9, r3
 800f112:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800f114:	930a      	str	r3, [sp, #40]	; 0x28
 800f116:	fb09 fb0b 	mul.w	fp, r9, fp
 800f11a:	46d6      	mov	lr, sl
 800f11c:	9807      	ldr	r0, [sp, #28]
 800f11e:	4580      	cmp	r8, r0
 800f120:	dd43      	ble.n	800f1aa <pool_func_mp_array_f32+0x2ae>
 800f122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f124:	eddf 7a22 	vldr	s15, [pc, #136]	; 800f1b0 <pool_func_mp_array_f32+0x2b4>
 800f128:	eb0e 0403 	add.w	r4, lr, r3
 800f12c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f12e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f132:	42a9      	cmp	r1, r5
 800f134:	dd0f      	ble.n	800f156 <pool_func_mp_array_f32+0x25a>
 800f136:	4622      	mov	r2, r4
 800f138:	462b      	mov	r3, r5
 800f13a:	ed92 7a00 	vldr	s14, [r2]
 800f13e:	3301      	adds	r3, #1
 800f140:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f148:	b21b      	sxth	r3, r3
 800f14a:	bfb8      	it	lt
 800f14c:	eef0 7a47 	vmovlt.f32	s15, s14
 800f150:	4299      	cmp	r1, r3
 800f152:	4462      	add	r2, ip
 800f154:	d1f1      	bne.n	800f13a <pool_func_mp_array_f32+0x23e>
 800f156:	3001      	adds	r0, #1
 800f158:	b200      	sxth	r0, r0
 800f15a:	4580      	cmp	r8, r0
 800f15c:	4434      	add	r4, r6
 800f15e:	d1e8      	bne.n	800f132 <pool_func_mp_array_f32+0x236>
 800f160:	f10a 0a01 	add.w	sl, sl, #1
 800f164:	9a02      	ldr	r2, [sp, #8]
 800f166:	eb0b 030e 	add.w	r3, fp, lr
 800f16a:	fa0f fa8a 	sxth.w	sl, sl
 800f16e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f172:	45ca      	cmp	sl, r9
 800f174:	edc3 7a00 	vstr	s15, [r3]
 800f178:	46d6      	mov	lr, sl
 800f17a:	dbcf      	blt.n	800f11c <pool_func_mp_array_f32+0x220>
 800f17c:	9b03      	ldr	r3, [sp, #12]
 800f17e:	9a08      	ldr	r2, [sp, #32]
 800f180:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800f182:	4413      	add	r3, r2
 800f184:	b29b      	uxth	r3, r3
 800f186:	3701      	adds	r7, #1
 800f188:	9303      	str	r3, [sp, #12]
 800f18a:	9b06      	ldr	r3, [sp, #24]
 800f18c:	b23f      	sxth	r7, r7
 800f18e:	4416      	add	r6, r2
 800f190:	42bb      	cmp	r3, r7
 800f192:	b2b6      	uxth	r6, r6
 800f194:	46ba      	mov	sl, r7
 800f196:	dcaf      	bgt.n	800f0f8 <pool_func_mp_array_f32+0x1fc>
 800f198:	9b00      	ldr	r3, [sp, #0]
 800f19a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f19c:	4413      	add	r3, r2
 800f19e:	b29b      	uxth	r3, r3
 800f1a0:	9300      	str	r3, [sp, #0]
 800f1a2:	9b01      	ldr	r3, [sp, #4]
 800f1a4:	3301      	adds	r3, #1
 800f1a6:	9301      	str	r3, [sp, #4]
 800f1a8:	e788      	b.n	800f0bc <pool_func_mp_array_f32+0x1c0>
 800f1aa:	eddf 7a01 	vldr	s15, [pc, #4]	; 800f1b0 <pool_func_mp_array_f32+0x2b4>
 800f1ae:	e7d7      	b.n	800f160 <pool_func_mp_array_f32+0x264>
 800f1b0:	cf000000 	.word	0xcf000000

0800f1b4 <ai_check_custom_types>:
 800f1b4:	4b13      	ldr	r3, [pc, #76]	; (800f204 <ai_check_custom_types+0x50>)
 800f1b6:	b082      	sub	sp, #8
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	9301      	str	r3, [sp, #4]
 800f1bc:	b118      	cbz	r0, 800f1c6 <ai_check_custom_types+0x12>
 800f1be:	7803      	ldrb	r3, [r0, #0]
 800f1c0:	2b03      	cmp	r3, #3
 800f1c2:	d002      	beq.n	800f1ca <ai_check_custom_types+0x16>
 800f1c4:	2000      	movs	r0, #0
 800f1c6:	b002      	add	sp, #8
 800f1c8:	4770      	bx	lr
 800f1ca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f1ce:	4293      	cmp	r3, r2
 800f1d0:	d004      	beq.n	800f1dc <ai_check_custom_types+0x28>
 800f1d2:	2001      	movs	r0, #1
 800f1d4:	f080 0001 	eor.w	r0, r0, #1
 800f1d8:	b002      	add	sp, #8
 800f1da:	4770      	bx	lr
 800f1dc:	7842      	ldrb	r2, [r0, #1]
 800f1de:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f1e2:	429a      	cmp	r2, r3
 800f1e4:	f100 0001 	add.w	r0, r0, #1
 800f1e8:	d1f3      	bne.n	800f1d2 <ai_check_custom_types+0x1e>
 800f1ea:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800f1ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f1f2:	429a      	cmp	r2, r3
 800f1f4:	d1ed      	bne.n	800f1d2 <ai_check_custom_types+0x1e>
 800f1f6:	7842      	ldrb	r2, [r0, #1]
 800f1f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f1fc:	429a      	cmp	r2, r3
 800f1fe:	d1e8      	bne.n	800f1d2 <ai_check_custom_types+0x1e>
 800f200:	2000      	movs	r0, #0
 800f202:	e7e7      	b.n	800f1d4 <ai_check_custom_types+0x20>
 800f204:	08011118 	.word	0x08011118

0800f208 <ai_layers_forward_all>:
 800f208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f20a:	6d86      	ldr	r6, [r0, #88]	; 0x58
 800f20c:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800f20e:	4604      	mov	r4, r0
 800f210:	b31e      	cbz	r6, 800f25a <ai_layers_forward_all+0x52>
 800f212:	b1cd      	cbz	r5, 800f248 <ai_layers_forward_all+0x40>
 800f214:	6545      	str	r5, [r0, #84]	; 0x54
 800f216:	4629      	mov	r1, r5
 800f218:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800f21a:	2001      	movs	r0, #1
 800f21c:	47b0      	blx	r6
 800f21e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800f220:	2700      	movs	r7, #0
 800f222:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800f224:	2002      	movs	r0, #2
 800f226:	47b0      	blx	r6
 800f228:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800f22a:	692b      	ldr	r3, [r5, #16]
 800f22c:	4628      	mov	r0, r5
 800f22e:	4798      	blx	r3
 800f230:	68eb      	ldr	r3, [r5, #12]
 800f232:	429d      	cmp	r5, r3
 800f234:	f04f 0003 	mov.w	r0, #3
 800f238:	4619      	mov	r1, r3
 800f23a:	d006      	beq.n	800f24a <ai_layers_forward_all+0x42>
 800f23c:	6563      	str	r3, [r4, #84]	; 0x54
 800f23e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800f240:	47b0      	blx	r6
 800f242:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800f244:	2900      	cmp	r1, #0
 800f246:	d1ec      	bne.n	800f222 <ai_layers_forward_all+0x1a>
 800f248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f24a:	2100      	movs	r1, #0
 800f24c:	6567      	str	r7, [r4, #84]	; 0x54
 800f24e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800f250:	47b0      	blx	r6
 800f252:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800f254:	2900      	cmp	r1, #0
 800f256:	d1e4      	bne.n	800f222 <ai_layers_forward_all+0x1a>
 800f258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f25a:	2d00      	cmp	r5, #0
 800f25c:	d0f4      	beq.n	800f248 <ai_layers_forward_all+0x40>
 800f25e:	6545      	str	r5, [r0, #84]	; 0x54
 800f260:	692b      	ldr	r3, [r5, #16]
 800f262:	4628      	mov	r0, r5
 800f264:	4798      	blx	r3
 800f266:	68eb      	ldr	r3, [r5, #12]
 800f268:	42ab      	cmp	r3, r5
 800f26a:	d004      	beq.n	800f276 <ai_layers_forward_all+0x6e>
 800f26c:	6563      	str	r3, [r4, #84]	; 0x54
 800f26e:	461d      	mov	r5, r3
 800f270:	2b00      	cmp	r3, #0
 800f272:	d1f5      	bne.n	800f260 <ai_layers_forward_all+0x58>
 800f274:	e7e8      	b.n	800f248 <ai_layers_forward_all+0x40>
 800f276:	2300      	movs	r3, #0
 800f278:	6563      	str	r3, [r4, #84]	; 0x54
 800f27a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f27c <ai_array_to_buffer_fmt>:
 800f27c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800f280:	2b02      	cmp	r3, #2
 800f282:	d01f      	beq.n	800f2c4 <ai_array_to_buffer_fmt+0x48>
 800f284:	4a1c      	ldr	r2, [pc, #112]	; (800f2f8 <ai_array_to_buffer_fmt+0x7c>)
 800f286:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800f28a:	4293      	cmp	r3, r2
 800f28c:	d00a      	beq.n	800f2a4 <ai_array_to_buffer_fmt+0x28>
 800f28e:	dc0d      	bgt.n	800f2ac <ai_array_to_buffer_fmt+0x30>
 800f290:	4a1a      	ldr	r2, [pc, #104]	; (800f2fc <ai_array_to_buffer_fmt+0x80>)
 800f292:	4293      	cmp	r3, r2
 800f294:	d006      	beq.n	800f2a4 <ai_array_to_buffer_fmt+0x28>
 800f296:	dd1d      	ble.n	800f2d4 <ai_array_to_buffer_fmt+0x58>
 800f298:	4a19      	ldr	r2, [pc, #100]	; (800f300 <ai_array_to_buffer_fmt+0x84>)
 800f29a:	4293      	cmp	r3, r2
 800f29c:	d002      	beq.n	800f2a4 <ai_array_to_buffer_fmt+0x28>
 800f29e:	320f      	adds	r2, #15
 800f2a0:	4293      	cmp	r3, r2
 800f2a2:	d10d      	bne.n	800f2c0 <ai_array_to_buffer_fmt+0x44>
 800f2a4:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800f2a8:	4318      	orrs	r0, r3
 800f2aa:	4770      	bx	lr
 800f2ac:	4a15      	ldr	r2, [pc, #84]	; (800f304 <ai_array_to_buffer_fmt+0x88>)
 800f2ae:	4293      	cmp	r3, r2
 800f2b0:	d0f8      	beq.n	800f2a4 <ai_array_to_buffer_fmt+0x28>
 800f2b2:	dd18      	ble.n	800f2e6 <ai_array_to_buffer_fmt+0x6a>
 800f2b4:	4a14      	ldr	r2, [pc, #80]	; (800f308 <ai_array_to_buffer_fmt+0x8c>)
 800f2b6:	4293      	cmp	r3, r2
 800f2b8:	d0f4      	beq.n	800f2a4 <ai_array_to_buffer_fmt+0x28>
 800f2ba:	4a14      	ldr	r2, [pc, #80]	; (800f30c <ai_array_to_buffer_fmt+0x90>)
 800f2bc:	4293      	cmp	r3, r2
 800f2be:	d0f1      	beq.n	800f2a4 <ai_array_to_buffer_fmt+0x28>
 800f2c0:	2340      	movs	r3, #64	; 0x40
 800f2c2:	e7ef      	b.n	800f2a4 <ai_array_to_buffer_fmt+0x28>
 800f2c4:	4b12      	ldr	r3, [pc, #72]	; (800f310 <ai_array_to_buffer_fmt+0x94>)
 800f2c6:	4003      	ands	r3, r0
 800f2c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f2cc:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800f2d0:	4318      	orrs	r0, r3
 800f2d2:	4770      	bx	lr
 800f2d4:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 800f2d8:	4293      	cmp	r3, r2
 800f2da:	d0e3      	beq.n	800f2a4 <ai_array_to_buffer_fmt+0x28>
 800f2dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f2e0:	4293      	cmp	r3, r2
 800f2e2:	d0df      	beq.n	800f2a4 <ai_array_to_buffer_fmt+0x28>
 800f2e4:	e7ec      	b.n	800f2c0 <ai_array_to_buffer_fmt+0x44>
 800f2e6:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800f2ea:	4293      	cmp	r3, r2
 800f2ec:	d0da      	beq.n	800f2a4 <ai_array_to_buffer_fmt+0x28>
 800f2ee:	3207      	adds	r2, #7
 800f2f0:	4293      	cmp	r3, r2
 800f2f2:	d0d7      	beq.n	800f2a4 <ai_array_to_buffer_fmt+0x28>
 800f2f4:	e7e4      	b.n	800f2c0 <ai_array_to_buffer_fmt+0x44>
 800f2f6:	bf00      	nop
 800f2f8:	00840040 	.word	0x00840040
 800f2fc:	00040447 	.word	0x00040447
 800f300:	00040840 	.word	0x00040840
 800f304:	00840840 	.word	0x00840840
 800f308:	0084084f 	.word	0x0084084f
 800f30c:	01821040 	.word	0x01821040
 800f310:	00803fff 	.word	0x00803fff

0800f314 <ai_array_get_byte_size>:
 800f314:	b1c1      	cbz	r1, 800f348 <ai_array_get_byte_size+0x34>
 800f316:	f3c0 3282 	ubfx	r2, r0, #14, #3
 800f31a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800f31e:	4413      	add	r3, r2
 800f320:	fb01 f103 	mul.w	r1, r1, r3
 800f324:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800f328:	3107      	adds	r1, #7
 800f32a:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800f32e:	f021 0107 	bic.w	r1, r1, #7
 800f332:	2804      	cmp	r0, #4
 800f334:	fa21 f102 	lsr.w	r1, r1, r2
 800f338:	d008      	beq.n	800f34c <ai_array_get_byte_size+0x38>
 800f33a:	2808      	cmp	r0, #8
 800f33c:	d101      	bne.n	800f342 <ai_array_get_byte_size+0x2e>
 800f33e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800f342:	3107      	adds	r1, #7
 800f344:	08c8      	lsrs	r0, r1, #3
 800f346:	4770      	bx	lr
 800f348:	4608      	mov	r0, r1
 800f34a:	4770      	bx	lr
 800f34c:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800f350:	3107      	adds	r1, #7
 800f352:	08c8      	lsrs	r0, r1, #3
 800f354:	4770      	bx	lr
 800f356:	bf00      	nop

0800f358 <__errno>:
 800f358:	4b01      	ldr	r3, [pc, #4]	; (800f360 <__errno+0x8>)
 800f35a:	6818      	ldr	r0, [r3, #0]
 800f35c:	4770      	bx	lr
 800f35e:	bf00      	nop
 800f360:	20000874 	.word	0x20000874

0800f364 <__libc_init_array>:
 800f364:	b570      	push	{r4, r5, r6, lr}
 800f366:	4e0d      	ldr	r6, [pc, #52]	; (800f39c <__libc_init_array+0x38>)
 800f368:	4c0d      	ldr	r4, [pc, #52]	; (800f3a0 <__libc_init_array+0x3c>)
 800f36a:	1ba4      	subs	r4, r4, r6
 800f36c:	10a4      	asrs	r4, r4, #2
 800f36e:	2500      	movs	r5, #0
 800f370:	42a5      	cmp	r5, r4
 800f372:	d109      	bne.n	800f388 <__libc_init_array+0x24>
 800f374:	4e0b      	ldr	r6, [pc, #44]	; (800f3a4 <__libc_init_array+0x40>)
 800f376:	4c0c      	ldr	r4, [pc, #48]	; (800f3a8 <__libc_init_array+0x44>)
 800f378:	f001 f8f0 	bl	801055c <_init>
 800f37c:	1ba4      	subs	r4, r4, r6
 800f37e:	10a4      	asrs	r4, r4, #2
 800f380:	2500      	movs	r5, #0
 800f382:	42a5      	cmp	r5, r4
 800f384:	d105      	bne.n	800f392 <__libc_init_array+0x2e>
 800f386:	bd70      	pop	{r4, r5, r6, pc}
 800f388:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f38c:	4798      	blx	r3
 800f38e:	3501      	adds	r5, #1
 800f390:	e7ee      	b.n	800f370 <__libc_init_array+0xc>
 800f392:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f396:	4798      	blx	r3
 800f398:	3501      	adds	r5, #1
 800f39a:	e7f2      	b.n	800f382 <__libc_init_array+0x1e>
 800f39c:	0801b9dc 	.word	0x0801b9dc
 800f3a0:	0801b9dc 	.word	0x0801b9dc
 800f3a4:	0801b9dc 	.word	0x0801b9dc
 800f3a8:	0801b9e0 	.word	0x0801b9e0

0800f3ac <malloc>:
 800f3ac:	4b02      	ldr	r3, [pc, #8]	; (800f3b8 <malloc+0xc>)
 800f3ae:	4601      	mov	r1, r0
 800f3b0:	6818      	ldr	r0, [r3, #0]
 800f3b2:	f000 b86d 	b.w	800f490 <_malloc_r>
 800f3b6:	bf00      	nop
 800f3b8:	20000874 	.word	0x20000874

0800f3bc <free>:
 800f3bc:	4b02      	ldr	r3, [pc, #8]	; (800f3c8 <free+0xc>)
 800f3be:	4601      	mov	r1, r0
 800f3c0:	6818      	ldr	r0, [r3, #0]
 800f3c2:	f000 b817 	b.w	800f3f4 <_free_r>
 800f3c6:	bf00      	nop
 800f3c8:	20000874 	.word	0x20000874

0800f3cc <memcpy>:
 800f3cc:	b510      	push	{r4, lr}
 800f3ce:	1e43      	subs	r3, r0, #1
 800f3d0:	440a      	add	r2, r1
 800f3d2:	4291      	cmp	r1, r2
 800f3d4:	d100      	bne.n	800f3d8 <memcpy+0xc>
 800f3d6:	bd10      	pop	{r4, pc}
 800f3d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f3dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f3e0:	e7f7      	b.n	800f3d2 <memcpy+0x6>

0800f3e2 <memset>:
 800f3e2:	4402      	add	r2, r0
 800f3e4:	4603      	mov	r3, r0
 800f3e6:	4293      	cmp	r3, r2
 800f3e8:	d100      	bne.n	800f3ec <memset+0xa>
 800f3ea:	4770      	bx	lr
 800f3ec:	f803 1b01 	strb.w	r1, [r3], #1
 800f3f0:	e7f9      	b.n	800f3e6 <memset+0x4>
	...

0800f3f4 <_free_r>:
 800f3f4:	b538      	push	{r3, r4, r5, lr}
 800f3f6:	4605      	mov	r5, r0
 800f3f8:	2900      	cmp	r1, #0
 800f3fa:	d045      	beq.n	800f488 <_free_r+0x94>
 800f3fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f400:	1f0c      	subs	r4, r1, #4
 800f402:	2b00      	cmp	r3, #0
 800f404:	bfb8      	it	lt
 800f406:	18e4      	addlt	r4, r4, r3
 800f408:	f000 fbd8 	bl	800fbbc <__malloc_lock>
 800f40c:	4a1f      	ldr	r2, [pc, #124]	; (800f48c <_free_r+0x98>)
 800f40e:	6813      	ldr	r3, [r2, #0]
 800f410:	4610      	mov	r0, r2
 800f412:	b933      	cbnz	r3, 800f422 <_free_r+0x2e>
 800f414:	6063      	str	r3, [r4, #4]
 800f416:	6014      	str	r4, [r2, #0]
 800f418:	4628      	mov	r0, r5
 800f41a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f41e:	f000 bbce 	b.w	800fbbe <__malloc_unlock>
 800f422:	42a3      	cmp	r3, r4
 800f424:	d90c      	bls.n	800f440 <_free_r+0x4c>
 800f426:	6821      	ldr	r1, [r4, #0]
 800f428:	1862      	adds	r2, r4, r1
 800f42a:	4293      	cmp	r3, r2
 800f42c:	bf04      	itt	eq
 800f42e:	681a      	ldreq	r2, [r3, #0]
 800f430:	685b      	ldreq	r3, [r3, #4]
 800f432:	6063      	str	r3, [r4, #4]
 800f434:	bf04      	itt	eq
 800f436:	1852      	addeq	r2, r2, r1
 800f438:	6022      	streq	r2, [r4, #0]
 800f43a:	6004      	str	r4, [r0, #0]
 800f43c:	e7ec      	b.n	800f418 <_free_r+0x24>
 800f43e:	4613      	mov	r3, r2
 800f440:	685a      	ldr	r2, [r3, #4]
 800f442:	b10a      	cbz	r2, 800f448 <_free_r+0x54>
 800f444:	42a2      	cmp	r2, r4
 800f446:	d9fa      	bls.n	800f43e <_free_r+0x4a>
 800f448:	6819      	ldr	r1, [r3, #0]
 800f44a:	1858      	adds	r0, r3, r1
 800f44c:	42a0      	cmp	r0, r4
 800f44e:	d10b      	bne.n	800f468 <_free_r+0x74>
 800f450:	6820      	ldr	r0, [r4, #0]
 800f452:	4401      	add	r1, r0
 800f454:	1858      	adds	r0, r3, r1
 800f456:	4282      	cmp	r2, r0
 800f458:	6019      	str	r1, [r3, #0]
 800f45a:	d1dd      	bne.n	800f418 <_free_r+0x24>
 800f45c:	6810      	ldr	r0, [r2, #0]
 800f45e:	6852      	ldr	r2, [r2, #4]
 800f460:	605a      	str	r2, [r3, #4]
 800f462:	4401      	add	r1, r0
 800f464:	6019      	str	r1, [r3, #0]
 800f466:	e7d7      	b.n	800f418 <_free_r+0x24>
 800f468:	d902      	bls.n	800f470 <_free_r+0x7c>
 800f46a:	230c      	movs	r3, #12
 800f46c:	602b      	str	r3, [r5, #0]
 800f46e:	e7d3      	b.n	800f418 <_free_r+0x24>
 800f470:	6820      	ldr	r0, [r4, #0]
 800f472:	1821      	adds	r1, r4, r0
 800f474:	428a      	cmp	r2, r1
 800f476:	bf04      	itt	eq
 800f478:	6811      	ldreq	r1, [r2, #0]
 800f47a:	6852      	ldreq	r2, [r2, #4]
 800f47c:	6062      	str	r2, [r4, #4]
 800f47e:	bf04      	itt	eq
 800f480:	1809      	addeq	r1, r1, r0
 800f482:	6021      	streq	r1, [r4, #0]
 800f484:	605c      	str	r4, [r3, #4]
 800f486:	e7c7      	b.n	800f418 <_free_r+0x24>
 800f488:	bd38      	pop	{r3, r4, r5, pc}
 800f48a:	bf00      	nop
 800f48c:	2004ece4 	.word	0x2004ece4

0800f490 <_malloc_r>:
 800f490:	b570      	push	{r4, r5, r6, lr}
 800f492:	1ccd      	adds	r5, r1, #3
 800f494:	f025 0503 	bic.w	r5, r5, #3
 800f498:	3508      	adds	r5, #8
 800f49a:	2d0c      	cmp	r5, #12
 800f49c:	bf38      	it	cc
 800f49e:	250c      	movcc	r5, #12
 800f4a0:	2d00      	cmp	r5, #0
 800f4a2:	4606      	mov	r6, r0
 800f4a4:	db01      	blt.n	800f4aa <_malloc_r+0x1a>
 800f4a6:	42a9      	cmp	r1, r5
 800f4a8:	d903      	bls.n	800f4b2 <_malloc_r+0x22>
 800f4aa:	230c      	movs	r3, #12
 800f4ac:	6033      	str	r3, [r6, #0]
 800f4ae:	2000      	movs	r0, #0
 800f4b0:	bd70      	pop	{r4, r5, r6, pc}
 800f4b2:	f000 fb83 	bl	800fbbc <__malloc_lock>
 800f4b6:	4a21      	ldr	r2, [pc, #132]	; (800f53c <_malloc_r+0xac>)
 800f4b8:	6814      	ldr	r4, [r2, #0]
 800f4ba:	4621      	mov	r1, r4
 800f4bc:	b991      	cbnz	r1, 800f4e4 <_malloc_r+0x54>
 800f4be:	4c20      	ldr	r4, [pc, #128]	; (800f540 <_malloc_r+0xb0>)
 800f4c0:	6823      	ldr	r3, [r4, #0]
 800f4c2:	b91b      	cbnz	r3, 800f4cc <_malloc_r+0x3c>
 800f4c4:	4630      	mov	r0, r6
 800f4c6:	f000 f8b9 	bl	800f63c <_sbrk_r>
 800f4ca:	6020      	str	r0, [r4, #0]
 800f4cc:	4629      	mov	r1, r5
 800f4ce:	4630      	mov	r0, r6
 800f4d0:	f000 f8b4 	bl	800f63c <_sbrk_r>
 800f4d4:	1c43      	adds	r3, r0, #1
 800f4d6:	d124      	bne.n	800f522 <_malloc_r+0x92>
 800f4d8:	230c      	movs	r3, #12
 800f4da:	6033      	str	r3, [r6, #0]
 800f4dc:	4630      	mov	r0, r6
 800f4de:	f000 fb6e 	bl	800fbbe <__malloc_unlock>
 800f4e2:	e7e4      	b.n	800f4ae <_malloc_r+0x1e>
 800f4e4:	680b      	ldr	r3, [r1, #0]
 800f4e6:	1b5b      	subs	r3, r3, r5
 800f4e8:	d418      	bmi.n	800f51c <_malloc_r+0x8c>
 800f4ea:	2b0b      	cmp	r3, #11
 800f4ec:	d90f      	bls.n	800f50e <_malloc_r+0x7e>
 800f4ee:	600b      	str	r3, [r1, #0]
 800f4f0:	50cd      	str	r5, [r1, r3]
 800f4f2:	18cc      	adds	r4, r1, r3
 800f4f4:	4630      	mov	r0, r6
 800f4f6:	f000 fb62 	bl	800fbbe <__malloc_unlock>
 800f4fa:	f104 000b 	add.w	r0, r4, #11
 800f4fe:	1d23      	adds	r3, r4, #4
 800f500:	f020 0007 	bic.w	r0, r0, #7
 800f504:	1ac3      	subs	r3, r0, r3
 800f506:	d0d3      	beq.n	800f4b0 <_malloc_r+0x20>
 800f508:	425a      	negs	r2, r3
 800f50a:	50e2      	str	r2, [r4, r3]
 800f50c:	e7d0      	b.n	800f4b0 <_malloc_r+0x20>
 800f50e:	428c      	cmp	r4, r1
 800f510:	684b      	ldr	r3, [r1, #4]
 800f512:	bf16      	itet	ne
 800f514:	6063      	strne	r3, [r4, #4]
 800f516:	6013      	streq	r3, [r2, #0]
 800f518:	460c      	movne	r4, r1
 800f51a:	e7eb      	b.n	800f4f4 <_malloc_r+0x64>
 800f51c:	460c      	mov	r4, r1
 800f51e:	6849      	ldr	r1, [r1, #4]
 800f520:	e7cc      	b.n	800f4bc <_malloc_r+0x2c>
 800f522:	1cc4      	adds	r4, r0, #3
 800f524:	f024 0403 	bic.w	r4, r4, #3
 800f528:	42a0      	cmp	r0, r4
 800f52a:	d005      	beq.n	800f538 <_malloc_r+0xa8>
 800f52c:	1a21      	subs	r1, r4, r0
 800f52e:	4630      	mov	r0, r6
 800f530:	f000 f884 	bl	800f63c <_sbrk_r>
 800f534:	3001      	adds	r0, #1
 800f536:	d0cf      	beq.n	800f4d8 <_malloc_r+0x48>
 800f538:	6025      	str	r5, [r4, #0]
 800f53a:	e7db      	b.n	800f4f4 <_malloc_r+0x64>
 800f53c:	2004ece4 	.word	0x2004ece4
 800f540:	2004ece8 	.word	0x2004ece8

0800f544 <iprintf>:
 800f544:	b40f      	push	{r0, r1, r2, r3}
 800f546:	4b0a      	ldr	r3, [pc, #40]	; (800f570 <iprintf+0x2c>)
 800f548:	b513      	push	{r0, r1, r4, lr}
 800f54a:	681c      	ldr	r4, [r3, #0]
 800f54c:	b124      	cbz	r4, 800f558 <iprintf+0x14>
 800f54e:	69a3      	ldr	r3, [r4, #24]
 800f550:	b913      	cbnz	r3, 800f558 <iprintf+0x14>
 800f552:	4620      	mov	r0, r4
 800f554:	f000 fa44 	bl	800f9e0 <__sinit>
 800f558:	ab05      	add	r3, sp, #20
 800f55a:	9a04      	ldr	r2, [sp, #16]
 800f55c:	68a1      	ldr	r1, [r4, #8]
 800f55e:	9301      	str	r3, [sp, #4]
 800f560:	4620      	mov	r0, r4
 800f562:	f000 fb57 	bl	800fc14 <_vfiprintf_r>
 800f566:	b002      	add	sp, #8
 800f568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f56c:	b004      	add	sp, #16
 800f56e:	4770      	bx	lr
 800f570:	20000874 	.word	0x20000874

0800f574 <_puts_r>:
 800f574:	b570      	push	{r4, r5, r6, lr}
 800f576:	460e      	mov	r6, r1
 800f578:	4605      	mov	r5, r0
 800f57a:	b118      	cbz	r0, 800f584 <_puts_r+0x10>
 800f57c:	6983      	ldr	r3, [r0, #24]
 800f57e:	b90b      	cbnz	r3, 800f584 <_puts_r+0x10>
 800f580:	f000 fa2e 	bl	800f9e0 <__sinit>
 800f584:	69ab      	ldr	r3, [r5, #24]
 800f586:	68ac      	ldr	r4, [r5, #8]
 800f588:	b913      	cbnz	r3, 800f590 <_puts_r+0x1c>
 800f58a:	4628      	mov	r0, r5
 800f58c:	f000 fa28 	bl	800f9e0 <__sinit>
 800f590:	4b23      	ldr	r3, [pc, #140]	; (800f620 <_puts_r+0xac>)
 800f592:	429c      	cmp	r4, r3
 800f594:	d117      	bne.n	800f5c6 <_puts_r+0x52>
 800f596:	686c      	ldr	r4, [r5, #4]
 800f598:	89a3      	ldrh	r3, [r4, #12]
 800f59a:	071b      	lsls	r3, r3, #28
 800f59c:	d51d      	bpl.n	800f5da <_puts_r+0x66>
 800f59e:	6923      	ldr	r3, [r4, #16]
 800f5a0:	b1db      	cbz	r3, 800f5da <_puts_r+0x66>
 800f5a2:	3e01      	subs	r6, #1
 800f5a4:	68a3      	ldr	r3, [r4, #8]
 800f5a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f5aa:	3b01      	subs	r3, #1
 800f5ac:	60a3      	str	r3, [r4, #8]
 800f5ae:	b9e9      	cbnz	r1, 800f5ec <_puts_r+0x78>
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	da2e      	bge.n	800f612 <_puts_r+0x9e>
 800f5b4:	4622      	mov	r2, r4
 800f5b6:	210a      	movs	r1, #10
 800f5b8:	4628      	mov	r0, r5
 800f5ba:	f000 f861 	bl	800f680 <__swbuf_r>
 800f5be:	3001      	adds	r0, #1
 800f5c0:	d011      	beq.n	800f5e6 <_puts_r+0x72>
 800f5c2:	200a      	movs	r0, #10
 800f5c4:	e011      	b.n	800f5ea <_puts_r+0x76>
 800f5c6:	4b17      	ldr	r3, [pc, #92]	; (800f624 <_puts_r+0xb0>)
 800f5c8:	429c      	cmp	r4, r3
 800f5ca:	d101      	bne.n	800f5d0 <_puts_r+0x5c>
 800f5cc:	68ac      	ldr	r4, [r5, #8]
 800f5ce:	e7e3      	b.n	800f598 <_puts_r+0x24>
 800f5d0:	4b15      	ldr	r3, [pc, #84]	; (800f628 <_puts_r+0xb4>)
 800f5d2:	429c      	cmp	r4, r3
 800f5d4:	bf08      	it	eq
 800f5d6:	68ec      	ldreq	r4, [r5, #12]
 800f5d8:	e7de      	b.n	800f598 <_puts_r+0x24>
 800f5da:	4621      	mov	r1, r4
 800f5dc:	4628      	mov	r0, r5
 800f5de:	f000 f8a1 	bl	800f724 <__swsetup_r>
 800f5e2:	2800      	cmp	r0, #0
 800f5e4:	d0dd      	beq.n	800f5a2 <_puts_r+0x2e>
 800f5e6:	f04f 30ff 	mov.w	r0, #4294967295
 800f5ea:	bd70      	pop	{r4, r5, r6, pc}
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	da04      	bge.n	800f5fa <_puts_r+0x86>
 800f5f0:	69a2      	ldr	r2, [r4, #24]
 800f5f2:	429a      	cmp	r2, r3
 800f5f4:	dc06      	bgt.n	800f604 <_puts_r+0x90>
 800f5f6:	290a      	cmp	r1, #10
 800f5f8:	d004      	beq.n	800f604 <_puts_r+0x90>
 800f5fa:	6823      	ldr	r3, [r4, #0]
 800f5fc:	1c5a      	adds	r2, r3, #1
 800f5fe:	6022      	str	r2, [r4, #0]
 800f600:	7019      	strb	r1, [r3, #0]
 800f602:	e7cf      	b.n	800f5a4 <_puts_r+0x30>
 800f604:	4622      	mov	r2, r4
 800f606:	4628      	mov	r0, r5
 800f608:	f000 f83a 	bl	800f680 <__swbuf_r>
 800f60c:	3001      	adds	r0, #1
 800f60e:	d1c9      	bne.n	800f5a4 <_puts_r+0x30>
 800f610:	e7e9      	b.n	800f5e6 <_puts_r+0x72>
 800f612:	6823      	ldr	r3, [r4, #0]
 800f614:	200a      	movs	r0, #10
 800f616:	1c5a      	adds	r2, r3, #1
 800f618:	6022      	str	r2, [r4, #0]
 800f61a:	7018      	strb	r0, [r3, #0]
 800f61c:	e7e5      	b.n	800f5ea <_puts_r+0x76>
 800f61e:	bf00      	nop
 800f620:	0801b944 	.word	0x0801b944
 800f624:	0801b964 	.word	0x0801b964
 800f628:	0801b924 	.word	0x0801b924

0800f62c <puts>:
 800f62c:	4b02      	ldr	r3, [pc, #8]	; (800f638 <puts+0xc>)
 800f62e:	4601      	mov	r1, r0
 800f630:	6818      	ldr	r0, [r3, #0]
 800f632:	f7ff bf9f 	b.w	800f574 <_puts_r>
 800f636:	bf00      	nop
 800f638:	20000874 	.word	0x20000874

0800f63c <_sbrk_r>:
 800f63c:	b538      	push	{r3, r4, r5, lr}
 800f63e:	4c06      	ldr	r4, [pc, #24]	; (800f658 <_sbrk_r+0x1c>)
 800f640:	2300      	movs	r3, #0
 800f642:	4605      	mov	r5, r0
 800f644:	4608      	mov	r0, r1
 800f646:	6023      	str	r3, [r4, #0]
 800f648:	f7f1 fe4a 	bl	80012e0 <_sbrk>
 800f64c:	1c43      	adds	r3, r0, #1
 800f64e:	d102      	bne.n	800f656 <_sbrk_r+0x1a>
 800f650:	6823      	ldr	r3, [r4, #0]
 800f652:	b103      	cbz	r3, 800f656 <_sbrk_r+0x1a>
 800f654:	602b      	str	r3, [r5, #0]
 800f656:	bd38      	pop	{r3, r4, r5, pc}
 800f658:	2006a7e0 	.word	0x2006a7e0

0800f65c <strncmp>:
 800f65c:	b510      	push	{r4, lr}
 800f65e:	b16a      	cbz	r2, 800f67c <strncmp+0x20>
 800f660:	3901      	subs	r1, #1
 800f662:	1884      	adds	r4, r0, r2
 800f664:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f668:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f66c:	4293      	cmp	r3, r2
 800f66e:	d103      	bne.n	800f678 <strncmp+0x1c>
 800f670:	42a0      	cmp	r0, r4
 800f672:	d001      	beq.n	800f678 <strncmp+0x1c>
 800f674:	2b00      	cmp	r3, #0
 800f676:	d1f5      	bne.n	800f664 <strncmp+0x8>
 800f678:	1a98      	subs	r0, r3, r2
 800f67a:	bd10      	pop	{r4, pc}
 800f67c:	4610      	mov	r0, r2
 800f67e:	e7fc      	b.n	800f67a <strncmp+0x1e>

0800f680 <__swbuf_r>:
 800f680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f682:	460e      	mov	r6, r1
 800f684:	4614      	mov	r4, r2
 800f686:	4605      	mov	r5, r0
 800f688:	b118      	cbz	r0, 800f692 <__swbuf_r+0x12>
 800f68a:	6983      	ldr	r3, [r0, #24]
 800f68c:	b90b      	cbnz	r3, 800f692 <__swbuf_r+0x12>
 800f68e:	f000 f9a7 	bl	800f9e0 <__sinit>
 800f692:	4b21      	ldr	r3, [pc, #132]	; (800f718 <__swbuf_r+0x98>)
 800f694:	429c      	cmp	r4, r3
 800f696:	d12a      	bne.n	800f6ee <__swbuf_r+0x6e>
 800f698:	686c      	ldr	r4, [r5, #4]
 800f69a:	69a3      	ldr	r3, [r4, #24]
 800f69c:	60a3      	str	r3, [r4, #8]
 800f69e:	89a3      	ldrh	r3, [r4, #12]
 800f6a0:	071a      	lsls	r2, r3, #28
 800f6a2:	d52e      	bpl.n	800f702 <__swbuf_r+0x82>
 800f6a4:	6923      	ldr	r3, [r4, #16]
 800f6a6:	b363      	cbz	r3, 800f702 <__swbuf_r+0x82>
 800f6a8:	6923      	ldr	r3, [r4, #16]
 800f6aa:	6820      	ldr	r0, [r4, #0]
 800f6ac:	1ac0      	subs	r0, r0, r3
 800f6ae:	6963      	ldr	r3, [r4, #20]
 800f6b0:	b2f6      	uxtb	r6, r6
 800f6b2:	4283      	cmp	r3, r0
 800f6b4:	4637      	mov	r7, r6
 800f6b6:	dc04      	bgt.n	800f6c2 <__swbuf_r+0x42>
 800f6b8:	4621      	mov	r1, r4
 800f6ba:	4628      	mov	r0, r5
 800f6bc:	f000 f926 	bl	800f90c <_fflush_r>
 800f6c0:	bb28      	cbnz	r0, 800f70e <__swbuf_r+0x8e>
 800f6c2:	68a3      	ldr	r3, [r4, #8]
 800f6c4:	3b01      	subs	r3, #1
 800f6c6:	60a3      	str	r3, [r4, #8]
 800f6c8:	6823      	ldr	r3, [r4, #0]
 800f6ca:	1c5a      	adds	r2, r3, #1
 800f6cc:	6022      	str	r2, [r4, #0]
 800f6ce:	701e      	strb	r6, [r3, #0]
 800f6d0:	6963      	ldr	r3, [r4, #20]
 800f6d2:	3001      	adds	r0, #1
 800f6d4:	4283      	cmp	r3, r0
 800f6d6:	d004      	beq.n	800f6e2 <__swbuf_r+0x62>
 800f6d8:	89a3      	ldrh	r3, [r4, #12]
 800f6da:	07db      	lsls	r3, r3, #31
 800f6dc:	d519      	bpl.n	800f712 <__swbuf_r+0x92>
 800f6de:	2e0a      	cmp	r6, #10
 800f6e0:	d117      	bne.n	800f712 <__swbuf_r+0x92>
 800f6e2:	4621      	mov	r1, r4
 800f6e4:	4628      	mov	r0, r5
 800f6e6:	f000 f911 	bl	800f90c <_fflush_r>
 800f6ea:	b190      	cbz	r0, 800f712 <__swbuf_r+0x92>
 800f6ec:	e00f      	b.n	800f70e <__swbuf_r+0x8e>
 800f6ee:	4b0b      	ldr	r3, [pc, #44]	; (800f71c <__swbuf_r+0x9c>)
 800f6f0:	429c      	cmp	r4, r3
 800f6f2:	d101      	bne.n	800f6f8 <__swbuf_r+0x78>
 800f6f4:	68ac      	ldr	r4, [r5, #8]
 800f6f6:	e7d0      	b.n	800f69a <__swbuf_r+0x1a>
 800f6f8:	4b09      	ldr	r3, [pc, #36]	; (800f720 <__swbuf_r+0xa0>)
 800f6fa:	429c      	cmp	r4, r3
 800f6fc:	bf08      	it	eq
 800f6fe:	68ec      	ldreq	r4, [r5, #12]
 800f700:	e7cb      	b.n	800f69a <__swbuf_r+0x1a>
 800f702:	4621      	mov	r1, r4
 800f704:	4628      	mov	r0, r5
 800f706:	f000 f80d 	bl	800f724 <__swsetup_r>
 800f70a:	2800      	cmp	r0, #0
 800f70c:	d0cc      	beq.n	800f6a8 <__swbuf_r+0x28>
 800f70e:	f04f 37ff 	mov.w	r7, #4294967295
 800f712:	4638      	mov	r0, r7
 800f714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f716:	bf00      	nop
 800f718:	0801b944 	.word	0x0801b944
 800f71c:	0801b964 	.word	0x0801b964
 800f720:	0801b924 	.word	0x0801b924

0800f724 <__swsetup_r>:
 800f724:	4b32      	ldr	r3, [pc, #200]	; (800f7f0 <__swsetup_r+0xcc>)
 800f726:	b570      	push	{r4, r5, r6, lr}
 800f728:	681d      	ldr	r5, [r3, #0]
 800f72a:	4606      	mov	r6, r0
 800f72c:	460c      	mov	r4, r1
 800f72e:	b125      	cbz	r5, 800f73a <__swsetup_r+0x16>
 800f730:	69ab      	ldr	r3, [r5, #24]
 800f732:	b913      	cbnz	r3, 800f73a <__swsetup_r+0x16>
 800f734:	4628      	mov	r0, r5
 800f736:	f000 f953 	bl	800f9e0 <__sinit>
 800f73a:	4b2e      	ldr	r3, [pc, #184]	; (800f7f4 <__swsetup_r+0xd0>)
 800f73c:	429c      	cmp	r4, r3
 800f73e:	d10f      	bne.n	800f760 <__swsetup_r+0x3c>
 800f740:	686c      	ldr	r4, [r5, #4]
 800f742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f746:	b29a      	uxth	r2, r3
 800f748:	0715      	lsls	r5, r2, #28
 800f74a:	d42c      	bmi.n	800f7a6 <__swsetup_r+0x82>
 800f74c:	06d0      	lsls	r0, r2, #27
 800f74e:	d411      	bmi.n	800f774 <__swsetup_r+0x50>
 800f750:	2209      	movs	r2, #9
 800f752:	6032      	str	r2, [r6, #0]
 800f754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f758:	81a3      	strh	r3, [r4, #12]
 800f75a:	f04f 30ff 	mov.w	r0, #4294967295
 800f75e:	e03e      	b.n	800f7de <__swsetup_r+0xba>
 800f760:	4b25      	ldr	r3, [pc, #148]	; (800f7f8 <__swsetup_r+0xd4>)
 800f762:	429c      	cmp	r4, r3
 800f764:	d101      	bne.n	800f76a <__swsetup_r+0x46>
 800f766:	68ac      	ldr	r4, [r5, #8]
 800f768:	e7eb      	b.n	800f742 <__swsetup_r+0x1e>
 800f76a:	4b24      	ldr	r3, [pc, #144]	; (800f7fc <__swsetup_r+0xd8>)
 800f76c:	429c      	cmp	r4, r3
 800f76e:	bf08      	it	eq
 800f770:	68ec      	ldreq	r4, [r5, #12]
 800f772:	e7e6      	b.n	800f742 <__swsetup_r+0x1e>
 800f774:	0751      	lsls	r1, r2, #29
 800f776:	d512      	bpl.n	800f79e <__swsetup_r+0x7a>
 800f778:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f77a:	b141      	cbz	r1, 800f78e <__swsetup_r+0x6a>
 800f77c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f780:	4299      	cmp	r1, r3
 800f782:	d002      	beq.n	800f78a <__swsetup_r+0x66>
 800f784:	4630      	mov	r0, r6
 800f786:	f7ff fe35 	bl	800f3f4 <_free_r>
 800f78a:	2300      	movs	r3, #0
 800f78c:	6363      	str	r3, [r4, #52]	; 0x34
 800f78e:	89a3      	ldrh	r3, [r4, #12]
 800f790:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f794:	81a3      	strh	r3, [r4, #12]
 800f796:	2300      	movs	r3, #0
 800f798:	6063      	str	r3, [r4, #4]
 800f79a:	6923      	ldr	r3, [r4, #16]
 800f79c:	6023      	str	r3, [r4, #0]
 800f79e:	89a3      	ldrh	r3, [r4, #12]
 800f7a0:	f043 0308 	orr.w	r3, r3, #8
 800f7a4:	81a3      	strh	r3, [r4, #12]
 800f7a6:	6923      	ldr	r3, [r4, #16]
 800f7a8:	b94b      	cbnz	r3, 800f7be <__swsetup_r+0x9a>
 800f7aa:	89a3      	ldrh	r3, [r4, #12]
 800f7ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f7b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f7b4:	d003      	beq.n	800f7be <__swsetup_r+0x9a>
 800f7b6:	4621      	mov	r1, r4
 800f7b8:	4630      	mov	r0, r6
 800f7ba:	f000 f9bf 	bl	800fb3c <__smakebuf_r>
 800f7be:	89a2      	ldrh	r2, [r4, #12]
 800f7c0:	f012 0301 	ands.w	r3, r2, #1
 800f7c4:	d00c      	beq.n	800f7e0 <__swsetup_r+0xbc>
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	60a3      	str	r3, [r4, #8]
 800f7ca:	6963      	ldr	r3, [r4, #20]
 800f7cc:	425b      	negs	r3, r3
 800f7ce:	61a3      	str	r3, [r4, #24]
 800f7d0:	6923      	ldr	r3, [r4, #16]
 800f7d2:	b953      	cbnz	r3, 800f7ea <__swsetup_r+0xc6>
 800f7d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7d8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800f7dc:	d1ba      	bne.n	800f754 <__swsetup_r+0x30>
 800f7de:	bd70      	pop	{r4, r5, r6, pc}
 800f7e0:	0792      	lsls	r2, r2, #30
 800f7e2:	bf58      	it	pl
 800f7e4:	6963      	ldrpl	r3, [r4, #20]
 800f7e6:	60a3      	str	r3, [r4, #8]
 800f7e8:	e7f2      	b.n	800f7d0 <__swsetup_r+0xac>
 800f7ea:	2000      	movs	r0, #0
 800f7ec:	e7f7      	b.n	800f7de <__swsetup_r+0xba>
 800f7ee:	bf00      	nop
 800f7f0:	20000874 	.word	0x20000874
 800f7f4:	0801b944 	.word	0x0801b944
 800f7f8:	0801b964 	.word	0x0801b964
 800f7fc:	0801b924 	.word	0x0801b924

0800f800 <__sflush_r>:
 800f800:	898a      	ldrh	r2, [r1, #12]
 800f802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f806:	4605      	mov	r5, r0
 800f808:	0710      	lsls	r0, r2, #28
 800f80a:	460c      	mov	r4, r1
 800f80c:	d458      	bmi.n	800f8c0 <__sflush_r+0xc0>
 800f80e:	684b      	ldr	r3, [r1, #4]
 800f810:	2b00      	cmp	r3, #0
 800f812:	dc05      	bgt.n	800f820 <__sflush_r+0x20>
 800f814:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f816:	2b00      	cmp	r3, #0
 800f818:	dc02      	bgt.n	800f820 <__sflush_r+0x20>
 800f81a:	2000      	movs	r0, #0
 800f81c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f820:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f822:	2e00      	cmp	r6, #0
 800f824:	d0f9      	beq.n	800f81a <__sflush_r+0x1a>
 800f826:	2300      	movs	r3, #0
 800f828:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f82c:	682f      	ldr	r7, [r5, #0]
 800f82e:	6a21      	ldr	r1, [r4, #32]
 800f830:	602b      	str	r3, [r5, #0]
 800f832:	d032      	beq.n	800f89a <__sflush_r+0x9a>
 800f834:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f836:	89a3      	ldrh	r3, [r4, #12]
 800f838:	075a      	lsls	r2, r3, #29
 800f83a:	d505      	bpl.n	800f848 <__sflush_r+0x48>
 800f83c:	6863      	ldr	r3, [r4, #4]
 800f83e:	1ac0      	subs	r0, r0, r3
 800f840:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f842:	b10b      	cbz	r3, 800f848 <__sflush_r+0x48>
 800f844:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f846:	1ac0      	subs	r0, r0, r3
 800f848:	2300      	movs	r3, #0
 800f84a:	4602      	mov	r2, r0
 800f84c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f84e:	6a21      	ldr	r1, [r4, #32]
 800f850:	4628      	mov	r0, r5
 800f852:	47b0      	blx	r6
 800f854:	1c43      	adds	r3, r0, #1
 800f856:	89a3      	ldrh	r3, [r4, #12]
 800f858:	d106      	bne.n	800f868 <__sflush_r+0x68>
 800f85a:	6829      	ldr	r1, [r5, #0]
 800f85c:	291d      	cmp	r1, #29
 800f85e:	d848      	bhi.n	800f8f2 <__sflush_r+0xf2>
 800f860:	4a29      	ldr	r2, [pc, #164]	; (800f908 <__sflush_r+0x108>)
 800f862:	40ca      	lsrs	r2, r1
 800f864:	07d6      	lsls	r6, r2, #31
 800f866:	d544      	bpl.n	800f8f2 <__sflush_r+0xf2>
 800f868:	2200      	movs	r2, #0
 800f86a:	6062      	str	r2, [r4, #4]
 800f86c:	04d9      	lsls	r1, r3, #19
 800f86e:	6922      	ldr	r2, [r4, #16]
 800f870:	6022      	str	r2, [r4, #0]
 800f872:	d504      	bpl.n	800f87e <__sflush_r+0x7e>
 800f874:	1c42      	adds	r2, r0, #1
 800f876:	d101      	bne.n	800f87c <__sflush_r+0x7c>
 800f878:	682b      	ldr	r3, [r5, #0]
 800f87a:	b903      	cbnz	r3, 800f87e <__sflush_r+0x7e>
 800f87c:	6560      	str	r0, [r4, #84]	; 0x54
 800f87e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f880:	602f      	str	r7, [r5, #0]
 800f882:	2900      	cmp	r1, #0
 800f884:	d0c9      	beq.n	800f81a <__sflush_r+0x1a>
 800f886:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f88a:	4299      	cmp	r1, r3
 800f88c:	d002      	beq.n	800f894 <__sflush_r+0x94>
 800f88e:	4628      	mov	r0, r5
 800f890:	f7ff fdb0 	bl	800f3f4 <_free_r>
 800f894:	2000      	movs	r0, #0
 800f896:	6360      	str	r0, [r4, #52]	; 0x34
 800f898:	e7c0      	b.n	800f81c <__sflush_r+0x1c>
 800f89a:	2301      	movs	r3, #1
 800f89c:	4628      	mov	r0, r5
 800f89e:	47b0      	blx	r6
 800f8a0:	1c41      	adds	r1, r0, #1
 800f8a2:	d1c8      	bne.n	800f836 <__sflush_r+0x36>
 800f8a4:	682b      	ldr	r3, [r5, #0]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d0c5      	beq.n	800f836 <__sflush_r+0x36>
 800f8aa:	2b1d      	cmp	r3, #29
 800f8ac:	d001      	beq.n	800f8b2 <__sflush_r+0xb2>
 800f8ae:	2b16      	cmp	r3, #22
 800f8b0:	d101      	bne.n	800f8b6 <__sflush_r+0xb6>
 800f8b2:	602f      	str	r7, [r5, #0]
 800f8b4:	e7b1      	b.n	800f81a <__sflush_r+0x1a>
 800f8b6:	89a3      	ldrh	r3, [r4, #12]
 800f8b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8bc:	81a3      	strh	r3, [r4, #12]
 800f8be:	e7ad      	b.n	800f81c <__sflush_r+0x1c>
 800f8c0:	690f      	ldr	r7, [r1, #16]
 800f8c2:	2f00      	cmp	r7, #0
 800f8c4:	d0a9      	beq.n	800f81a <__sflush_r+0x1a>
 800f8c6:	0793      	lsls	r3, r2, #30
 800f8c8:	680e      	ldr	r6, [r1, #0]
 800f8ca:	bf08      	it	eq
 800f8cc:	694b      	ldreq	r3, [r1, #20]
 800f8ce:	600f      	str	r7, [r1, #0]
 800f8d0:	bf18      	it	ne
 800f8d2:	2300      	movne	r3, #0
 800f8d4:	eba6 0807 	sub.w	r8, r6, r7
 800f8d8:	608b      	str	r3, [r1, #8]
 800f8da:	f1b8 0f00 	cmp.w	r8, #0
 800f8de:	dd9c      	ble.n	800f81a <__sflush_r+0x1a>
 800f8e0:	4643      	mov	r3, r8
 800f8e2:	463a      	mov	r2, r7
 800f8e4:	6a21      	ldr	r1, [r4, #32]
 800f8e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f8e8:	4628      	mov	r0, r5
 800f8ea:	47b0      	blx	r6
 800f8ec:	2800      	cmp	r0, #0
 800f8ee:	dc06      	bgt.n	800f8fe <__sflush_r+0xfe>
 800f8f0:	89a3      	ldrh	r3, [r4, #12]
 800f8f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8f6:	81a3      	strh	r3, [r4, #12]
 800f8f8:	f04f 30ff 	mov.w	r0, #4294967295
 800f8fc:	e78e      	b.n	800f81c <__sflush_r+0x1c>
 800f8fe:	4407      	add	r7, r0
 800f900:	eba8 0800 	sub.w	r8, r8, r0
 800f904:	e7e9      	b.n	800f8da <__sflush_r+0xda>
 800f906:	bf00      	nop
 800f908:	20400001 	.word	0x20400001

0800f90c <_fflush_r>:
 800f90c:	b538      	push	{r3, r4, r5, lr}
 800f90e:	690b      	ldr	r3, [r1, #16]
 800f910:	4605      	mov	r5, r0
 800f912:	460c      	mov	r4, r1
 800f914:	b1db      	cbz	r3, 800f94e <_fflush_r+0x42>
 800f916:	b118      	cbz	r0, 800f920 <_fflush_r+0x14>
 800f918:	6983      	ldr	r3, [r0, #24]
 800f91a:	b90b      	cbnz	r3, 800f920 <_fflush_r+0x14>
 800f91c:	f000 f860 	bl	800f9e0 <__sinit>
 800f920:	4b0c      	ldr	r3, [pc, #48]	; (800f954 <_fflush_r+0x48>)
 800f922:	429c      	cmp	r4, r3
 800f924:	d109      	bne.n	800f93a <_fflush_r+0x2e>
 800f926:	686c      	ldr	r4, [r5, #4]
 800f928:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f92c:	b17b      	cbz	r3, 800f94e <_fflush_r+0x42>
 800f92e:	4621      	mov	r1, r4
 800f930:	4628      	mov	r0, r5
 800f932:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f936:	f7ff bf63 	b.w	800f800 <__sflush_r>
 800f93a:	4b07      	ldr	r3, [pc, #28]	; (800f958 <_fflush_r+0x4c>)
 800f93c:	429c      	cmp	r4, r3
 800f93e:	d101      	bne.n	800f944 <_fflush_r+0x38>
 800f940:	68ac      	ldr	r4, [r5, #8]
 800f942:	e7f1      	b.n	800f928 <_fflush_r+0x1c>
 800f944:	4b05      	ldr	r3, [pc, #20]	; (800f95c <_fflush_r+0x50>)
 800f946:	429c      	cmp	r4, r3
 800f948:	bf08      	it	eq
 800f94a:	68ec      	ldreq	r4, [r5, #12]
 800f94c:	e7ec      	b.n	800f928 <_fflush_r+0x1c>
 800f94e:	2000      	movs	r0, #0
 800f950:	bd38      	pop	{r3, r4, r5, pc}
 800f952:	bf00      	nop
 800f954:	0801b944 	.word	0x0801b944
 800f958:	0801b964 	.word	0x0801b964
 800f95c:	0801b924 	.word	0x0801b924

0800f960 <std>:
 800f960:	2300      	movs	r3, #0
 800f962:	b510      	push	{r4, lr}
 800f964:	4604      	mov	r4, r0
 800f966:	e9c0 3300 	strd	r3, r3, [r0]
 800f96a:	6083      	str	r3, [r0, #8]
 800f96c:	8181      	strh	r1, [r0, #12]
 800f96e:	6643      	str	r3, [r0, #100]	; 0x64
 800f970:	81c2      	strh	r2, [r0, #14]
 800f972:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f976:	6183      	str	r3, [r0, #24]
 800f978:	4619      	mov	r1, r3
 800f97a:	2208      	movs	r2, #8
 800f97c:	305c      	adds	r0, #92	; 0x5c
 800f97e:	f7ff fd30 	bl	800f3e2 <memset>
 800f982:	4b05      	ldr	r3, [pc, #20]	; (800f998 <std+0x38>)
 800f984:	6263      	str	r3, [r4, #36]	; 0x24
 800f986:	4b05      	ldr	r3, [pc, #20]	; (800f99c <std+0x3c>)
 800f988:	62a3      	str	r3, [r4, #40]	; 0x28
 800f98a:	4b05      	ldr	r3, [pc, #20]	; (800f9a0 <std+0x40>)
 800f98c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f98e:	4b05      	ldr	r3, [pc, #20]	; (800f9a4 <std+0x44>)
 800f990:	6224      	str	r4, [r4, #32]
 800f992:	6323      	str	r3, [r4, #48]	; 0x30
 800f994:	bd10      	pop	{r4, pc}
 800f996:	bf00      	nop
 800f998:	08010151 	.word	0x08010151
 800f99c:	08010173 	.word	0x08010173
 800f9a0:	080101ab 	.word	0x080101ab
 800f9a4:	080101cf 	.word	0x080101cf

0800f9a8 <_cleanup_r>:
 800f9a8:	4901      	ldr	r1, [pc, #4]	; (800f9b0 <_cleanup_r+0x8>)
 800f9aa:	f000 b885 	b.w	800fab8 <_fwalk_reent>
 800f9ae:	bf00      	nop
 800f9b0:	0800f90d 	.word	0x0800f90d

0800f9b4 <__sfmoreglue>:
 800f9b4:	b570      	push	{r4, r5, r6, lr}
 800f9b6:	1e4a      	subs	r2, r1, #1
 800f9b8:	2568      	movs	r5, #104	; 0x68
 800f9ba:	4355      	muls	r5, r2
 800f9bc:	460e      	mov	r6, r1
 800f9be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f9c2:	f7ff fd65 	bl	800f490 <_malloc_r>
 800f9c6:	4604      	mov	r4, r0
 800f9c8:	b140      	cbz	r0, 800f9dc <__sfmoreglue+0x28>
 800f9ca:	2100      	movs	r1, #0
 800f9cc:	e9c0 1600 	strd	r1, r6, [r0]
 800f9d0:	300c      	adds	r0, #12
 800f9d2:	60a0      	str	r0, [r4, #8]
 800f9d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f9d8:	f7ff fd03 	bl	800f3e2 <memset>
 800f9dc:	4620      	mov	r0, r4
 800f9de:	bd70      	pop	{r4, r5, r6, pc}

0800f9e0 <__sinit>:
 800f9e0:	6983      	ldr	r3, [r0, #24]
 800f9e2:	b510      	push	{r4, lr}
 800f9e4:	4604      	mov	r4, r0
 800f9e6:	bb33      	cbnz	r3, 800fa36 <__sinit+0x56>
 800f9e8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800f9ec:	6503      	str	r3, [r0, #80]	; 0x50
 800f9ee:	4b12      	ldr	r3, [pc, #72]	; (800fa38 <__sinit+0x58>)
 800f9f0:	4a12      	ldr	r2, [pc, #72]	; (800fa3c <__sinit+0x5c>)
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	6282      	str	r2, [r0, #40]	; 0x28
 800f9f6:	4298      	cmp	r0, r3
 800f9f8:	bf04      	itt	eq
 800f9fa:	2301      	moveq	r3, #1
 800f9fc:	6183      	streq	r3, [r0, #24]
 800f9fe:	f000 f81f 	bl	800fa40 <__sfp>
 800fa02:	6060      	str	r0, [r4, #4]
 800fa04:	4620      	mov	r0, r4
 800fa06:	f000 f81b 	bl	800fa40 <__sfp>
 800fa0a:	60a0      	str	r0, [r4, #8]
 800fa0c:	4620      	mov	r0, r4
 800fa0e:	f000 f817 	bl	800fa40 <__sfp>
 800fa12:	2200      	movs	r2, #0
 800fa14:	60e0      	str	r0, [r4, #12]
 800fa16:	2104      	movs	r1, #4
 800fa18:	6860      	ldr	r0, [r4, #4]
 800fa1a:	f7ff ffa1 	bl	800f960 <std>
 800fa1e:	2201      	movs	r2, #1
 800fa20:	2109      	movs	r1, #9
 800fa22:	68a0      	ldr	r0, [r4, #8]
 800fa24:	f7ff ff9c 	bl	800f960 <std>
 800fa28:	2202      	movs	r2, #2
 800fa2a:	2112      	movs	r1, #18
 800fa2c:	68e0      	ldr	r0, [r4, #12]
 800fa2e:	f7ff ff97 	bl	800f960 <std>
 800fa32:	2301      	movs	r3, #1
 800fa34:	61a3      	str	r3, [r4, #24]
 800fa36:	bd10      	pop	{r4, pc}
 800fa38:	0801b920 	.word	0x0801b920
 800fa3c:	0800f9a9 	.word	0x0800f9a9

0800fa40 <__sfp>:
 800fa40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa42:	4b1b      	ldr	r3, [pc, #108]	; (800fab0 <__sfp+0x70>)
 800fa44:	681e      	ldr	r6, [r3, #0]
 800fa46:	69b3      	ldr	r3, [r6, #24]
 800fa48:	4607      	mov	r7, r0
 800fa4a:	b913      	cbnz	r3, 800fa52 <__sfp+0x12>
 800fa4c:	4630      	mov	r0, r6
 800fa4e:	f7ff ffc7 	bl	800f9e0 <__sinit>
 800fa52:	3648      	adds	r6, #72	; 0x48
 800fa54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fa58:	3b01      	subs	r3, #1
 800fa5a:	d503      	bpl.n	800fa64 <__sfp+0x24>
 800fa5c:	6833      	ldr	r3, [r6, #0]
 800fa5e:	b133      	cbz	r3, 800fa6e <__sfp+0x2e>
 800fa60:	6836      	ldr	r6, [r6, #0]
 800fa62:	e7f7      	b.n	800fa54 <__sfp+0x14>
 800fa64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fa68:	b16d      	cbz	r5, 800fa86 <__sfp+0x46>
 800fa6a:	3468      	adds	r4, #104	; 0x68
 800fa6c:	e7f4      	b.n	800fa58 <__sfp+0x18>
 800fa6e:	2104      	movs	r1, #4
 800fa70:	4638      	mov	r0, r7
 800fa72:	f7ff ff9f 	bl	800f9b4 <__sfmoreglue>
 800fa76:	6030      	str	r0, [r6, #0]
 800fa78:	2800      	cmp	r0, #0
 800fa7a:	d1f1      	bne.n	800fa60 <__sfp+0x20>
 800fa7c:	230c      	movs	r3, #12
 800fa7e:	603b      	str	r3, [r7, #0]
 800fa80:	4604      	mov	r4, r0
 800fa82:	4620      	mov	r0, r4
 800fa84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa86:	4b0b      	ldr	r3, [pc, #44]	; (800fab4 <__sfp+0x74>)
 800fa88:	6665      	str	r5, [r4, #100]	; 0x64
 800fa8a:	e9c4 5500 	strd	r5, r5, [r4]
 800fa8e:	60a5      	str	r5, [r4, #8]
 800fa90:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800fa94:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800fa98:	2208      	movs	r2, #8
 800fa9a:	4629      	mov	r1, r5
 800fa9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800faa0:	f7ff fc9f 	bl	800f3e2 <memset>
 800faa4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800faa8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800faac:	e7e9      	b.n	800fa82 <__sfp+0x42>
 800faae:	bf00      	nop
 800fab0:	0801b920 	.word	0x0801b920
 800fab4:	ffff0001 	.word	0xffff0001

0800fab8 <_fwalk_reent>:
 800fab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fabc:	4680      	mov	r8, r0
 800fabe:	4689      	mov	r9, r1
 800fac0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fac4:	2600      	movs	r6, #0
 800fac6:	b914      	cbnz	r4, 800face <_fwalk_reent+0x16>
 800fac8:	4630      	mov	r0, r6
 800faca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800face:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800fad2:	3f01      	subs	r7, #1
 800fad4:	d501      	bpl.n	800fada <_fwalk_reent+0x22>
 800fad6:	6824      	ldr	r4, [r4, #0]
 800fad8:	e7f5      	b.n	800fac6 <_fwalk_reent+0xe>
 800fada:	89ab      	ldrh	r3, [r5, #12]
 800fadc:	2b01      	cmp	r3, #1
 800fade:	d907      	bls.n	800faf0 <_fwalk_reent+0x38>
 800fae0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fae4:	3301      	adds	r3, #1
 800fae6:	d003      	beq.n	800faf0 <_fwalk_reent+0x38>
 800fae8:	4629      	mov	r1, r5
 800faea:	4640      	mov	r0, r8
 800faec:	47c8      	blx	r9
 800faee:	4306      	orrs	r6, r0
 800faf0:	3568      	adds	r5, #104	; 0x68
 800faf2:	e7ee      	b.n	800fad2 <_fwalk_reent+0x1a>

0800faf4 <__swhatbuf_r>:
 800faf4:	b570      	push	{r4, r5, r6, lr}
 800faf6:	460e      	mov	r6, r1
 800faf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fafc:	2900      	cmp	r1, #0
 800fafe:	b096      	sub	sp, #88	; 0x58
 800fb00:	4614      	mov	r4, r2
 800fb02:	461d      	mov	r5, r3
 800fb04:	da07      	bge.n	800fb16 <__swhatbuf_r+0x22>
 800fb06:	2300      	movs	r3, #0
 800fb08:	602b      	str	r3, [r5, #0]
 800fb0a:	89b3      	ldrh	r3, [r6, #12]
 800fb0c:	061a      	lsls	r2, r3, #24
 800fb0e:	d410      	bmi.n	800fb32 <__swhatbuf_r+0x3e>
 800fb10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fb14:	e00e      	b.n	800fb34 <__swhatbuf_r+0x40>
 800fb16:	466a      	mov	r2, sp
 800fb18:	f000 fb80 	bl	801021c <_fstat_r>
 800fb1c:	2800      	cmp	r0, #0
 800fb1e:	dbf2      	blt.n	800fb06 <__swhatbuf_r+0x12>
 800fb20:	9a01      	ldr	r2, [sp, #4]
 800fb22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fb26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fb2a:	425a      	negs	r2, r3
 800fb2c:	415a      	adcs	r2, r3
 800fb2e:	602a      	str	r2, [r5, #0]
 800fb30:	e7ee      	b.n	800fb10 <__swhatbuf_r+0x1c>
 800fb32:	2340      	movs	r3, #64	; 0x40
 800fb34:	2000      	movs	r0, #0
 800fb36:	6023      	str	r3, [r4, #0]
 800fb38:	b016      	add	sp, #88	; 0x58
 800fb3a:	bd70      	pop	{r4, r5, r6, pc}

0800fb3c <__smakebuf_r>:
 800fb3c:	898b      	ldrh	r3, [r1, #12]
 800fb3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fb40:	079d      	lsls	r5, r3, #30
 800fb42:	4606      	mov	r6, r0
 800fb44:	460c      	mov	r4, r1
 800fb46:	d507      	bpl.n	800fb58 <__smakebuf_r+0x1c>
 800fb48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fb4c:	6023      	str	r3, [r4, #0]
 800fb4e:	6123      	str	r3, [r4, #16]
 800fb50:	2301      	movs	r3, #1
 800fb52:	6163      	str	r3, [r4, #20]
 800fb54:	b002      	add	sp, #8
 800fb56:	bd70      	pop	{r4, r5, r6, pc}
 800fb58:	ab01      	add	r3, sp, #4
 800fb5a:	466a      	mov	r2, sp
 800fb5c:	f7ff ffca 	bl	800faf4 <__swhatbuf_r>
 800fb60:	9900      	ldr	r1, [sp, #0]
 800fb62:	4605      	mov	r5, r0
 800fb64:	4630      	mov	r0, r6
 800fb66:	f7ff fc93 	bl	800f490 <_malloc_r>
 800fb6a:	b948      	cbnz	r0, 800fb80 <__smakebuf_r+0x44>
 800fb6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb70:	059a      	lsls	r2, r3, #22
 800fb72:	d4ef      	bmi.n	800fb54 <__smakebuf_r+0x18>
 800fb74:	f023 0303 	bic.w	r3, r3, #3
 800fb78:	f043 0302 	orr.w	r3, r3, #2
 800fb7c:	81a3      	strh	r3, [r4, #12]
 800fb7e:	e7e3      	b.n	800fb48 <__smakebuf_r+0xc>
 800fb80:	4b0d      	ldr	r3, [pc, #52]	; (800fbb8 <__smakebuf_r+0x7c>)
 800fb82:	62b3      	str	r3, [r6, #40]	; 0x28
 800fb84:	89a3      	ldrh	r3, [r4, #12]
 800fb86:	6020      	str	r0, [r4, #0]
 800fb88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb8c:	81a3      	strh	r3, [r4, #12]
 800fb8e:	9b00      	ldr	r3, [sp, #0]
 800fb90:	6163      	str	r3, [r4, #20]
 800fb92:	9b01      	ldr	r3, [sp, #4]
 800fb94:	6120      	str	r0, [r4, #16]
 800fb96:	b15b      	cbz	r3, 800fbb0 <__smakebuf_r+0x74>
 800fb98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb9c:	4630      	mov	r0, r6
 800fb9e:	f000 fb4f 	bl	8010240 <_isatty_r>
 800fba2:	b128      	cbz	r0, 800fbb0 <__smakebuf_r+0x74>
 800fba4:	89a3      	ldrh	r3, [r4, #12]
 800fba6:	f023 0303 	bic.w	r3, r3, #3
 800fbaa:	f043 0301 	orr.w	r3, r3, #1
 800fbae:	81a3      	strh	r3, [r4, #12]
 800fbb0:	89a3      	ldrh	r3, [r4, #12]
 800fbb2:	431d      	orrs	r5, r3
 800fbb4:	81a5      	strh	r5, [r4, #12]
 800fbb6:	e7cd      	b.n	800fb54 <__smakebuf_r+0x18>
 800fbb8:	0800f9a9 	.word	0x0800f9a9

0800fbbc <__malloc_lock>:
 800fbbc:	4770      	bx	lr

0800fbbe <__malloc_unlock>:
 800fbbe:	4770      	bx	lr

0800fbc0 <__sfputc_r>:
 800fbc0:	6893      	ldr	r3, [r2, #8]
 800fbc2:	3b01      	subs	r3, #1
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	b410      	push	{r4}
 800fbc8:	6093      	str	r3, [r2, #8]
 800fbca:	da08      	bge.n	800fbde <__sfputc_r+0x1e>
 800fbcc:	6994      	ldr	r4, [r2, #24]
 800fbce:	42a3      	cmp	r3, r4
 800fbd0:	db01      	blt.n	800fbd6 <__sfputc_r+0x16>
 800fbd2:	290a      	cmp	r1, #10
 800fbd4:	d103      	bne.n	800fbde <__sfputc_r+0x1e>
 800fbd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fbda:	f7ff bd51 	b.w	800f680 <__swbuf_r>
 800fbde:	6813      	ldr	r3, [r2, #0]
 800fbe0:	1c58      	adds	r0, r3, #1
 800fbe2:	6010      	str	r0, [r2, #0]
 800fbe4:	7019      	strb	r1, [r3, #0]
 800fbe6:	4608      	mov	r0, r1
 800fbe8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fbec:	4770      	bx	lr

0800fbee <__sfputs_r>:
 800fbee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbf0:	4606      	mov	r6, r0
 800fbf2:	460f      	mov	r7, r1
 800fbf4:	4614      	mov	r4, r2
 800fbf6:	18d5      	adds	r5, r2, r3
 800fbf8:	42ac      	cmp	r4, r5
 800fbfa:	d101      	bne.n	800fc00 <__sfputs_r+0x12>
 800fbfc:	2000      	movs	r0, #0
 800fbfe:	e007      	b.n	800fc10 <__sfputs_r+0x22>
 800fc00:	463a      	mov	r2, r7
 800fc02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc06:	4630      	mov	r0, r6
 800fc08:	f7ff ffda 	bl	800fbc0 <__sfputc_r>
 800fc0c:	1c43      	adds	r3, r0, #1
 800fc0e:	d1f3      	bne.n	800fbf8 <__sfputs_r+0xa>
 800fc10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fc14 <_vfiprintf_r>:
 800fc14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc18:	460c      	mov	r4, r1
 800fc1a:	b09d      	sub	sp, #116	; 0x74
 800fc1c:	4617      	mov	r7, r2
 800fc1e:	461d      	mov	r5, r3
 800fc20:	4606      	mov	r6, r0
 800fc22:	b118      	cbz	r0, 800fc2c <_vfiprintf_r+0x18>
 800fc24:	6983      	ldr	r3, [r0, #24]
 800fc26:	b90b      	cbnz	r3, 800fc2c <_vfiprintf_r+0x18>
 800fc28:	f7ff feda 	bl	800f9e0 <__sinit>
 800fc2c:	4b7c      	ldr	r3, [pc, #496]	; (800fe20 <_vfiprintf_r+0x20c>)
 800fc2e:	429c      	cmp	r4, r3
 800fc30:	d158      	bne.n	800fce4 <_vfiprintf_r+0xd0>
 800fc32:	6874      	ldr	r4, [r6, #4]
 800fc34:	89a3      	ldrh	r3, [r4, #12]
 800fc36:	0718      	lsls	r0, r3, #28
 800fc38:	d55e      	bpl.n	800fcf8 <_vfiprintf_r+0xe4>
 800fc3a:	6923      	ldr	r3, [r4, #16]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d05b      	beq.n	800fcf8 <_vfiprintf_r+0xe4>
 800fc40:	2300      	movs	r3, #0
 800fc42:	9309      	str	r3, [sp, #36]	; 0x24
 800fc44:	2320      	movs	r3, #32
 800fc46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fc4a:	2330      	movs	r3, #48	; 0x30
 800fc4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fc50:	9503      	str	r5, [sp, #12]
 800fc52:	f04f 0b01 	mov.w	fp, #1
 800fc56:	46b8      	mov	r8, r7
 800fc58:	4645      	mov	r5, r8
 800fc5a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fc5e:	b10b      	cbz	r3, 800fc64 <_vfiprintf_r+0x50>
 800fc60:	2b25      	cmp	r3, #37	; 0x25
 800fc62:	d154      	bne.n	800fd0e <_vfiprintf_r+0xfa>
 800fc64:	ebb8 0a07 	subs.w	sl, r8, r7
 800fc68:	d00b      	beq.n	800fc82 <_vfiprintf_r+0x6e>
 800fc6a:	4653      	mov	r3, sl
 800fc6c:	463a      	mov	r2, r7
 800fc6e:	4621      	mov	r1, r4
 800fc70:	4630      	mov	r0, r6
 800fc72:	f7ff ffbc 	bl	800fbee <__sfputs_r>
 800fc76:	3001      	adds	r0, #1
 800fc78:	f000 80c2 	beq.w	800fe00 <_vfiprintf_r+0x1ec>
 800fc7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc7e:	4453      	add	r3, sl
 800fc80:	9309      	str	r3, [sp, #36]	; 0x24
 800fc82:	f898 3000 	ldrb.w	r3, [r8]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	f000 80ba 	beq.w	800fe00 <_vfiprintf_r+0x1ec>
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	f04f 32ff 	mov.w	r2, #4294967295
 800fc92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fc96:	9304      	str	r3, [sp, #16]
 800fc98:	9307      	str	r3, [sp, #28]
 800fc9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fc9e:	931a      	str	r3, [sp, #104]	; 0x68
 800fca0:	46a8      	mov	r8, r5
 800fca2:	2205      	movs	r2, #5
 800fca4:	f818 1b01 	ldrb.w	r1, [r8], #1
 800fca8:	485e      	ldr	r0, [pc, #376]	; (800fe24 <_vfiprintf_r+0x210>)
 800fcaa:	f7f0 fab1 	bl	8000210 <memchr>
 800fcae:	9b04      	ldr	r3, [sp, #16]
 800fcb0:	bb78      	cbnz	r0, 800fd12 <_vfiprintf_r+0xfe>
 800fcb2:	06d9      	lsls	r1, r3, #27
 800fcb4:	bf44      	itt	mi
 800fcb6:	2220      	movmi	r2, #32
 800fcb8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fcbc:	071a      	lsls	r2, r3, #28
 800fcbe:	bf44      	itt	mi
 800fcc0:	222b      	movmi	r2, #43	; 0x2b
 800fcc2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fcc6:	782a      	ldrb	r2, [r5, #0]
 800fcc8:	2a2a      	cmp	r2, #42	; 0x2a
 800fcca:	d02a      	beq.n	800fd22 <_vfiprintf_r+0x10e>
 800fccc:	9a07      	ldr	r2, [sp, #28]
 800fcce:	46a8      	mov	r8, r5
 800fcd0:	2000      	movs	r0, #0
 800fcd2:	250a      	movs	r5, #10
 800fcd4:	4641      	mov	r1, r8
 800fcd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fcda:	3b30      	subs	r3, #48	; 0x30
 800fcdc:	2b09      	cmp	r3, #9
 800fcde:	d969      	bls.n	800fdb4 <_vfiprintf_r+0x1a0>
 800fce0:	b360      	cbz	r0, 800fd3c <_vfiprintf_r+0x128>
 800fce2:	e024      	b.n	800fd2e <_vfiprintf_r+0x11a>
 800fce4:	4b50      	ldr	r3, [pc, #320]	; (800fe28 <_vfiprintf_r+0x214>)
 800fce6:	429c      	cmp	r4, r3
 800fce8:	d101      	bne.n	800fcee <_vfiprintf_r+0xda>
 800fcea:	68b4      	ldr	r4, [r6, #8]
 800fcec:	e7a2      	b.n	800fc34 <_vfiprintf_r+0x20>
 800fcee:	4b4f      	ldr	r3, [pc, #316]	; (800fe2c <_vfiprintf_r+0x218>)
 800fcf0:	429c      	cmp	r4, r3
 800fcf2:	bf08      	it	eq
 800fcf4:	68f4      	ldreq	r4, [r6, #12]
 800fcf6:	e79d      	b.n	800fc34 <_vfiprintf_r+0x20>
 800fcf8:	4621      	mov	r1, r4
 800fcfa:	4630      	mov	r0, r6
 800fcfc:	f7ff fd12 	bl	800f724 <__swsetup_r>
 800fd00:	2800      	cmp	r0, #0
 800fd02:	d09d      	beq.n	800fc40 <_vfiprintf_r+0x2c>
 800fd04:	f04f 30ff 	mov.w	r0, #4294967295
 800fd08:	b01d      	add	sp, #116	; 0x74
 800fd0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd0e:	46a8      	mov	r8, r5
 800fd10:	e7a2      	b.n	800fc58 <_vfiprintf_r+0x44>
 800fd12:	4a44      	ldr	r2, [pc, #272]	; (800fe24 <_vfiprintf_r+0x210>)
 800fd14:	1a80      	subs	r0, r0, r2
 800fd16:	fa0b f000 	lsl.w	r0, fp, r0
 800fd1a:	4318      	orrs	r0, r3
 800fd1c:	9004      	str	r0, [sp, #16]
 800fd1e:	4645      	mov	r5, r8
 800fd20:	e7be      	b.n	800fca0 <_vfiprintf_r+0x8c>
 800fd22:	9a03      	ldr	r2, [sp, #12]
 800fd24:	1d11      	adds	r1, r2, #4
 800fd26:	6812      	ldr	r2, [r2, #0]
 800fd28:	9103      	str	r1, [sp, #12]
 800fd2a:	2a00      	cmp	r2, #0
 800fd2c:	db01      	blt.n	800fd32 <_vfiprintf_r+0x11e>
 800fd2e:	9207      	str	r2, [sp, #28]
 800fd30:	e004      	b.n	800fd3c <_vfiprintf_r+0x128>
 800fd32:	4252      	negs	r2, r2
 800fd34:	f043 0302 	orr.w	r3, r3, #2
 800fd38:	9207      	str	r2, [sp, #28]
 800fd3a:	9304      	str	r3, [sp, #16]
 800fd3c:	f898 3000 	ldrb.w	r3, [r8]
 800fd40:	2b2e      	cmp	r3, #46	; 0x2e
 800fd42:	d10e      	bne.n	800fd62 <_vfiprintf_r+0x14e>
 800fd44:	f898 3001 	ldrb.w	r3, [r8, #1]
 800fd48:	2b2a      	cmp	r3, #42	; 0x2a
 800fd4a:	d138      	bne.n	800fdbe <_vfiprintf_r+0x1aa>
 800fd4c:	9b03      	ldr	r3, [sp, #12]
 800fd4e:	1d1a      	adds	r2, r3, #4
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	9203      	str	r2, [sp, #12]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	bfb8      	it	lt
 800fd58:	f04f 33ff 	movlt.w	r3, #4294967295
 800fd5c:	f108 0802 	add.w	r8, r8, #2
 800fd60:	9305      	str	r3, [sp, #20]
 800fd62:	4d33      	ldr	r5, [pc, #204]	; (800fe30 <_vfiprintf_r+0x21c>)
 800fd64:	f898 1000 	ldrb.w	r1, [r8]
 800fd68:	2203      	movs	r2, #3
 800fd6a:	4628      	mov	r0, r5
 800fd6c:	f7f0 fa50 	bl	8000210 <memchr>
 800fd70:	b140      	cbz	r0, 800fd84 <_vfiprintf_r+0x170>
 800fd72:	2340      	movs	r3, #64	; 0x40
 800fd74:	1b40      	subs	r0, r0, r5
 800fd76:	fa03 f000 	lsl.w	r0, r3, r0
 800fd7a:	9b04      	ldr	r3, [sp, #16]
 800fd7c:	4303      	orrs	r3, r0
 800fd7e:	f108 0801 	add.w	r8, r8, #1
 800fd82:	9304      	str	r3, [sp, #16]
 800fd84:	f898 1000 	ldrb.w	r1, [r8]
 800fd88:	482a      	ldr	r0, [pc, #168]	; (800fe34 <_vfiprintf_r+0x220>)
 800fd8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fd8e:	2206      	movs	r2, #6
 800fd90:	f108 0701 	add.w	r7, r8, #1
 800fd94:	f7f0 fa3c 	bl	8000210 <memchr>
 800fd98:	2800      	cmp	r0, #0
 800fd9a:	d037      	beq.n	800fe0c <_vfiprintf_r+0x1f8>
 800fd9c:	4b26      	ldr	r3, [pc, #152]	; (800fe38 <_vfiprintf_r+0x224>)
 800fd9e:	bb1b      	cbnz	r3, 800fde8 <_vfiprintf_r+0x1d4>
 800fda0:	9b03      	ldr	r3, [sp, #12]
 800fda2:	3307      	adds	r3, #7
 800fda4:	f023 0307 	bic.w	r3, r3, #7
 800fda8:	3308      	adds	r3, #8
 800fdaa:	9303      	str	r3, [sp, #12]
 800fdac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdae:	444b      	add	r3, r9
 800fdb0:	9309      	str	r3, [sp, #36]	; 0x24
 800fdb2:	e750      	b.n	800fc56 <_vfiprintf_r+0x42>
 800fdb4:	fb05 3202 	mla	r2, r5, r2, r3
 800fdb8:	2001      	movs	r0, #1
 800fdba:	4688      	mov	r8, r1
 800fdbc:	e78a      	b.n	800fcd4 <_vfiprintf_r+0xc0>
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	f108 0801 	add.w	r8, r8, #1
 800fdc4:	9305      	str	r3, [sp, #20]
 800fdc6:	4619      	mov	r1, r3
 800fdc8:	250a      	movs	r5, #10
 800fdca:	4640      	mov	r0, r8
 800fdcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fdd0:	3a30      	subs	r2, #48	; 0x30
 800fdd2:	2a09      	cmp	r2, #9
 800fdd4:	d903      	bls.n	800fdde <_vfiprintf_r+0x1ca>
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d0c3      	beq.n	800fd62 <_vfiprintf_r+0x14e>
 800fdda:	9105      	str	r1, [sp, #20]
 800fddc:	e7c1      	b.n	800fd62 <_vfiprintf_r+0x14e>
 800fdde:	fb05 2101 	mla	r1, r5, r1, r2
 800fde2:	2301      	movs	r3, #1
 800fde4:	4680      	mov	r8, r0
 800fde6:	e7f0      	b.n	800fdca <_vfiprintf_r+0x1b6>
 800fde8:	ab03      	add	r3, sp, #12
 800fdea:	9300      	str	r3, [sp, #0]
 800fdec:	4622      	mov	r2, r4
 800fdee:	4b13      	ldr	r3, [pc, #76]	; (800fe3c <_vfiprintf_r+0x228>)
 800fdf0:	a904      	add	r1, sp, #16
 800fdf2:	4630      	mov	r0, r6
 800fdf4:	f3af 8000 	nop.w
 800fdf8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800fdfc:	4681      	mov	r9, r0
 800fdfe:	d1d5      	bne.n	800fdac <_vfiprintf_r+0x198>
 800fe00:	89a3      	ldrh	r3, [r4, #12]
 800fe02:	065b      	lsls	r3, r3, #25
 800fe04:	f53f af7e 	bmi.w	800fd04 <_vfiprintf_r+0xf0>
 800fe08:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe0a:	e77d      	b.n	800fd08 <_vfiprintf_r+0xf4>
 800fe0c:	ab03      	add	r3, sp, #12
 800fe0e:	9300      	str	r3, [sp, #0]
 800fe10:	4622      	mov	r2, r4
 800fe12:	4b0a      	ldr	r3, [pc, #40]	; (800fe3c <_vfiprintf_r+0x228>)
 800fe14:	a904      	add	r1, sp, #16
 800fe16:	4630      	mov	r0, r6
 800fe18:	f000 f888 	bl	800ff2c <_printf_i>
 800fe1c:	e7ec      	b.n	800fdf8 <_vfiprintf_r+0x1e4>
 800fe1e:	bf00      	nop
 800fe20:	0801b944 	.word	0x0801b944
 800fe24:	0801b984 	.word	0x0801b984
 800fe28:	0801b964 	.word	0x0801b964
 800fe2c:	0801b924 	.word	0x0801b924
 800fe30:	0801b98a 	.word	0x0801b98a
 800fe34:	0801b98e 	.word	0x0801b98e
 800fe38:	00000000 	.word	0x00000000
 800fe3c:	0800fbef 	.word	0x0800fbef

0800fe40 <_printf_common>:
 800fe40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe44:	4691      	mov	r9, r2
 800fe46:	461f      	mov	r7, r3
 800fe48:	688a      	ldr	r2, [r1, #8]
 800fe4a:	690b      	ldr	r3, [r1, #16]
 800fe4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fe50:	4293      	cmp	r3, r2
 800fe52:	bfb8      	it	lt
 800fe54:	4613      	movlt	r3, r2
 800fe56:	f8c9 3000 	str.w	r3, [r9]
 800fe5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fe5e:	4606      	mov	r6, r0
 800fe60:	460c      	mov	r4, r1
 800fe62:	b112      	cbz	r2, 800fe6a <_printf_common+0x2a>
 800fe64:	3301      	adds	r3, #1
 800fe66:	f8c9 3000 	str.w	r3, [r9]
 800fe6a:	6823      	ldr	r3, [r4, #0]
 800fe6c:	0699      	lsls	r1, r3, #26
 800fe6e:	bf42      	ittt	mi
 800fe70:	f8d9 3000 	ldrmi.w	r3, [r9]
 800fe74:	3302      	addmi	r3, #2
 800fe76:	f8c9 3000 	strmi.w	r3, [r9]
 800fe7a:	6825      	ldr	r5, [r4, #0]
 800fe7c:	f015 0506 	ands.w	r5, r5, #6
 800fe80:	d107      	bne.n	800fe92 <_printf_common+0x52>
 800fe82:	f104 0a19 	add.w	sl, r4, #25
 800fe86:	68e3      	ldr	r3, [r4, #12]
 800fe88:	f8d9 2000 	ldr.w	r2, [r9]
 800fe8c:	1a9b      	subs	r3, r3, r2
 800fe8e:	42ab      	cmp	r3, r5
 800fe90:	dc28      	bgt.n	800fee4 <_printf_common+0xa4>
 800fe92:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800fe96:	6822      	ldr	r2, [r4, #0]
 800fe98:	3300      	adds	r3, #0
 800fe9a:	bf18      	it	ne
 800fe9c:	2301      	movne	r3, #1
 800fe9e:	0692      	lsls	r2, r2, #26
 800fea0:	d42d      	bmi.n	800fefe <_printf_common+0xbe>
 800fea2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fea6:	4639      	mov	r1, r7
 800fea8:	4630      	mov	r0, r6
 800feaa:	47c0      	blx	r8
 800feac:	3001      	adds	r0, #1
 800feae:	d020      	beq.n	800fef2 <_printf_common+0xb2>
 800feb0:	6823      	ldr	r3, [r4, #0]
 800feb2:	68e5      	ldr	r5, [r4, #12]
 800feb4:	f8d9 2000 	ldr.w	r2, [r9]
 800feb8:	f003 0306 	and.w	r3, r3, #6
 800febc:	2b04      	cmp	r3, #4
 800febe:	bf08      	it	eq
 800fec0:	1aad      	subeq	r5, r5, r2
 800fec2:	68a3      	ldr	r3, [r4, #8]
 800fec4:	6922      	ldr	r2, [r4, #16]
 800fec6:	bf0c      	ite	eq
 800fec8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fecc:	2500      	movne	r5, #0
 800fece:	4293      	cmp	r3, r2
 800fed0:	bfc4      	itt	gt
 800fed2:	1a9b      	subgt	r3, r3, r2
 800fed4:	18ed      	addgt	r5, r5, r3
 800fed6:	f04f 0900 	mov.w	r9, #0
 800feda:	341a      	adds	r4, #26
 800fedc:	454d      	cmp	r5, r9
 800fede:	d11a      	bne.n	800ff16 <_printf_common+0xd6>
 800fee0:	2000      	movs	r0, #0
 800fee2:	e008      	b.n	800fef6 <_printf_common+0xb6>
 800fee4:	2301      	movs	r3, #1
 800fee6:	4652      	mov	r2, sl
 800fee8:	4639      	mov	r1, r7
 800feea:	4630      	mov	r0, r6
 800feec:	47c0      	blx	r8
 800feee:	3001      	adds	r0, #1
 800fef0:	d103      	bne.n	800fefa <_printf_common+0xba>
 800fef2:	f04f 30ff 	mov.w	r0, #4294967295
 800fef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fefa:	3501      	adds	r5, #1
 800fefc:	e7c3      	b.n	800fe86 <_printf_common+0x46>
 800fefe:	18e1      	adds	r1, r4, r3
 800ff00:	1c5a      	adds	r2, r3, #1
 800ff02:	2030      	movs	r0, #48	; 0x30
 800ff04:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ff08:	4422      	add	r2, r4
 800ff0a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ff0e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ff12:	3302      	adds	r3, #2
 800ff14:	e7c5      	b.n	800fea2 <_printf_common+0x62>
 800ff16:	2301      	movs	r3, #1
 800ff18:	4622      	mov	r2, r4
 800ff1a:	4639      	mov	r1, r7
 800ff1c:	4630      	mov	r0, r6
 800ff1e:	47c0      	blx	r8
 800ff20:	3001      	adds	r0, #1
 800ff22:	d0e6      	beq.n	800fef2 <_printf_common+0xb2>
 800ff24:	f109 0901 	add.w	r9, r9, #1
 800ff28:	e7d8      	b.n	800fedc <_printf_common+0x9c>
	...

0800ff2c <_printf_i>:
 800ff2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff30:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ff34:	460c      	mov	r4, r1
 800ff36:	7e09      	ldrb	r1, [r1, #24]
 800ff38:	b085      	sub	sp, #20
 800ff3a:	296e      	cmp	r1, #110	; 0x6e
 800ff3c:	4617      	mov	r7, r2
 800ff3e:	4606      	mov	r6, r0
 800ff40:	4698      	mov	r8, r3
 800ff42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ff44:	f000 80b3 	beq.w	80100ae <_printf_i+0x182>
 800ff48:	d822      	bhi.n	800ff90 <_printf_i+0x64>
 800ff4a:	2963      	cmp	r1, #99	; 0x63
 800ff4c:	d036      	beq.n	800ffbc <_printf_i+0x90>
 800ff4e:	d80a      	bhi.n	800ff66 <_printf_i+0x3a>
 800ff50:	2900      	cmp	r1, #0
 800ff52:	f000 80b9 	beq.w	80100c8 <_printf_i+0x19c>
 800ff56:	2958      	cmp	r1, #88	; 0x58
 800ff58:	f000 8083 	beq.w	8010062 <_printf_i+0x136>
 800ff5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ff60:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ff64:	e032      	b.n	800ffcc <_printf_i+0xa0>
 800ff66:	2964      	cmp	r1, #100	; 0x64
 800ff68:	d001      	beq.n	800ff6e <_printf_i+0x42>
 800ff6a:	2969      	cmp	r1, #105	; 0x69
 800ff6c:	d1f6      	bne.n	800ff5c <_printf_i+0x30>
 800ff6e:	6820      	ldr	r0, [r4, #0]
 800ff70:	6813      	ldr	r3, [r2, #0]
 800ff72:	0605      	lsls	r5, r0, #24
 800ff74:	f103 0104 	add.w	r1, r3, #4
 800ff78:	d52a      	bpl.n	800ffd0 <_printf_i+0xa4>
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	6011      	str	r1, [r2, #0]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	da03      	bge.n	800ff8a <_printf_i+0x5e>
 800ff82:	222d      	movs	r2, #45	; 0x2d
 800ff84:	425b      	negs	r3, r3
 800ff86:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ff8a:	486f      	ldr	r0, [pc, #444]	; (8010148 <_printf_i+0x21c>)
 800ff8c:	220a      	movs	r2, #10
 800ff8e:	e039      	b.n	8010004 <_printf_i+0xd8>
 800ff90:	2973      	cmp	r1, #115	; 0x73
 800ff92:	f000 809d 	beq.w	80100d0 <_printf_i+0x1a4>
 800ff96:	d808      	bhi.n	800ffaa <_printf_i+0x7e>
 800ff98:	296f      	cmp	r1, #111	; 0x6f
 800ff9a:	d020      	beq.n	800ffde <_printf_i+0xb2>
 800ff9c:	2970      	cmp	r1, #112	; 0x70
 800ff9e:	d1dd      	bne.n	800ff5c <_printf_i+0x30>
 800ffa0:	6823      	ldr	r3, [r4, #0]
 800ffa2:	f043 0320 	orr.w	r3, r3, #32
 800ffa6:	6023      	str	r3, [r4, #0]
 800ffa8:	e003      	b.n	800ffb2 <_printf_i+0x86>
 800ffaa:	2975      	cmp	r1, #117	; 0x75
 800ffac:	d017      	beq.n	800ffde <_printf_i+0xb2>
 800ffae:	2978      	cmp	r1, #120	; 0x78
 800ffb0:	d1d4      	bne.n	800ff5c <_printf_i+0x30>
 800ffb2:	2378      	movs	r3, #120	; 0x78
 800ffb4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ffb8:	4864      	ldr	r0, [pc, #400]	; (801014c <_printf_i+0x220>)
 800ffba:	e055      	b.n	8010068 <_printf_i+0x13c>
 800ffbc:	6813      	ldr	r3, [r2, #0]
 800ffbe:	1d19      	adds	r1, r3, #4
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	6011      	str	r1, [r2, #0]
 800ffc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ffc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ffcc:	2301      	movs	r3, #1
 800ffce:	e08c      	b.n	80100ea <_printf_i+0x1be>
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	6011      	str	r1, [r2, #0]
 800ffd4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ffd8:	bf18      	it	ne
 800ffda:	b21b      	sxthne	r3, r3
 800ffdc:	e7cf      	b.n	800ff7e <_printf_i+0x52>
 800ffde:	6813      	ldr	r3, [r2, #0]
 800ffe0:	6825      	ldr	r5, [r4, #0]
 800ffe2:	1d18      	adds	r0, r3, #4
 800ffe4:	6010      	str	r0, [r2, #0]
 800ffe6:	0628      	lsls	r0, r5, #24
 800ffe8:	d501      	bpl.n	800ffee <_printf_i+0xc2>
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	e002      	b.n	800fff4 <_printf_i+0xc8>
 800ffee:	0668      	lsls	r0, r5, #25
 800fff0:	d5fb      	bpl.n	800ffea <_printf_i+0xbe>
 800fff2:	881b      	ldrh	r3, [r3, #0]
 800fff4:	4854      	ldr	r0, [pc, #336]	; (8010148 <_printf_i+0x21c>)
 800fff6:	296f      	cmp	r1, #111	; 0x6f
 800fff8:	bf14      	ite	ne
 800fffa:	220a      	movne	r2, #10
 800fffc:	2208      	moveq	r2, #8
 800fffe:	2100      	movs	r1, #0
 8010000:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010004:	6865      	ldr	r5, [r4, #4]
 8010006:	60a5      	str	r5, [r4, #8]
 8010008:	2d00      	cmp	r5, #0
 801000a:	f2c0 8095 	blt.w	8010138 <_printf_i+0x20c>
 801000e:	6821      	ldr	r1, [r4, #0]
 8010010:	f021 0104 	bic.w	r1, r1, #4
 8010014:	6021      	str	r1, [r4, #0]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d13d      	bne.n	8010096 <_printf_i+0x16a>
 801001a:	2d00      	cmp	r5, #0
 801001c:	f040 808e 	bne.w	801013c <_printf_i+0x210>
 8010020:	4665      	mov	r5, ip
 8010022:	2a08      	cmp	r2, #8
 8010024:	d10b      	bne.n	801003e <_printf_i+0x112>
 8010026:	6823      	ldr	r3, [r4, #0]
 8010028:	07db      	lsls	r3, r3, #31
 801002a:	d508      	bpl.n	801003e <_printf_i+0x112>
 801002c:	6923      	ldr	r3, [r4, #16]
 801002e:	6862      	ldr	r2, [r4, #4]
 8010030:	429a      	cmp	r2, r3
 8010032:	bfde      	ittt	le
 8010034:	2330      	movle	r3, #48	; 0x30
 8010036:	f805 3c01 	strble.w	r3, [r5, #-1]
 801003a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801003e:	ebac 0305 	sub.w	r3, ip, r5
 8010042:	6123      	str	r3, [r4, #16]
 8010044:	f8cd 8000 	str.w	r8, [sp]
 8010048:	463b      	mov	r3, r7
 801004a:	aa03      	add	r2, sp, #12
 801004c:	4621      	mov	r1, r4
 801004e:	4630      	mov	r0, r6
 8010050:	f7ff fef6 	bl	800fe40 <_printf_common>
 8010054:	3001      	adds	r0, #1
 8010056:	d14d      	bne.n	80100f4 <_printf_i+0x1c8>
 8010058:	f04f 30ff 	mov.w	r0, #4294967295
 801005c:	b005      	add	sp, #20
 801005e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010062:	4839      	ldr	r0, [pc, #228]	; (8010148 <_printf_i+0x21c>)
 8010064:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010068:	6813      	ldr	r3, [r2, #0]
 801006a:	6821      	ldr	r1, [r4, #0]
 801006c:	1d1d      	adds	r5, r3, #4
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	6015      	str	r5, [r2, #0]
 8010072:	060a      	lsls	r2, r1, #24
 8010074:	d50b      	bpl.n	801008e <_printf_i+0x162>
 8010076:	07ca      	lsls	r2, r1, #31
 8010078:	bf44      	itt	mi
 801007a:	f041 0120 	orrmi.w	r1, r1, #32
 801007e:	6021      	strmi	r1, [r4, #0]
 8010080:	b91b      	cbnz	r3, 801008a <_printf_i+0x15e>
 8010082:	6822      	ldr	r2, [r4, #0]
 8010084:	f022 0220 	bic.w	r2, r2, #32
 8010088:	6022      	str	r2, [r4, #0]
 801008a:	2210      	movs	r2, #16
 801008c:	e7b7      	b.n	800fffe <_printf_i+0xd2>
 801008e:	064d      	lsls	r5, r1, #25
 8010090:	bf48      	it	mi
 8010092:	b29b      	uxthmi	r3, r3
 8010094:	e7ef      	b.n	8010076 <_printf_i+0x14a>
 8010096:	4665      	mov	r5, ip
 8010098:	fbb3 f1f2 	udiv	r1, r3, r2
 801009c:	fb02 3311 	mls	r3, r2, r1, r3
 80100a0:	5cc3      	ldrb	r3, [r0, r3]
 80100a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80100a6:	460b      	mov	r3, r1
 80100a8:	2900      	cmp	r1, #0
 80100aa:	d1f5      	bne.n	8010098 <_printf_i+0x16c>
 80100ac:	e7b9      	b.n	8010022 <_printf_i+0xf6>
 80100ae:	6813      	ldr	r3, [r2, #0]
 80100b0:	6825      	ldr	r5, [r4, #0]
 80100b2:	6961      	ldr	r1, [r4, #20]
 80100b4:	1d18      	adds	r0, r3, #4
 80100b6:	6010      	str	r0, [r2, #0]
 80100b8:	0628      	lsls	r0, r5, #24
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	d501      	bpl.n	80100c2 <_printf_i+0x196>
 80100be:	6019      	str	r1, [r3, #0]
 80100c0:	e002      	b.n	80100c8 <_printf_i+0x19c>
 80100c2:	066a      	lsls	r2, r5, #25
 80100c4:	d5fb      	bpl.n	80100be <_printf_i+0x192>
 80100c6:	8019      	strh	r1, [r3, #0]
 80100c8:	2300      	movs	r3, #0
 80100ca:	6123      	str	r3, [r4, #16]
 80100cc:	4665      	mov	r5, ip
 80100ce:	e7b9      	b.n	8010044 <_printf_i+0x118>
 80100d0:	6813      	ldr	r3, [r2, #0]
 80100d2:	1d19      	adds	r1, r3, #4
 80100d4:	6011      	str	r1, [r2, #0]
 80100d6:	681d      	ldr	r5, [r3, #0]
 80100d8:	6862      	ldr	r2, [r4, #4]
 80100da:	2100      	movs	r1, #0
 80100dc:	4628      	mov	r0, r5
 80100de:	f7f0 f897 	bl	8000210 <memchr>
 80100e2:	b108      	cbz	r0, 80100e8 <_printf_i+0x1bc>
 80100e4:	1b40      	subs	r0, r0, r5
 80100e6:	6060      	str	r0, [r4, #4]
 80100e8:	6863      	ldr	r3, [r4, #4]
 80100ea:	6123      	str	r3, [r4, #16]
 80100ec:	2300      	movs	r3, #0
 80100ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80100f2:	e7a7      	b.n	8010044 <_printf_i+0x118>
 80100f4:	6923      	ldr	r3, [r4, #16]
 80100f6:	462a      	mov	r2, r5
 80100f8:	4639      	mov	r1, r7
 80100fa:	4630      	mov	r0, r6
 80100fc:	47c0      	blx	r8
 80100fe:	3001      	adds	r0, #1
 8010100:	d0aa      	beq.n	8010058 <_printf_i+0x12c>
 8010102:	6823      	ldr	r3, [r4, #0]
 8010104:	079b      	lsls	r3, r3, #30
 8010106:	d413      	bmi.n	8010130 <_printf_i+0x204>
 8010108:	68e0      	ldr	r0, [r4, #12]
 801010a:	9b03      	ldr	r3, [sp, #12]
 801010c:	4298      	cmp	r0, r3
 801010e:	bfb8      	it	lt
 8010110:	4618      	movlt	r0, r3
 8010112:	e7a3      	b.n	801005c <_printf_i+0x130>
 8010114:	2301      	movs	r3, #1
 8010116:	464a      	mov	r2, r9
 8010118:	4639      	mov	r1, r7
 801011a:	4630      	mov	r0, r6
 801011c:	47c0      	blx	r8
 801011e:	3001      	adds	r0, #1
 8010120:	d09a      	beq.n	8010058 <_printf_i+0x12c>
 8010122:	3501      	adds	r5, #1
 8010124:	68e3      	ldr	r3, [r4, #12]
 8010126:	9a03      	ldr	r2, [sp, #12]
 8010128:	1a9b      	subs	r3, r3, r2
 801012a:	42ab      	cmp	r3, r5
 801012c:	dcf2      	bgt.n	8010114 <_printf_i+0x1e8>
 801012e:	e7eb      	b.n	8010108 <_printf_i+0x1dc>
 8010130:	2500      	movs	r5, #0
 8010132:	f104 0919 	add.w	r9, r4, #25
 8010136:	e7f5      	b.n	8010124 <_printf_i+0x1f8>
 8010138:	2b00      	cmp	r3, #0
 801013a:	d1ac      	bne.n	8010096 <_printf_i+0x16a>
 801013c:	7803      	ldrb	r3, [r0, #0]
 801013e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010142:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010146:	e76c      	b.n	8010022 <_printf_i+0xf6>
 8010148:	0801b995 	.word	0x0801b995
 801014c:	0801b9a6 	.word	0x0801b9a6

08010150 <__sread>:
 8010150:	b510      	push	{r4, lr}
 8010152:	460c      	mov	r4, r1
 8010154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010158:	f000 f894 	bl	8010284 <_read_r>
 801015c:	2800      	cmp	r0, #0
 801015e:	bfab      	itete	ge
 8010160:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010162:	89a3      	ldrhlt	r3, [r4, #12]
 8010164:	181b      	addge	r3, r3, r0
 8010166:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801016a:	bfac      	ite	ge
 801016c:	6563      	strge	r3, [r4, #84]	; 0x54
 801016e:	81a3      	strhlt	r3, [r4, #12]
 8010170:	bd10      	pop	{r4, pc}

08010172 <__swrite>:
 8010172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010176:	461f      	mov	r7, r3
 8010178:	898b      	ldrh	r3, [r1, #12]
 801017a:	05db      	lsls	r3, r3, #23
 801017c:	4605      	mov	r5, r0
 801017e:	460c      	mov	r4, r1
 8010180:	4616      	mov	r6, r2
 8010182:	d505      	bpl.n	8010190 <__swrite+0x1e>
 8010184:	2302      	movs	r3, #2
 8010186:	2200      	movs	r2, #0
 8010188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801018c:	f000 f868 	bl	8010260 <_lseek_r>
 8010190:	89a3      	ldrh	r3, [r4, #12]
 8010192:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010196:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801019a:	81a3      	strh	r3, [r4, #12]
 801019c:	4632      	mov	r2, r6
 801019e:	463b      	mov	r3, r7
 80101a0:	4628      	mov	r0, r5
 80101a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80101a6:	f000 b817 	b.w	80101d8 <_write_r>

080101aa <__sseek>:
 80101aa:	b510      	push	{r4, lr}
 80101ac:	460c      	mov	r4, r1
 80101ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101b2:	f000 f855 	bl	8010260 <_lseek_r>
 80101b6:	1c43      	adds	r3, r0, #1
 80101b8:	89a3      	ldrh	r3, [r4, #12]
 80101ba:	bf15      	itete	ne
 80101bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80101be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80101c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80101c6:	81a3      	strheq	r3, [r4, #12]
 80101c8:	bf18      	it	ne
 80101ca:	81a3      	strhne	r3, [r4, #12]
 80101cc:	bd10      	pop	{r4, pc}

080101ce <__sclose>:
 80101ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101d2:	f000 b813 	b.w	80101fc <_close_r>
	...

080101d8 <_write_r>:
 80101d8:	b538      	push	{r3, r4, r5, lr}
 80101da:	4c07      	ldr	r4, [pc, #28]	; (80101f8 <_write_r+0x20>)
 80101dc:	4605      	mov	r5, r0
 80101de:	4608      	mov	r0, r1
 80101e0:	4611      	mov	r1, r2
 80101e2:	2200      	movs	r2, #0
 80101e4:	6022      	str	r2, [r4, #0]
 80101e6:	461a      	mov	r2, r3
 80101e8:	f7f7 fdcc 	bl	8007d84 <_write>
 80101ec:	1c43      	adds	r3, r0, #1
 80101ee:	d102      	bne.n	80101f6 <_write_r+0x1e>
 80101f0:	6823      	ldr	r3, [r4, #0]
 80101f2:	b103      	cbz	r3, 80101f6 <_write_r+0x1e>
 80101f4:	602b      	str	r3, [r5, #0]
 80101f6:	bd38      	pop	{r3, r4, r5, pc}
 80101f8:	2006a7e0 	.word	0x2006a7e0

080101fc <_close_r>:
 80101fc:	b538      	push	{r3, r4, r5, lr}
 80101fe:	4c06      	ldr	r4, [pc, #24]	; (8010218 <_close_r+0x1c>)
 8010200:	2300      	movs	r3, #0
 8010202:	4605      	mov	r5, r0
 8010204:	4608      	mov	r0, r1
 8010206:	6023      	str	r3, [r4, #0]
 8010208:	f7f1 f835 	bl	8001276 <_close>
 801020c:	1c43      	adds	r3, r0, #1
 801020e:	d102      	bne.n	8010216 <_close_r+0x1a>
 8010210:	6823      	ldr	r3, [r4, #0]
 8010212:	b103      	cbz	r3, 8010216 <_close_r+0x1a>
 8010214:	602b      	str	r3, [r5, #0]
 8010216:	bd38      	pop	{r3, r4, r5, pc}
 8010218:	2006a7e0 	.word	0x2006a7e0

0801021c <_fstat_r>:
 801021c:	b538      	push	{r3, r4, r5, lr}
 801021e:	4c07      	ldr	r4, [pc, #28]	; (801023c <_fstat_r+0x20>)
 8010220:	2300      	movs	r3, #0
 8010222:	4605      	mov	r5, r0
 8010224:	4608      	mov	r0, r1
 8010226:	4611      	mov	r1, r2
 8010228:	6023      	str	r3, [r4, #0]
 801022a:	f7f1 f830 	bl	800128e <_fstat>
 801022e:	1c43      	adds	r3, r0, #1
 8010230:	d102      	bne.n	8010238 <_fstat_r+0x1c>
 8010232:	6823      	ldr	r3, [r4, #0]
 8010234:	b103      	cbz	r3, 8010238 <_fstat_r+0x1c>
 8010236:	602b      	str	r3, [r5, #0]
 8010238:	bd38      	pop	{r3, r4, r5, pc}
 801023a:	bf00      	nop
 801023c:	2006a7e0 	.word	0x2006a7e0

08010240 <_isatty_r>:
 8010240:	b538      	push	{r3, r4, r5, lr}
 8010242:	4c06      	ldr	r4, [pc, #24]	; (801025c <_isatty_r+0x1c>)
 8010244:	2300      	movs	r3, #0
 8010246:	4605      	mov	r5, r0
 8010248:	4608      	mov	r0, r1
 801024a:	6023      	str	r3, [r4, #0]
 801024c:	f7f1 f82f 	bl	80012ae <_isatty>
 8010250:	1c43      	adds	r3, r0, #1
 8010252:	d102      	bne.n	801025a <_isatty_r+0x1a>
 8010254:	6823      	ldr	r3, [r4, #0]
 8010256:	b103      	cbz	r3, 801025a <_isatty_r+0x1a>
 8010258:	602b      	str	r3, [r5, #0]
 801025a:	bd38      	pop	{r3, r4, r5, pc}
 801025c:	2006a7e0 	.word	0x2006a7e0

08010260 <_lseek_r>:
 8010260:	b538      	push	{r3, r4, r5, lr}
 8010262:	4c07      	ldr	r4, [pc, #28]	; (8010280 <_lseek_r+0x20>)
 8010264:	4605      	mov	r5, r0
 8010266:	4608      	mov	r0, r1
 8010268:	4611      	mov	r1, r2
 801026a:	2200      	movs	r2, #0
 801026c:	6022      	str	r2, [r4, #0]
 801026e:	461a      	mov	r2, r3
 8010270:	f7f1 f828 	bl	80012c4 <_lseek>
 8010274:	1c43      	adds	r3, r0, #1
 8010276:	d102      	bne.n	801027e <_lseek_r+0x1e>
 8010278:	6823      	ldr	r3, [r4, #0]
 801027a:	b103      	cbz	r3, 801027e <_lseek_r+0x1e>
 801027c:	602b      	str	r3, [r5, #0]
 801027e:	bd38      	pop	{r3, r4, r5, pc}
 8010280:	2006a7e0 	.word	0x2006a7e0

08010284 <_read_r>:
 8010284:	b538      	push	{r3, r4, r5, lr}
 8010286:	4c07      	ldr	r4, [pc, #28]	; (80102a4 <_read_r+0x20>)
 8010288:	4605      	mov	r5, r0
 801028a:	4608      	mov	r0, r1
 801028c:	4611      	mov	r1, r2
 801028e:	2200      	movs	r2, #0
 8010290:	6022      	str	r2, [r4, #0]
 8010292:	461a      	mov	r2, r3
 8010294:	f7f0 ffd2 	bl	800123c <_read>
 8010298:	1c43      	adds	r3, r0, #1
 801029a:	d102      	bne.n	80102a2 <_read_r+0x1e>
 801029c:	6823      	ldr	r3, [r4, #0]
 801029e:	b103      	cbz	r3, 80102a2 <_read_r+0x1e>
 80102a0:	602b      	str	r3, [r5, #0]
 80102a2:	bd38      	pop	{r3, r4, r5, pc}
 80102a4:	2006a7e0 	.word	0x2006a7e0

080102a8 <expf>:
 80102a8:	b530      	push	{r4, r5, lr}
 80102aa:	ed2d 8b02 	vpush	{d8}
 80102ae:	4d35      	ldr	r5, [pc, #212]	; (8010384 <expf+0xdc>)
 80102b0:	b08b      	sub	sp, #44	; 0x2c
 80102b2:	eeb0 8a40 	vmov.f32	s16, s0
 80102b6:	f000 f871 	bl	801039c <__ieee754_expf>
 80102ba:	f995 3000 	ldrsb.w	r3, [r5]
 80102be:	3301      	adds	r3, #1
 80102c0:	ee10 4a10 	vmov	r4, s0
 80102c4:	d030      	beq.n	8010328 <expf+0x80>
 80102c6:	eeb0 0a48 	vmov.f32	s0, s16
 80102ca:	f000 f93d 	bl	8010548 <finitef>
 80102ce:	b358      	cbz	r0, 8010328 <expf+0x80>
 80102d0:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8010388 <expf+0xe0>
 80102d4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80102d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102dc:	dd35      	ble.n	801034a <expf+0xa2>
 80102de:	2303      	movs	r3, #3
 80102e0:	9300      	str	r3, [sp, #0]
 80102e2:	4b2a      	ldr	r3, [pc, #168]	; (801038c <expf+0xe4>)
 80102e4:	9301      	str	r3, [sp, #4]
 80102e6:	ee18 0a10 	vmov	r0, s16
 80102ea:	2300      	movs	r3, #0
 80102ec:	9308      	str	r3, [sp, #32]
 80102ee:	f7f0 f943 	bl	8000578 <__aeabi_f2d>
 80102f2:	f995 3000 	ldrsb.w	r3, [r5]
 80102f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80102fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80102fe:	b9cb      	cbnz	r3, 8010334 <expf+0x8c>
 8010300:	4b23      	ldr	r3, [pc, #140]	; (8010390 <expf+0xe8>)
 8010302:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8010306:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801030a:	4668      	mov	r0, sp
 801030c:	f000 f91a 	bl	8010544 <matherr>
 8010310:	b1b0      	cbz	r0, 8010340 <expf+0x98>
 8010312:	9b08      	ldr	r3, [sp, #32]
 8010314:	b11b      	cbz	r3, 801031e <expf+0x76>
 8010316:	f7ff f81f 	bl	800f358 <__errno>
 801031a:	9b08      	ldr	r3, [sp, #32]
 801031c:	6003      	str	r3, [r0, #0]
 801031e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010322:	f7f0 f981 	bl	8000628 <__aeabi_d2f>
 8010326:	4604      	mov	r4, r0
 8010328:	ee00 4a10 	vmov	s0, r4
 801032c:	b00b      	add	sp, #44	; 0x2c
 801032e:	ecbd 8b02 	vpop	{d8}
 8010332:	bd30      	pop	{r4, r5, pc}
 8010334:	4917      	ldr	r1, [pc, #92]	; (8010394 <expf+0xec>)
 8010336:	2000      	movs	r0, #0
 8010338:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801033c:	2b02      	cmp	r3, #2
 801033e:	d1e4      	bne.n	801030a <expf+0x62>
 8010340:	f7ff f80a 	bl	800f358 <__errno>
 8010344:	2322      	movs	r3, #34	; 0x22
 8010346:	6003      	str	r3, [r0, #0]
 8010348:	e7e3      	b.n	8010312 <expf+0x6a>
 801034a:	eddf 7a13 	vldr	s15, [pc, #76]	; 8010398 <expf+0xf0>
 801034e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010356:	d5e7      	bpl.n	8010328 <expf+0x80>
 8010358:	2304      	movs	r3, #4
 801035a:	9300      	str	r3, [sp, #0]
 801035c:	4b0b      	ldr	r3, [pc, #44]	; (801038c <expf+0xe4>)
 801035e:	9301      	str	r3, [sp, #4]
 8010360:	ee18 0a10 	vmov	r0, s16
 8010364:	2300      	movs	r3, #0
 8010366:	9308      	str	r3, [sp, #32]
 8010368:	f7f0 f906 	bl	8000578 <__aeabi_f2d>
 801036c:	2300      	movs	r3, #0
 801036e:	2200      	movs	r2, #0
 8010370:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010374:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010378:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801037c:	f995 3000 	ldrsb.w	r3, [r5]
 8010380:	e7dc      	b.n	801033c <expf+0x94>
 8010382:	bf00      	nop
 8010384:	200008d8 	.word	0x200008d8
 8010388:	42b17180 	.word	0x42b17180
 801038c:	0801b9b7 	.word	0x0801b9b7
 8010390:	47efffff 	.word	0x47efffff
 8010394:	7ff00000 	.word	0x7ff00000
 8010398:	c2cff1b5 	.word	0xc2cff1b5

0801039c <__ieee754_expf>:
 801039c:	ee10 2a10 	vmov	r2, s0
 80103a0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80103a4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80103a8:	d902      	bls.n	80103b0 <__ieee754_expf+0x14>
 80103aa:	ee30 0a00 	vadd.f32	s0, s0, s0
 80103ae:	4770      	bx	lr
 80103b0:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 80103b4:	d106      	bne.n	80103c4 <__ieee754_expf+0x28>
 80103b6:	eddf 7a51 	vldr	s15, [pc, #324]	; 80104fc <__ieee754_expf+0x160>
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	bf18      	it	ne
 80103be:	eeb0 0a67 	vmovne.f32	s0, s15
 80103c2:	4770      	bx	lr
 80103c4:	484e      	ldr	r0, [pc, #312]	; (8010500 <__ieee754_expf+0x164>)
 80103c6:	4282      	cmp	r2, r0
 80103c8:	dd04      	ble.n	80103d4 <__ieee754_expf+0x38>
 80103ca:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8010504 <__ieee754_expf+0x168>
 80103ce:	ee20 0a00 	vmul.f32	s0, s0, s0
 80103d2:	4770      	bx	lr
 80103d4:	2a00      	cmp	r2, #0
 80103d6:	da03      	bge.n	80103e0 <__ieee754_expf+0x44>
 80103d8:	4a4b      	ldr	r2, [pc, #300]	; (8010508 <__ieee754_expf+0x16c>)
 80103da:	4291      	cmp	r1, r2
 80103dc:	f200 808a 	bhi.w	80104f4 <__ieee754_expf+0x158>
 80103e0:	4a4a      	ldr	r2, [pc, #296]	; (801050c <__ieee754_expf+0x170>)
 80103e2:	4291      	cmp	r1, r2
 80103e4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80103e8:	d954      	bls.n	8010494 <__ieee754_expf+0xf8>
 80103ea:	4a49      	ldr	r2, [pc, #292]	; (8010510 <__ieee754_expf+0x174>)
 80103ec:	4291      	cmp	r1, r2
 80103ee:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80103f2:	d836      	bhi.n	8010462 <__ieee754_expf+0xc6>
 80103f4:	4947      	ldr	r1, [pc, #284]	; (8010514 <__ieee754_expf+0x178>)
 80103f6:	4411      	add	r1, r2
 80103f8:	ed91 7a00 	vldr	s14, [r1]
 80103fc:	4946      	ldr	r1, [pc, #280]	; (8010518 <__ieee754_expf+0x17c>)
 80103fe:	440a      	add	r2, r1
 8010400:	edd2 7a00 	vldr	s15, [r2]
 8010404:	ee30 7a47 	vsub.f32	s14, s0, s14
 8010408:	f1c3 0201 	rsb	r2, r3, #1
 801040c:	1ad2      	subs	r2, r2, r3
 801040e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8010412:	ee60 6a00 	vmul.f32	s13, s0, s0
 8010416:	eddf 5a41 	vldr	s11, [pc, #260]	; 801051c <__ieee754_expf+0x180>
 801041a:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8010520 <__ieee754_expf+0x184>
 801041e:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8010422:	eddf 5a40 	vldr	s11, [pc, #256]	; 8010524 <__ieee754_expf+0x188>
 8010426:	eee5 5a26 	vfma.f32	s11, s10, s13
 801042a:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8010528 <__ieee754_expf+0x18c>
 801042e:	eea5 5aa6 	vfma.f32	s10, s11, s13
 8010432:	eddf 5a3e 	vldr	s11, [pc, #248]	; 801052c <__ieee754_expf+0x190>
 8010436:	eee5 5a26 	vfma.f32	s11, s10, s13
 801043a:	eeb0 5a40 	vmov.f32	s10, s0
 801043e:	eea5 5ae6 	vfms.f32	s10, s11, s13
 8010442:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8010446:	eef0 6a45 	vmov.f32	s13, s10
 801044a:	ee20 5a05 	vmul.f32	s10, s0, s10
 801044e:	bb92      	cbnz	r2, 80104b6 <__ieee754_expf+0x11a>
 8010450:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8010454:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8010458:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801045c:	ee36 0a40 	vsub.f32	s0, s12, s0
 8010460:	4770      	bx	lr
 8010462:	4b33      	ldr	r3, [pc, #204]	; (8010530 <__ieee754_expf+0x194>)
 8010464:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8010534 <__ieee754_expf+0x198>
 8010468:	4413      	add	r3, r2
 801046a:	edd3 7a00 	vldr	s15, [r3]
 801046e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010472:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8010538 <__ieee754_expf+0x19c>
 8010476:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801047a:	ee17 2a90 	vmov	r2, s15
 801047e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010482:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8010486:	eeb0 7a40 	vmov.f32	s14, s0
 801048a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 801053c <__ieee754_expf+0x1a0>
 801048e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8010492:	e7bc      	b.n	801040e <__ieee754_expf+0x72>
 8010494:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8010498:	d20b      	bcs.n	80104b2 <__ieee754_expf+0x116>
 801049a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8010504 <__ieee754_expf+0x168>
 801049e:	ee70 6a26 	vadd.f32	s13, s0, s13
 80104a2:	eef4 6ac6 	vcmpe.f32	s13, s12
 80104a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104aa:	dd02      	ble.n	80104b2 <__ieee754_expf+0x116>
 80104ac:	ee30 0a06 	vadd.f32	s0, s0, s12
 80104b0:	4770      	bx	lr
 80104b2:	2200      	movs	r2, #0
 80104b4:	e7ad      	b.n	8010412 <__ieee754_expf+0x76>
 80104b6:	ee75 6ae6 	vsub.f32	s13, s11, s13
 80104ba:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80104be:	ee85 0a26 	vdiv.f32	s0, s10, s13
 80104c2:	bfb8      	it	lt
 80104c4:	3264      	addlt	r2, #100	; 0x64
 80104c6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80104ca:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80104ce:	ee76 7a40 	vsub.f32	s15, s12, s0
 80104d2:	ee17 3a90 	vmov	r3, s15
 80104d6:	bfab      	itete	ge
 80104d8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80104dc:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80104e0:	ee00 3a10 	vmovge	s0, r3
 80104e4:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8010540 <__ieee754_expf+0x1a4>
 80104e8:	bfbc      	itt	lt
 80104ea:	ee00 3a10 	vmovlt	s0, r3
 80104ee:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80104f2:	4770      	bx	lr
 80104f4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80104fc <__ieee754_expf+0x160>
 80104f8:	4770      	bx	lr
 80104fa:	bf00      	nop
 80104fc:	00000000 	.word	0x00000000
 8010500:	42b17217 	.word	0x42b17217
 8010504:	7149f2ca 	.word	0x7149f2ca
 8010508:	42cff1b5 	.word	0x42cff1b5
 801050c:	3eb17218 	.word	0x3eb17218
 8010510:	3f851591 	.word	0x3f851591
 8010514:	0801b9c4 	.word	0x0801b9c4
 8010518:	0801b9cc 	.word	0x0801b9cc
 801051c:	3331bb4c 	.word	0x3331bb4c
 8010520:	b5ddea0e 	.word	0xb5ddea0e
 8010524:	388ab355 	.word	0x388ab355
 8010528:	bb360b61 	.word	0xbb360b61
 801052c:	3e2aaaab 	.word	0x3e2aaaab
 8010530:	0801b9bc 	.word	0x0801b9bc
 8010534:	3fb8aa3b 	.word	0x3fb8aa3b
 8010538:	3f317180 	.word	0x3f317180
 801053c:	3717f7d1 	.word	0x3717f7d1
 8010540:	0d800000 	.word	0x0d800000

08010544 <matherr>:
 8010544:	2000      	movs	r0, #0
 8010546:	4770      	bx	lr

08010548 <finitef>:
 8010548:	ee10 3a10 	vmov	r3, s0
 801054c:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8010550:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8010554:	bfac      	ite	ge
 8010556:	2000      	movge	r0, #0
 8010558:	2001      	movlt	r0, #1
 801055a:	4770      	bx	lr

0801055c <_init>:
 801055c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801055e:	bf00      	nop
 8010560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010562:	bc08      	pop	{r3}
 8010564:	469e      	mov	lr, r3
 8010566:	4770      	bx	lr

08010568 <_fini>:
 8010568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801056a:	bf00      	nop
 801056c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801056e:	bc08      	pop	{r3}
 8010570:	469e      	mov	lr, r3
 8010572:	4770      	bx	lr
